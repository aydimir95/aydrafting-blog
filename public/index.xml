<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blog</title><link>https://blog.aydrafting.com/</link><description>Recent content on Blog</description><image><title>Blog</title><url>https://blog.aydrafting.com/LogoAYD.png</url><link>https://blog.aydrafting.com/LogoAYD.png</link></image><generator>Hugo -- 0.148.2</generator><language>en-us</language><copyright>2025 AYDrafting. All rights reserved.</copyright><lastBuildDate>Fri, 08 Aug 2025 13:06:57 +0300</lastBuildDate><atom:link href="https://blog.aydrafting.com/index.xml" rel="self" type="application/rss+xml"/><item><title>C# + Revit API: Lesson 7 - Introduction to Classes</title><link>https://blog.aydrafting.com/posts/post-7/</link><pubDate>Fri, 08 Aug 2025 13:06:57 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-7/</guid><description>&lt;h1 id="1-introduction">1. Introduction&lt;/h1>
&lt;h3 id="project-folder-structure">Project Folder Structure&lt;/h3>
&lt;ol>
&lt;li>Commands&lt;/li>
&lt;li>Extensions&lt;/li>
&lt;li>Forms&lt;/li>
&lt;li>General&lt;/li>
&lt;li>Resources&lt;/li>
&lt;li>Utilities
&lt;em>These are &lt;code>folders&lt;/code> which contain various files that our toolbar will utilize.&lt;/em>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;em>Note that these are not necessarily aligned with &lt;code>namespaces&lt;/code> (which will be covered later)&lt;/em>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="2-what-is-a-class">2. What is a Class?&lt;/h1>
&lt;ol>
&lt;li>In C#, classes are templates related to the creation and management of objects. There are many predefined &lt;code>classes&lt;/code> available in C# and the Revit API.&lt;/li>
&lt;li>We use them for a wide range of things and will regularly be creating and developing our own classes.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="accessing-properties--methods-of-a-class">Accessing properties / methods of a Class&lt;/h3>
&lt;ol>
&lt;li>Property:
&lt;ol>
&lt;li>&lt;code>object.Property&lt;/code> -&amp;gt; to access a property&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Method:
&lt;ol>
&lt;li>&lt;code>Object.Method(argument1, argument2, etc)&lt;/code> -&amp;gt; to access a method&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="namespaces">Namespaces&lt;/h3>
&lt;ol>
&lt;li>When we create classes, we first tell them where they belong in our project.&lt;/li>
&lt;li>&lt;code>Namespaces&lt;/code> can be nested within others using a dot separator, eventually tied back to our &lt;code>.addin&lt;/code> namespace.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Revit API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Autodesk.Revit.Attributes;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Autodesk.Revit.UI;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// geeWiz - internal project objects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> geeWiz.Extensions;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> geeWiz = geeWiz.Forms;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> geeWiz = geeWiz.Utilities.Workshare_Utils;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The class belongs to the Commands namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> geeWiz.Cmds_Audit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Cmd_DeletePatterns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Cmd_PurgeRooms&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Cmd_PurgeTemplates&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Cmd_PurgeFilters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="basic-class-anatomy">Basic Class Anatomy&lt;/h3>
&lt;ol>
&lt;li>&lt;code>modifers class ClassName : Interface(s)&lt;/code>
&lt;ol>
&lt;li>Constructor (optional)&lt;/li>
&lt;li>Properties (optional)&lt;/li>
&lt;li>Methods (optional)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>Access modifiers&lt;/code> control how this code can be accessed inside and outside your project.&lt;/li>
&lt;li>You will typically need to declare at least on of &lt;em>&lt;strong>&lt;code>public/private&lt;/code>&lt;/strong>&lt;/em>,
&lt;ul>
&lt;li>And sometimes &lt;em>&lt;strong>&lt;code>static&lt;/code>&lt;/strong>&lt;/em> for the purposes we will use them for early on.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="static-modifier">&lt;code>Static&lt;/code> Modifier&lt;/h3>
&lt;ul>
&lt;li>The &lt;code>static&lt;/code> &lt;code>access&lt;/code> &lt;code>modifier&lt;/code> is a difficult concept to grasp at first, so we will simplify it somewhat.
&lt;ul>
&lt;li>Classes with a &lt;code>static&lt;/code> &lt;code>modifier&lt;/code> do not support the creation of &lt;code>objects&lt;/code> of that &lt;code>class&lt;/code> (instantiated).&lt;/li>
&lt;li>We commonly take advantage of this to create classes which behave more like toolkits, where the class itself acts more like a singe object we can call upon to do things for us.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>So basically, the &lt;code>Static&lt;/code> &lt;code>modifier&lt;/code> is one instrument that you could use to build a complex script with.&lt;/p></description></item><item><title>C# + Revit API: Lesson 6 - try &amp; catch Statements</title><link>https://blog.aydrafting.com/posts/post-6/</link><pubDate>Fri, 08 Aug 2025 11:47:12 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-6/</guid><description>&lt;h1 id="pseudocode">Pseudocode&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> to &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">try&lt;/span> gets exception, rollback and &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exceptions">Exceptions&lt;/h2>
&lt;blockquote>
&lt;p>Exceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#75715e">// Exception as &amp;#34;e&amp;#34; to print the error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> To &lt;span style="color:#66d9ef">catch&lt;/span> a specific exceptions, &lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> To &lt;span style="color:#66d9ef">catch&lt;/span> all exceptions, &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// but better to catch specific exceptions, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// otherwise you will catch all necessary and unecessary exceptions.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">finally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> To run a final code regardless of outcome;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="use-dont-abuse">Use Don&amp;rsquo;t Abuse&lt;/h2>
&lt;blockquote>
&lt;p>When you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!&lt;/p></description></item><item><title>C# + Revit API: Lesson 5 - `if` Statements</title><link>https://blog.aydrafting.com/posts/post-5/</link><pubDate>Wed, 06 Aug 2025 17:36:22 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-5/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#75715e">// Condition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run &lt;span style="color:#66d9ef">if&lt;/span> condition &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#75715e">// If we have no false outcome -&amp;gt; we can skip &amp;#39;else&amp;#39; branch altogether&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run &lt;span style="color:#66d9ef">if&lt;/span> condition &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="else-if-statement">&lt;code>else if&lt;/code> Statement&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#75715e">// Condition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run &lt;span style="color:#66d9ef">if&lt;/span> condition &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#75715e">// Condition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run &lt;span style="color:#66d9ef">if&lt;/span> there are more conditions;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#75715e">// If we have no false outcome -&amp;gt; we can skip &amp;#39;else&amp;#39; branch altogether&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run &lt;span style="color:#66d9ef">if&lt;/span> condition &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="shorthand-if-statements">Shorthand &lt;code>if&lt;/code> Statements&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">value&lt;/span> = condition?then:&lt;span style="color:#66d9ef">else&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Nearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it&amp;rsquo;s a simple one liner task.&lt;/p></description></item><item><title>C# + Revit API: Lesson 4 - Logical Operators</title><link>https://blog.aydrafting.com/posts/post-4/</link><pubDate>Wed, 06 Aug 2025 15:50:00 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-4/</guid><description>&lt;blockquote>
&lt;p>They control logic and flow in our tools.
We will have a good understanding of core statements we can use to build Revit Add-ins.&lt;/p>&lt;/blockquote>
&lt;h1 id="logical-operators">Logical Operators&lt;/h1>
&lt;p>&lt;code>x == y&lt;/code> =&amp;gt; &lt;em>true if x is equal to y&lt;/em>
&lt;code>x != y&lt;/code> =&amp;gt; &lt;em>true if x is not equal to y&lt;/em>
&lt;code>x &amp;gt; y&lt;/code> =&amp;gt; &lt;em>true if x is greater than y&lt;/em>
&lt;code>x &amp;lt; y&lt;/code> =&amp;gt; &lt;em>true if x is less than y&lt;/em>
&lt;code>x &amp;gt;= y&lt;/code> =&amp;gt; &lt;em>true if x greater than or equals to y&lt;/em>
&lt;code>x &amp;lt;= y&lt;/code> =&amp;gt; &lt;em>true if x less than or equals to y&lt;/em>&lt;/p></description></item><item><title>C# + Revit API: Lesson 3 - Fundamental Types of Data in C#</title><link>https://blog.aydrafting.com/posts/post-3/</link><pubDate>Wed, 06 Aug 2025 14:29:29 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-3/</guid><description>&lt;h1 id="boolean-bool">Boolean &lt;code>bool&lt;/code>&lt;/h1>
&lt;ul>
&lt;li>true (1)&lt;/li>
&lt;li>false (0)&lt;/li>
&lt;/ul>
&lt;h1 id="integer-int">Integer &lt;code>int&lt;/code>&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Whole number:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1, 2, 3, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Numbers come in different formats but by default they are signable (can be negative).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Typically, they use 32 bits based.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="double-double">Double &lt;code>double&lt;/code>&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Decimal number:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>0.0, 1.5, 6.592, -5.00, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Doubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="characters-char">Characters &lt;code>char&lt;/code>&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;, etc.&lt;/p></description></item><item><title>C# + Revit API: Lesson 2 - Bits &amp; Bytes, ASCII Table, Pointers &amp; Structs - Programming 101</title><link>https://blog.aydrafting.com/posts/post-2/</link><pubDate>Wed, 06 Aug 2025 14:23:14 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-2/</guid><description>&lt;h4 id="i-suggest-taking-cs50-course-to-understand-the-basics-of-programming">I suggest taking &lt;a href="https://pll.harvard.edu/course/cs50-introduction-computer-science">CS50 Course&lt;/a> to understand the basics of Programming&lt;/h4>
&lt;ol>
&lt;li>True &amp;amp; False&lt;/li>
&lt;li>0 and 1&lt;/li>
&lt;li>Base 2 numbering system&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>1 0 1
x x x
4 2 1 = 5
In other words:
2 2 2
x x x
2 1 0
4 2 1 = 5
1 0 1
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>We call these bits
Eight bits = 1 byte
Memory is addressed into bytes
&lt;/code>&lt;/pre>&lt;h2 id="ascii-tables-bring-meaning-to-what-various-bytes-represent">ASCII Tables bring meaning to what various bytes represent:&lt;/h2>
&lt;pre tabindex="0">&lt;code>ASCII 48 = 0
(00) 110000
1 * 2^4 = 16
1 * 2^5 = 32
16 + 32 = 48
48 = 0 (in ASCII Table)
&lt;/code>&lt;/pre>&lt;h1 id="pointers--structs-in-c">Pointers = Structs (in C)&lt;/h1>
&lt;p>Pointers are hexadecimal based values that identify an address in computer memory.&lt;/p></description></item><item><title>C# + Revit API: Lesson 1 - A Simple Walkthrough of the Command</title><link>https://blog.aydrafting.com/posts/post-1/</link><pubDate>Wed, 06 Aug 2025 01:00:00 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-1/</guid><description>&lt;p>This post explains &lt;strong>one concrete command&lt;/strong>—line by line—so a beginner can follow without extra abstractions.&lt;/p>
&lt;p>&lt;strong>What this command does when you click your add-in button:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Tries to create a &lt;strong>sheet&lt;/strong> (using an &lt;strong>invalid&lt;/strong> title block on purpose → shows how error handling works).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Collects up to &lt;strong>10 existing sheets&lt;/strong> and formats their numbers/names.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Displays the result in a &lt;strong>WPF dialog&lt;/strong> via a ViewModel.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.&lt;/p></description></item><item><title>C# + Revit API: Lesson 0</title><link>https://blog.aydrafting.com/posts/post-0/</link><pubDate>Wed, 06 Aug 2025 00:00:00 +0300</pubDate><guid>https://blog.aydrafting.com/posts/post-0/</guid><description>&lt;h3 id="why-c">Why C#?&lt;/h3>
&lt;ol>
&lt;li>Scalability&lt;/li>
&lt;/ol>
&lt;h1 id="start-with">Start with:&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://visualstudio.microsoft.com/downloads/">Install Visual Studio 2022 Community&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dotnet.microsoft.com/en-us/download/visual-studio-sdks">Install .NET SDKs (.NET4.8 &amp;amp; .NET8)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Nice3point/RevitTemplates">Install Nice3Point Templates&lt;/a>&lt;/li>
&lt;/ol>
&lt;h1 id="solution">Solution&lt;/h1>
&lt;ol>
&lt;li>Start a solution / project
&lt;ol>
&lt;li>Create a new project&lt;/li>
&lt;li>Choose the Revit Addin (Nic3Point) Template&lt;/li>
&lt;li>Configure your new project
&lt;ol>
&lt;li>Name of the project&lt;/li>
&lt;li>Location&lt;/li>
&lt;li>Solution Name - same as project name (it&amp;rsquo;s a folder name that holds many projects)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Additional Information
&lt;ol>
&lt;li>Add-in type -&amp;gt; Application&lt;/li>
&lt;li>User Interface -&amp;gt; None&lt;/li>
&lt;li>IoC -&amp;gt; Disabled&lt;/li>
&lt;li>Serilog support -&amp;gt; unchecked&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Explore Visual Studio
&lt;ol>
&lt;li>Properties &amp;amp; Solution Explorer (Project Browser in Revit)&lt;/li>
&lt;li>Error &amp;amp; Output&lt;/li>
&lt;li>CSProj -&amp;gt; Preconfigured up to Revit v.2025&lt;/li>
&lt;li>.addin -&amp;gt; Change GUID (The rest we will change later)&lt;/li>
&lt;li>Application Class:
&lt;ol>
&lt;li>Tells your addin how to begin and how to finish when Revit opens and closes.&lt;/li>
&lt;li>Class: External Application&lt;/li>
&lt;li>Method: OnStartup()
&lt;ol>
&lt;li>Will run &amp;ldquo;Create Ribbon()&amp;rdquo;&lt;/li>
&lt;li>Creates a &lt;strong>Panel&lt;/strong>&lt;/li>
&lt;li>Adds a &lt;strong>PushButton&lt;/strong> to that &lt;strong>Panel&lt;/strong>&lt;/li>
&lt;li>With 2 &lt;strong>Icons&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Our Application
&lt;ol>
&lt;li>OnStartup&lt;/li>
&lt;li>When it begins, it calls a Function &amp;ldquo;CreateRibbon()&amp;rdquo;&lt;/li>
&lt;li>And CreateRibbon is a defined function below that:
&lt;ol>
&lt;li>Creates a panel
&lt;ol>
&lt;li>This is possible due to pre-configured Revit API that we are using&lt;/li>
&lt;li>CreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Creates a button
&lt;ol>
&lt;li>Same for the Button&lt;/li>
&lt;li>AddPushButton Method in Revit API - Creates a button&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Commands Folder
&lt;ol>
&lt;li>Core Code&lt;/li>
&lt;li>Currently: Task Dialog - Shows the name of the addin
&lt;ol>
&lt;li>ExternalCommand, but we should use IExternalCommand&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>This is the part that writes the logic for your button&lt;/li>
&lt;li>Once you click the button, whatever is under Commands Folder connected to the button will be executed.&lt;/li>
&lt;li>If you change the TaskDialog.Show(Document.Title, &amp;ldquo;Hello World&amp;rdquo;);
&lt;ol>
&lt;li>Once you press the button in Revit it would show &amp;ldquo;Hello World&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Resources:
&lt;ol>
&lt;li>Icons&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Everything is saved in windows explorer&lt;/li>
&lt;li>Configurations:
&lt;ol>
&lt;li>Debug and Release&lt;/li>
&lt;li>Per Revit Version from R20 to R25&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>References:
&lt;ol>
&lt;li>Under: This PC &amp;gt; Windows (C:) &amp;gt; Program Files &amp;gt; Autodesk &amp;gt; Revit [2025].&lt;/li>
&lt;li>DLL Files that you can reference to your project to build something.&lt;/li>
&lt;li>You could even add an excel package to work with Excel, will do that later.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Build and test the first plugin
&lt;ol>
&lt;li>Build the solution by clicking on Run (Play Button) next to Any CPU.&lt;/li>
&lt;li>Lauches Revit (Version that you pre-configured)&lt;/li>
&lt;li>Always Load your Addin&lt;/li>
&lt;li>What happened behind the scenes:
&lt;ol>
&lt;li>VS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit.&lt;/li>
&lt;li>That became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier.&lt;/li>
&lt;li>Everything is already set and pathed for you for the ease of starting and launching plugins.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Go to New Project
&lt;ol>
&lt;li>Find your new panel in the panel tabs on the top of Revit User Interface.&lt;/li>
&lt;li>Find your Addin / Plugin&lt;/li>
&lt;li>Click on it&lt;/li>
&lt;li>And you will get a message with the name of your Tool.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Stop Debug
&lt;ol>
&lt;li>Closes Revit &amp;amp; Debug Mode&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>These tutorials were inspired by the work of &lt;a href="https://www.youtube.com/@AussieBIMGuru">Aussie BIM Guru&lt;/a>. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.&lt;/p></description></item><item><title/><link>https://blog.aydrafting.com/posts/untitled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.aydrafting.com/posts/untitled/</guid><description/></item></channel></rss>