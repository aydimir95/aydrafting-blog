[{"content":"The Goal We will create a PulldownButton and add a few PushButtons to it.\nWe will also create some helper methods to generate ButtonData objects given we are beginning to use these in lots of places.\nIn the next post we will stack PulldownButtons.\nAussie BIM Guru\nWhat we need Create a data creation methods, Add a PulldownButton to our panel, Add PushButtons to it, Add Icons Related API Classes RibbonPanel PulldownButtonData PulldownButton PushButtonData PushButton Homework Create a static utility methods on the Ribbon_Util.cs Modify a PushButton method to use static utility methods Create a PulldownButton method Create a PulldownButton method Extension class to add PushButton to PulldownButton Update the Strartup method Solution Code Project Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; General |-\u0026gt; Cmds_General.cs |-\u0026gt; Cmds_PullDown.cs // Create a New Class |-\u0026gt; Forms |-\u0026gt; General |-\u0026gt; Globals.cs |-\u0026gt; Extensions |-\u0026gt; UIControlledApplicaiton_Ext.cs |-\u0026gt; RibbonPanel_Ext.cs // Update |-\u0026gt; PulldownButton_Ext.cs // Create New Extension Class |-\u0026gt; Resources |-\u0026gt; Files |-\u0026gt; Tooltips.resx // Update |-\u0026gt; Icons |-\u0026gt; Icons16 |-\u0026gt; General_test16.png |-\u0026gt; Icons32 |-\u0026gt; General_test32.png |-\u0026gt; Utilities |-\u0026gt; Ribbon_Utils.cs // Update |-\u0026gt; Application.cs // Update |-\u0026gt; guRoo.addin Cmd_PullDown.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace guRoo.Cmds_PullDown { /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_1Button : IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { var uiApp = CommandData.Application; var uiDoc = uiApp.ActiveUIDocument; var doc = uiDoc.Document; // Code logic here: TaskDialog.Show(\u0026#34;Button 1 is Working!\u0026#34;, doc.Title); // Final return here: return Result.Succeeded; } } /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_2Button : IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { var uiApp = CommandData.Application; var uiDoc = uiApp.ActiveUIDocument; var doc = uiDoc.Document; // Code logic here: TaskDialog.Show(\u0026#34;Button 2 is Working!\u0026#34;, doc.Title); // Final return here: return Result.Succeeded; } } /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_3Button : IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { var uiApp = CommandData.Application; var uiDoc = uiApp.ActiveUIDocument; var doc = uiDoc.Document; // Code logic here: TaskDialog.Show(\u0026#34;Button 3 is Working!\u0026#34;, doc.Title); // Final return here: return Result.Succeeded; } } } RibbonPanel_Ext.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 using Autodesk.Revit.UI; using System.Diagnostics; using gRib = guRoo.Utilities.Ribbon_Utils; namespace guRoo.Extensions { public static class RibbonPanel_Ext { # region Add Button Creation /// \u0026lt;summary\u0026gt; /// Adds a Pushbutton to the panel. /// \u0026lt;/summary\u0026gt; /// \u0026lt;typeparam name=\u0026#34;CommandClass\u0026#34;\u0026gt;The related Command class.\u0026lt;/typeparam\u0026gt; /// \u0026lt;param name=\u0026#34;ribbonPanel\u0026#34;\u0026gt;The RibbonPanel (extended).\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;availability\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;suffix\u0026#34;\u0026gt;The icon suffix (none by default).\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;A Pushbutton object.\u0026lt;/returns\u0026gt; public static PushButton Ext_AddPushButton(this RibbonPanel panel, string buttonName, string className) { if (panel is null) { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } // Create a Data Object var pushButtonData = gRib.NewPushButtonData(buttonName, className); if (panel.AddItem(pushButtonData) is PushButton pushButton) { // If the button was made, return it. return pushButton; } else { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } } /// \u0026lt;summary\u0026gt; /// Adds a PulldownButton to the panel. /// \u0026lt;/summary\u0026gt; /// \u0026lt;typeparam name=\u0026#34;CommandClass\u0026#34;\u0026gt;The related Command class.\u0026lt;/typeparam\u0026gt; /// \u0026lt;param name=\u0026#34;ribbonPanel\u0026#34;\u0026gt;The RibbonPanel (extended).\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;availability\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;suffix\u0026#34;\u0026gt;The icon suffix (none by default).\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;A PulldownButton object.\u0026lt;/returns\u0026gt; public static PulldownButton Ext_AddPulldownButton(this RibbonPanel panel, string buttonName, string className) { if (panel is null) { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } // Create a Data Object var pulldownButtonData = gRib.NewPulldownButtonData(buttonName, className); if (panel.AddItem(pulldownButtonData) is PulldownButton pulldownButton) { // If the button was made, return it. return pulldownButton; } else { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } } #endregion } } PulldownButton_Ext.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 using Autodesk.Revit.UI; using System.Diagnostics; using gRib = guRoo.Utilities.Ribbon_Utils; namespace guRoo.Extensions { public static class PulldownButton_Ext { # region Add Button Creation /// \u0026lt;summary\u0026gt; /// Adds a PulldownButton to the panel. /// \u0026lt;/summary\u0026gt; /// \u0026lt;typeparam name=\u0026#34;CommandClass\u0026#34;\u0026gt;The related Command class.\u0026lt;/typeparam\u0026gt; /// \u0026lt;param name=\u0026#34;pulldownButton\u0026#34;\u0026gt;The RibbonPanel to add the button to (Extended).\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The full class name the button runs.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;A PulldownButton object.\u0026lt;/returns\u0026gt; public static PushButton Ext_AddPushButton(this PulldownButton pulldownButton, string buttonName, string className) { if (pulldownButton is null) { Debug.WriteLine($\u0026#34;Error: Could not add {buttonName} to pulldown.\u0026#34;); return null; } // Create a Data Object var pushButtonData = gRib.NewPushButtonData(buttonName, className); if (pulldownButton.AddPushButton(pushButtonData) is PushButton pushButton) { // If the button was made, return it. return pushButton; } else { Debug.WriteLine($\u0026#34;Error: Could not add {buttonName} to pulldown.\u0026#34;); return null; } } #endregion } } Tooltips.resx Name Value Comment General_Test This is a working tooltip.\nWe can do extra lines. General_Test2 This is a working tooltip.\nWe can do extra lines. PullDown This is a PulldownButton PullDown_1Button This is Button 1 of the Pulldown Button. PullDown_2Button This is Button 2 of the Pulldown Button. PullDown_3Button This is Button 3 of the Pulldown Button. Ribbon_Utils.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 using Autodesk.Revit.UI; using System; using System.Diagnostics; using System.Windows.Media; using System.Windows.Media.Imaging; namespace guRoo.Utilities { public static class Ribbon_Utils { #region PushButton Data /// \u0026lt;summary\u0026gt; /// Create a PushButtonData object. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;A PushButtonData object.\u0026lt;/returns\u0026gt; public static PushButtonData NewPushButtonData(string buttonName, string className) { var baseName = CommandToBaseName(className); var pushButtonData = new PushButtonData(baseName, buttonName, Globals.AssemblyPath, className); // Set the values pushButtonData.ToolTip = LookupTooltip(baseName); pushButtonData.Image = GetIcon(baseName, resolution: 16); pushButtonData.LargeImage = GetIcon(baseName, resolution: 32); return pushButtonData; } #endregion #region Pulldown Data /// \u0026lt;summary\u0026gt; /// Create a PulldownButtonData object. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;A PulldownButtonData object.\u0026lt;/returns\u0026gt; public static PulldownButtonData NewPulldownButtonData(string buttonName, string className) { var baseName = CommandToBaseName(className); var pulldownButtonData = new PulldownButtonData(baseName, buttonName); // Set the values pulldownButtonData.ToolTip = LookupTooltip(baseName); pulldownButtonData.Image = GetIcon(baseName, resolution: 16); pulldownButtonData.LargeImage = GetIcon(baseName, resolution: 32); return pulldownButtonData; } #endregion #region Method to get the base name of a command public static string CommandToBaseName(string commandName) { return commandName.Replace(\u0026#34;guRoo.Cmds_\u0026#34;, \u0026#34;\u0026#34;).Replace(\u0026#34;.Cmd\u0026#34;, \u0026#34;\u0026#34;); } // Method to get a value from a dictionary key public static string LookupTooltip(string key, string failValue = null) { failValue ??= \u0026#34;No tooltip value was found.\u0026#34;; // ??= -\u0026gt; if this is null set it to the following if (Globals.Tooltips.TryGetValue(key, out string value)) { return value; } return failValue; } #endregion #region Method to get an icon as an image source public static ImageSource GetIcon(string baseName, int resolution = 32) { var resourcePath = $\u0026#34;guRoo.Resources.Icons{resolution}.{baseName}{resolution}.png\u0026#34;; using (var stream = Globals.Assembly.GetManifestResourceStream(resourcePath)) { if (stream is null) { return null; } var decoder = new PngBitmapDecoder( stream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default); if (decoder.Frames.Count \u0026gt; 0) { return decoder.Frames.First(); } else { return null; } } } #endregion } } Application.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 // Autodesk using Autodesk.Revit.UI; using Autodesk.Revit.UI.Events; // guRoo using gRib = guRoo.Utilities.Ribbon_Utils; using guRoo.Extensions; // This application belongs to the root namespace namespace guRoo { // Implementing the interface for application.cs class public class Application : IExternalApplication // IExternalApplication for the interface { // Make a private uiCtlApp method: private static UIControlledApplication _uiCtlApp; //This will return a result on Startup method - requires uiCtlApp public Result OnStartup(UIControlledApplication uiCtlApp) { #region Globals registration // Store _uiCtlApp, register on idling _uiCtlApp = uiCtlApp; try { _uiCtlApp.Idling += RegisterUiApp; } catch { Globals.UiApp = null; Globals.UsernameRevit = null; } // Register Globals Globals.RegisterProperties(uiCtlApp); // Register Tooltips Globals.RegisterTooltips(\u0026#34;guRoo.Resources.Files.Tooltips\u0026#34;); #endregion #region Ribbon setup // Add RibbonTab uiCtlApp.Ext_AddRibbonTab(Globals.AddinName); // Create RibbonPanel var panelGeneral = uiCtlApp.Ext_AddRibbonPanel(Globals.AddinName, \u0026#34;General\u0026#34;); // Add PushButton to RibbonPanel var buttonTest = panelGeneral.Ext_AddPushButton(\u0026#34;Testing\u0026#34;, \u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;); // Add PulldownButton to RibbonPanel var pulldownTest = panelGeneral.Ext_AddPulldownButton(\u0026#34;PullDown\u0026#34;, \u0026#34;guRoo.Cmds_PullDown\u0026#34;); // Add Buttons to Pulldown pulldownTest.Ext_AddPushButton(\u0026#34;Button 1\u0026#34;, \u0026#34;guRoo.Cmds_PullDown.Cmd_1Button\u0026#34;); pulldownTest.Ext_AddPushButton(\u0026#34;Button 2\u0026#34;, \u0026#34;guRoo.Cmds_PullDown.Cmd_2Button\u0026#34;); pulldownTest.Ext_AddPushButton(\u0026#34;Button 3\u0026#34;, \u0026#34;guRoo.Cmds_PullDown.Cmd_3Button\u0026#34;); #endregion // Final return: return Result.Succeeded; // or Cancelled } #region On shutdown method // This will urn on shutdown public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } #endregion #region Use idling to register UiApp // On idling, register UiApp/username private static void RegisterUiApp(object sender, IdlingEventArgs e) { _uiCtlApp.Idling -= RegisterUiApp; if (sender is UIApplication uiApp) { Globals.UiApp = uiApp; Globals.UsernameRevit = uiApp.Application.Username; } } #endregion } } These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-10/","summary":"\u003ch1 id=\"the-goal\"\u003eThe Goal\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"Pasted image 20250814142840.png\" loading=\"lazy\" src=\"/images/Pasted%20image%2020250814142840.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWe will create a \u003ccode\u003ePulldownButton\u003c/code\u003e and add a few \u003ccode\u003ePushButtons\u003c/code\u003e to it.\u003c/p\u003e\n\u003cp\u003eWe will also create some helper methods to generate \u003ccode\u003eButtonData\u003c/code\u003e objects given we are beginning to use these in lots of places.\u003c/p\u003e\n\u003cp\u003eIn the next post we will stack \u003ccode\u003ePulldownButtons\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Pasted image 20250814122745.png\" loading=\"lazy\" src=\"/images/Pasted%20image%2020250814122745.png\"\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Zx5Aadrq7RY\"\u003eAussie BIM Guru\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"what-we-need\"\u003eWhat we need\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCreate a data creation methods,\u003c/li\u003e\n\u003cli\u003eAdd a \u003ccode\u003ePulldownButton\u003c/code\u003e to our panel,\u003c/li\u003e\n\u003cli\u003eAdd \u003ccode\u003ePushButtons\u003c/code\u003e to it,\u003c/li\u003e\n\u003cli\u003eAdd \u003ccode\u003eIcons\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"related-api-classes\"\u003eRelated API Classes\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eRibbonPanel\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ePulldownButtonData\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ePulldownButton\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePushButtonData\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ePushButton\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"homework\"\u003eHomework\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003estatic utility\u003c/code\u003e methods on the \u003ccode\u003eRibbon_Util.cs\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eModify a \u003ccode\u003ePushButton\u003c/code\u003e method to use \u003ccode\u003estatic utility\u003c/code\u003e methods\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003ePulldownButton\u003c/code\u003e method\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003ePulldownButton\u003c/code\u003e method \u003ccode\u003eExtension\u003c/code\u003e class to add \u003ccode\u003ePushButton\u003c/code\u003e to \u003ccode\u003ePulldownButton\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUpdate the \u003ccode\u003eStrartup\u003c/code\u003e method\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\u003ch2 id=\"code\"\u003eCode\u003c/h2\u003e\n\u003ch3 id=\"project-solution\"\u003e\u003ccode\u003eProject Solution\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSolution\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eDependencies\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eCommands\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eGeneral\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eCmds_General\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eCmds_PullDown\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Create a New Class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eForms\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eGeneral\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eExtensions\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eUIControlledApplicaiton_Ext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eRibbonPanel_Ext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Update\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldownButton_Ext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Create New Extension Class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eResources\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eFiles\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eTooltips\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresx\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// Update\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons16\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eGeneral_test16\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epng\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eIcons32\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eGeneral_test32\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epng\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eUtilities\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eRibbon_Utils\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e       \u003cspan class=\"c1\"\u003e// Update\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eApplication\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecs\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// Update\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e|-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaddin\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"cmd_pulldowncs\"\u003e\u003ccode\u003eCmd_PullDown.cs\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.Attributes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Collections.Generic\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Linq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Text\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Threading.Tasks\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eguRoo.Cmds_PullDown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e///\t\tExample Command\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"na\"\u003e    [Transaction(TransactionMode.Manual)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCmd_1Button\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIExternalCommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e \u003cspan class=\"n\"\u003eExecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eExternalCommandData\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandData\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eref\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eElementSet\u003c/span\u003e \u003cspan class=\"n\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eApplication\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003euiDoc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eActiveUIDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiDoc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Code logic here:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eTaskDialog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Button 1 is Working!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Final return here:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSucceeded\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e///\t\tExample Command\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"na\"\u003e    [Transaction(TransactionMode.Manual)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCmd_2Button\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIExternalCommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e \u003cspan class=\"n\"\u003eExecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eExternalCommandData\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandData\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eref\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eElementSet\u003c/span\u003e \u003cspan class=\"n\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eApplication\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003euiDoc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eActiveUIDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiDoc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Code logic here:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eTaskDialog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Button 2 is Working!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Final return here:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSucceeded\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e///\t\tExample Command\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"na\"\u003e    [Transaction(TransactionMode.Manual)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCmd_3Button\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIExternalCommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e \u003cspan class=\"n\"\u003eExecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eExternalCommandData\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandData\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eref\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eElementSet\u003c/span\u003e \u003cspan class=\"n\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eApplication\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003euiDoc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eActiveUIDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiDoc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDocument\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Code logic here:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eTaskDialog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Button 3 is Working!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Final return here:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSucceeded\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"ribbonpanel_extcs\"\u003e\u003ccode\u003eRibbonPanel_Ext.cs\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e79\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Diagnostics\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003egRib\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtilities\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRibbon_Utils\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eguRoo.Extensions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRibbonPanel_Ext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e# region\u003c/span\u003e \u003cspan class=\"n\"\u003eAdd\u003c/span\u003e \u003cspan class=\"n\"\u003eButton\u003c/span\u003e \u003cspan class=\"n\"\u003eCreation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// Adds a Pushbutton to the panel.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;typeparam name=\u0026#34;CommandClass\u0026#34;\u0026gt;The related Command class.\u0026lt;/typeparam\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;ribbonPanel\u0026#34;\u0026gt;The RibbonPanel (extended).\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;availability\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;suffix\u0026#34;\u0026gt;The icon suffix (none by default).\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;returns\u0026gt;A Pushbutton object.\u0026lt;/returns\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButton\u003c/span\u003e \u003cspan class=\"n\"\u003eExt_AddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"n\"\u003eRibbonPanel\u003c/span\u003e \u003cspan class=\"n\"\u003epanel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epanel\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e$\u0026#34;Error: Could not create {buttonName}.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Create a Data Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egRib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewPushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epanel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButton\u003c/span\u003e \u003cspan class=\"n\"\u003epushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"c1\"\u003e// If the button was made, return it.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e$\u0026#34;Error: Could not create {buttonName}.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// Adds a PulldownButton to the panel.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;typeparam name=\u0026#34;CommandClass\u0026#34;\u0026gt;The related Command class.\u0026lt;/typeparam\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;ribbonPanel\u0026#34;\u0026gt;The RibbonPanel (extended).\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;availability\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;suffix\u0026#34;\u0026gt;The icon suffix (none by default).\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;returns\u0026gt;A PulldownButton object.\u0026lt;/returns\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldownButton\u003c/span\u003e \u003cspan class=\"n\"\u003eExt_AddPulldownButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"n\"\u003eRibbonPanel\u003c/span\u003e \u003cspan class=\"n\"\u003epanel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epanel\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e$\u0026#34;Error: Could not create {buttonName}.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Create a Data Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egRib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewPulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epanel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddItem\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldownButton\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownButton\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"c1\"\u003e// If the button was made, return it.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownButton\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e$\u0026#34;Error: Could not create {buttonName}.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"pulldownbutton_extcs\"\u003e\u003ccode\u003ePulldownButton_Ext.cs\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Diagnostics\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003egRib\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtilities\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRibbon_Utils\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eguRoo.Extensions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePulldownButton_Ext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e# region\u003c/span\u003e \u003cspan class=\"n\"\u003eAdd\u003c/span\u003e \u003cspan class=\"n\"\u003eButton\u003c/span\u003e \u003cspan class=\"n\"\u003eCreation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// Adds a PulldownButton to the panel.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;typeparam name=\u0026#34;CommandClass\u0026#34;\u0026gt;The related Command class.\u0026lt;/typeparam\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;pulldownButton\u0026#34;\u0026gt;The RibbonPanel to add the button to (Extended).\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The full class name the button runs.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;returns\u0026gt;A PulldownButton object.\u0026lt;/returns\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButton\u003c/span\u003e \u003cspan class=\"n\"\u003eExt_AddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldownButton\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownButton\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epulldownButton\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e$\u0026#34;Error: Could not add {buttonName} to pulldown.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Create a Data Object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egRib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eNewPushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epulldownButton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButton\u003c/span\u003e \u003cspan class=\"n\"\u003epushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"c1\"\u003e// If the button was made, return it.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteLine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e$\u0026#34;Error: Could not add {buttonName} to pulldown.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"tooltipsresx\"\u003e\u003ccode\u003eTooltips.resx\u003c/code\u003e\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003eName\u003c/th\u003e\n          \u003cth\u003eValue\u003c/th\u003e\n          \u003cth\u003eComment\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eGeneral_Test\u003c/td\u003e\n          \u003ctd\u003eThis is a working tooltip.\u003cbr\u003e\u003cbr\u003eWe can do extra lines.\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eGeneral_Test2\u003c/td\u003e\n          \u003ctd\u003eThis is a working tooltip.\u003cbr\u003e\u003cbr\u003eWe can do extra lines.\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ePullDown\u003c/td\u003e\n          \u003ctd\u003eThis is a PulldownButton\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ePullDown_1Button\u003c/td\u003e\n          \u003ctd\u003eThis is Button 1 of the Pulldown Button.\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ePullDown_2Button\u003c/td\u003e\n          \u003ctd\u003eThis is Button 2 of the Pulldown Button.\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ePullDown_3Button\u003c/td\u003e\n          \u003ctd\u003eThis is Button 3 of the Pulldown Button.\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"ribbon_utilscs\"\u003e\u003ccode\u003eRibbon_Utils.cs\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e  1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e  9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 87\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 88\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 89\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 90\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 91\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 92\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 93\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 94\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 95\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 96\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 97\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 98\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 99\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e100\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e101\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e102\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e103\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e104\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e105\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e106\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e107\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Diagnostics\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Windows.Media\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Windows.Media.Imaging\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eguRoo.Utilities\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRibbon_Utils\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButton\u003c/span\u003e \u003cspan class=\"n\"\u003eData\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// Create a PushButtonData object.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;returns\u0026gt;A PushButtonData object.\u0026lt;/returns\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButtonData\u003c/span\u003e \u003cspan class=\"n\"\u003eNewPushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandToBaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAssemblyPath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Set the values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eToolTip\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLookupTooltip\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eImage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eresolution\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLargeImage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eresolution\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epushButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldown\u003c/span\u003e \u003cspan class=\"n\"\u003eData\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// Create a PulldownButtonData object.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;/summary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The name for the button.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The availability name.\u0026lt;/param\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cs\"\u003e/// \u0026lt;returns\u0026gt;A PulldownButtonData object.\u0026lt;/returns\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldownButtonData\u003c/span\u003e \u003cspan class=\"n\"\u003eNewPulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandToBaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclassName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Set the values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eToolTip\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLookupTooltip\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eImage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eresolution\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLargeImage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eresolution\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownButtonData\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003eMethod\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"k\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ethe\u003c/span\u003e \u003cspan class=\"k\"\u003ebase\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eCommandToBaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ecommandName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecommandName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;guRoo.Cmds_\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eReplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;.Cmd\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Method to get a value from a dictionary key\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eLookupTooltip\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003efailValue\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003efailValue\u003c/span\u003e \u003cspan class=\"p\"\u003e??=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;No tooltip value was found.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// ??= -\u0026gt; if this is null set it to the following\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTooltips\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTryGetValue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eout\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"k\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efailValue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003eMethod\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"k\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eicon\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ean\u003c/span\u003e \u003cspan class=\"n\"\u003eimage\u003c/span\u003e \u003cspan class=\"n\"\u003esource\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eImageSource\u003c/span\u003e \u003cspan class=\"n\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eresolution\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003eresourcePath\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e$\u0026#34;guRoo.Resources.Icons{resolution}.{baseName}{resolution}.png\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003estream\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAssembly\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetManifestResourceStream\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresourcePath\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003edecoder\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ePngBitmapDecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003eBitmapCreateOptions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePreservePixelFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003eBitmapCacheOption\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDefault\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFrames\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCount\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFrames\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFirst\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"applicationcs\"\u003e\u003ccode\u003eApplication.cs\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e87\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e88\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e89\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e90\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e91\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e92\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Autodesk\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI.Events\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// guRoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003egRib\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtilities\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRibbon_Utils\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eguRoo.Extensions\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// This application belongs to the root namespace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003eguRoo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Implementing the interface for application.cs class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eApplication\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eIExternalApplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// IExternalApplication for the interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// Make a private uiCtlApp method:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eUIControlledApplication\u003c/span\u003e \u003cspan class=\"n\"\u003e_uiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//This will return a result on Startup method - requires uiCtlApp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e \u003cspan class=\"n\"\u003eOnStartup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eUIControlledApplication\u003c/span\u003e \u003cspan class=\"n\"\u003euiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e \u003cspan class=\"n\"\u003eregistration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Store _uiCtlApp, register on idling\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003e_uiCtlApp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003etry\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003e_uiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdling\u003c/span\u003e \u003cspan class=\"p\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eRegisterUiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUiApp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUsernameRevit\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Register Globals\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterProperties\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Register Tooltips\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRegisterTooltips\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;guRoo.Resources.Files.Tooltips\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003eRibbon\u003c/span\u003e \u003cspan class=\"n\"\u003esetup\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Add RibbonTab\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003euiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddRibbonTab\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddinName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Create RibbonPanel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epanelGeneral\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddRibbonPanel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAddinName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;General\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Add PushButton to RibbonPanel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuttonTest\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epanelGeneral\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Testing\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Add PulldownButton to RibbonPanel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003epulldownTest\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epanelGeneral\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddPulldownButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;PullDown\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;guRoo.Cmds_PullDown\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Add Buttons to Pulldown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epulldownTest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Button 1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;guRoo.Cmds_PullDown.Cmd_1Button\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epulldownTest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Button 2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;guRoo.Cmds_PullDown.Cmd_2Button\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epulldownTest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExt_AddPushButton\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Button 3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;guRoo.Cmds_PullDown.Cmd_3Button\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// Final return:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSucceeded\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// or Cancelled\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003eOn\u003c/span\u003e \u003cspan class=\"n\"\u003eshutdown\u003c/span\u003e \u003cspan class=\"n\"\u003emethod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// This will urn on shutdown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e \u003cspan class=\"n\"\u003eOnShutdown\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eUIControlledApplication\u003c/span\u003e \u003cspan class=\"n\"\u003euiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eResult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSucceeded\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#region\u003c/span\u003e \u003cspan class=\"n\"\u003eUse\u003c/span\u003e \u003cspan class=\"n\"\u003eidling\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003eregister\u003c/span\u003e \u003cspan class=\"n\"\u003eUiApp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// On idling, register UiApp/username\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kd\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eRegisterUiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eobject\u003c/span\u003e \u003cspan class=\"n\"\u003esender\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIdlingEventArgs\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003e_uiCtlApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eIdling\u003c/span\u003e \u003cspan class=\"p\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003eRegisterUiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esender\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eUIApplication\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUiApp\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eGlobals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUsernameRevit\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euiApp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eApplication\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"cp\"\u003e#endregion\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cbr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThese tutorials were inspired by the work of \u003ca href=\"https://www.youtube.com/@AussieBIMGuru\"\u003eAussie BIM Guru\u003c/a\u003e. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\u003c/p\u003e","title":"C# + Revit API: Lesson 10 - Create a Pulldown Button"},{"content":" 1 2 3 4 modifiers returnType Method(this extendedType, args) { coding logic; } So far, we have been using static utility classes to store common methods to call upon. Alternatively, we can use Extension Methods to:\nMake the code readable. To let you Add methods to existing types. They provide syntactic sugar (a nicer way to write code), so calls look like instance methods: 1 2 string x = \u0026#34;hello\u0026#34;; string y = x.Reverse(); // Looks built-in, but it\u0026#39;s actually an extension if Reverse was written as a static utility method instead of an extension, it might look like this:\nUtility method version 1 2 3 4 5 6 7 8 9 public static class StringUtils { public static string Reverse(string s) { char[] arr = s.ToCharArray(); Array.Reverse(arr); return new string(arr); } } Usage (static way):\n1 2 string x = \u0026#34;hello\u0026#34;; string y = StringUtils.Reverse(x); // \u0026lt;-- utility call Extension Method version 1 2 3 4 5 6 7 8 9 public static class StringExtensions { public static string Reverse(this string s) // \u0026#34;this\u0026#34; turns it into an extension { char[] arr = s.ToCharArray(); Array.Reverse(arr); return new string(arr); } } Usage (extension way):\n1 2 3 4 using MyExtensions; // namespace with StringExtensions string x = \u0026#34;hello\u0026#34;; string y = x.Reverse(); // looks like built-in, but calls static method under the hood Key difference:\nStatic → StringUtils.Reverse(x) — always pass the value as an argument. Extension → x.Reverse() — looks like the method belongs to string, but it’s just compiler sugar for StringExtensions.Reverse(x). Microsoft’s Official Definition Extension members let you add methods to an existing type without subclassing, recompiling, or modifying its original code. These methods must be declared in a static class, using the this keyword on the first parameter to indicate the extended type. Example: LINQ methods like Where, Select, GroupBy are extension methods on IEnumerable\u0026lt;T\u0026gt;. The idea in one picture Utility method = a tool on the shelf you call by name. MathUtils.IsEven(4) Extension method = the same tool glued onto the type so it reads like a built-in ability. 4.IsEven() Same logic, different syntax. Utility (plain function in a static class)\n1 2 3 4 5 6 7 public static class MathUtils { public static bool IsEven(int n) =\u0026gt; n % 2 == 0; } // use bool a = MathUtils.IsEven(4); Extension (adds “instance-like” call to a type)\n1 2 3 4 5 6 7 8 9 10 namespace MyExtensions { public static class IntExtensions // class must be static { // method must be static; first param has `this` public static bool IsEven(this int n) =\u0026gt; n % 2 == 0; } } Usage\n1 2 3 using MyExtensions; // import the namespace that contains IntExtensions bool b = 4.IsEven(); // now it reads like a built-in method C# Extension Methods vs Static Utilities — Cheat Sheet A one‑pager you can print and keep by your keyboard.\nThe 5‑second summary Static utility: call a function on a helper class. StringUtils.Reverse(x) Extension method: same function, but called like an instance. x.Reverse() Truth: x.Reverse() is compiler sugar for StringExtensions.Reverse(x). Static Utility Pattern 1 2 3 4 5 6 7 8 9 10 11 12 public static class StringUtils { public static string Reverse(string s) { var a = s.ToCharArray(); Array.Reverse(a); return new string(a); } } // Usage var y = StringUtils.Reverse(\u0026#34;hello\u0026#34;); Extension Method Pattern Rules:\nMethod lives in a static class Method itself is static First parameter has this and is the type you’re extending The namespace must be in scope via using 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 namespace MyExtensions { public static class StringExtensions { public static string Reverse(this string s) { var a = s.ToCharArray(); Array.Reverse(a); return new string(a); } } } // Usage (note the \u0026#34;using\u0026#34;) using MyExtensions; var y = \u0026#34;hello\u0026#34;.Reverse(); What the Compiler Actually Does 1 2 3 Your code: Desugared by compiler: --------- ---------------------------------- \u0026#34;hello\u0026#34;.Reverse() ==\u0026gt; StringExtensions.Reverse(\u0026#34;hello\u0026#34;); Lookup steps\nCheck receiver type (string) for an instance Reverse() → none. Search imported namespaces for static methods whose first param is this string. Pick best match (normal overload rules). Instance methods (if any) always win over extensions. When to Use Which Use static utility when:\nIt’s general‑purpose or spans many types (logging, parsing, config). You don’t want to pollute IntelliSense for common types. Use extension method when:\nThe behavior clearly “belongs” to a single type. You want fluent, chainable syntax (e.g., LINQ‑style pipelines). Memorize these Extensions don’t modify the type; they’re just syntax sugar. If the type later adds a real instance method with the same signature, the real one wins. Resolution uses the variable’s compile‑time type, not runtime. You must using the extension’s namespace, or it won’t be found. Keep extensions focused; too many can clutter IntelliSense. Minimal Working Example (copy/paste) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // StringExtensions.cs namespace MyExtensions { public static class StringExtensions { public static bool IsNullOrBlank(this string? s) =\u0026gt; string.IsNullOrWhiteSpace(s); } } // Program.cs using System; using MyExtensions; class Program { static void Main() { string x = \u0026#34; \u0026#34;; Console.WriteLine(x.IsNullOrBlank()); // True } } Quick Troubleshooting CS1061: ‘Type’ does not contain a definition for ‘Foo’ → Missing using for the extension’s namespace or wrong this type. Ambiguous call → Multiple extensions in scope with same signature; qualify with full class name or remove one using. Not being called → A real instance method with same signature exists and shadows your extension. Mental Model (ASCII) 1 2 3 4 5 6 7 Caller Compiler Resolution ------ ------------------ x.Reverse() -\u0026gt; 1) Check instance on string → none 2) Scan imported namespaces for static methods with first param: this string 3) Choose best match 4) Rewrite to StringExtensions.Reverse(x) utilities = toolbox; extensions = bolt‑on skills. Same logic, nicer syntax.\nExtension Method Naming 1 2 3 4 5 6 7 8 // Extension namespace guRoo.Extensions // Class file name guRoo\\Extentions\\ExtendedClass_Ext // Extension method Ext_MethodName Homework Extend your methods: Set up a new folder and namespace Set up 2 extension classes in your project Set up extension methods Modify some of our code to use the above Solution Code: Project Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; General |-\u0026gt; Cmds_General.cs |-\u0026gt; Forms |-\u0026gt; General |-\u0026gt; Globals.cs |-\u0026gt; Extensions // Add a New Folder |-\u0026gt; UIControlledApplicaiton_Ext.cs // Create a New Class |-\u0026gt; RibbonPanel_Ext.cs // Create another New Class |-\u0026gt; Resources |-\u0026gt; Files |-\u0026gt; Tooltips.resx |-\u0026gt; Icons |-\u0026gt; Icons16 |-\u0026gt; General_test16.png |-\u0026gt; Icons32 |-\u0026gt; General_test32.png |-\u0026gt; Utilities |-\u0026gt; Ribbon_Utils.cs |-\u0026gt; Application.cs // Updated |-\u0026gt; guRoo.addin Borrow an existing static method from Ribbon_Utils.cs and extend it: UIControlledApplicaiton_Ext.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 using Autodesk.Revit.UI; using System.Diagnostics; namespace guRoo.Extensions { public static class UIControlledApplication_Ext { // ---------------------------------------------------------------------------- // 1. Add \u0026#34;this\u0026#34; // 2. AddRibbonTabToPanel -\u0026gt; AddRibbonTab // ---------------------------------------------------------------------------- public static Result AddRibbonTab(this UIControlledApplication uiCtlApp, string tabName) { try { // Try to add a tab: uiCtlApp.CreateRibbonTab(tabName); return Result.Succeeded; } catch { // Report the error if it fails: Debug.WriteLine($\u0026#34;Error: Could not create a tab: {tabName}\u0026#34;); return Result.Failed; } } // ---------------------------------------------------------------------------- // 1. Add \u0026#34;this\u0026#34; // 2. AddRibbonPanelByName -\u0026gt; AddRibbonPanel // ---------------------------------------------------------------------------- // Method to create a \u0026#34;Panel\u0026#34; public static RibbonPanel AddRibbonPanel(this UIControlledApplication uiCtlApp, string tabName, string panelName) { try { uiCtlApp.CreateRibbonPanel(tabName, panelName); } catch { Debug.WriteLine($\u0026#34;Error: Could not add {panelName} to {tabName}\u0026#34;); return null; } return uiCtlApp.GetRibbonPanel(tabName, panelName); } // Method to get that \u0026#34;Panel\u0026#34; public static RibbonPanel GetRibbonPanel(this UIControlledApplication uiCtlApp, string tabName, string panelName) { var panels = uiCtlApp.GetRibbonPanels(tabName); foreach (var panel in panels) { if (panel.Name == panelName) return panel; } // If Not found return null; } // ---------------------------------------------------------------------------- } } Update Applications.cs: Application.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 // Autodesk using Autodesk.Revit.UI; // guRoo =======IMPORTANT======= using gRib = guRoo.Utilities.Ribbon_Utils; using guRoo.Extensions; namespace guRoo { public class Application : IExternalApplication { private static UIControlledApplication _uiCtlApp; public Result OnStartup(UIControlledApplication uiCtlApp) { #region Globals registration _uiCtlApp = uiCtlApp; try { _uiCtlApp.Idling += RegisterUiApp; } catch { Globals.UiApp = null; Globals.UsernameRevit = null; } Globals.RegisterProperties(uiCtlApp); Globals.RegisterTooltips(\u0026#34;guRoo.Resources.Files.Tooltips\u0026#34;); #endregion #region Ribbon setup //Add Ribbon Tab uiCtlApp.AddRibbonTab(Globals.AddinName); // Create a Panel var panelGeneral = uiCtlApp.AddRibbonPanel(uiCtlApp, Globals.AddinName, \u0026#34;General\u0026#34;); // Add Button to Panel var buttonTest = panelGeneral.AddPushButton(\u0026#34;Testing\u0026#34;, \u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;); #endregion // Final Return return Result.Succeeded; } #region On shutdown method public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } #endregion #region Use idling to register UiApp private static void RegisterUiApp(object sender, IdlingEventArgs e) { _uiCtlApp.Idling -= RegisterUiApp; if (sender is UIApplication uiApp) { Globals.UiApp = uiApp; Globals.UsernameRevit = uiApp.Application.Username; } } #endregion } } And remove that part from Ribbon_Utils.cs: Ribbon_Utils.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 using Autodesk.Revit.UI; using System.Diagnostics; namespace guRoo.Utilities { public static class Ribbon_Utils { // =====REMOVED to UIControlledApplicaiton_Ext.cs===== // Method to create a \u0026#34;Tab\u0026#34; // public static Result AddRibbonTab(UIControlledApplication uiCtlApp,string tabName) // { // try // { // uiCtlApp.CreateRibbonTab(tabName); // return Result.Succeeded; // } // catch // { // Debug.WriteLine($\u0026#34;Error: Could not create a tab: {tabName}\u0026#34;); // return Result.Failed; // } // } //// Method to create a \u0026#34;Panel\u0026#34; //public static RibbonPanel AddRibbonPanelToTab(UIControlledApplication uiCtlApp, string tabName, string panelName) //{ // try // { // uiCtlApp.CreateRibbonPanel(tabName, panelName); // } // catch // { // Debug.WriteLine($\u0026#34;Error: Could not add {panelName} to {tabName}\u0026#34;); // return null; // } // return GetRibbonPanelByName(uiCtlApp, tabName, panelName); //} //// Method to get that \u0026#34;Panel\u0026#34; //public static RibbonPanel GetRibbonPanelByName(UIControlledApplication uiCtlApp, string tabName, string panelName) //{ // var panels = uiCtlApp.GetRibbonPanels(tabName); // foreach (var panel in panels) // { // if (panel.Name == panelName) // return panel; // } // // Not found // return null; //} // =====REMOVED to UIControlledApplicaiton_Ext.cs===== // =====REMOVED to RibbonPanel_Ext.cs===== // Method to create a \u0026#34;Button\u0026#34; to \u0026#34;Panel\u0026#34; /// \u0026lt;summary\u0026gt; /// Fill this summary for Methods to be described on Mouse Hover. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;panel\u0026#34;\u0026gt;This is the RibbonPanel to add to.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;internalName\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;assemblyPath\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; // public static PushButton AddPushButtonToPanel(RibbonPanel panel, string buttonName, string className) // // string internalName, -\u0026gt; NOT NEEDED ANYMORE // // string assemblyPath)-\u0026gt; NOT NEEDED ANYMORE // { // if (panel is null) // { // Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); //return null; // } // // Open PushButtonData Constructor and check what\u0026#39;s needed // // Get the base name from below // var baseName = CommandToBaseName(className); // #endregion // // Create a PushButtonData object: // var pushButtonData = new PushButtonData(baseName, buttonName, Globals.AssemblyPath, className); // // if the button was made - return it: // if (panel.AddItem(pushButtonData) is PushButton pushButton) // { // pushButton.ToolTip = LookupTooltip(baseName); // #region ====The Updated Part 4 Start==== // // We will come back to this: // pushButton.Image = GetIcon(baseName, resolution: 16); // pushButton.LargeImage = GetIcon(baseName, resolution: 32); return pushButton; // } // else // { // Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); //return null; // } // } // =====REMOVED to RibbonPanel_Ext.cs===== // Method to get the base name of a command: public static string CommandToBaseName(string commandName) { return commandName.Replace(\u0026#34;guRoo.Cmds_\u0026#34;, \u0026#34;\u0026#34;).Replace(\u0026#34;.Cmd\u0026#34;, \u0026#34;\u0026#34;); } // Method to get a value from a dictionary key public static string LookupTooltip(string key, string failValue = null) { failValue ??= \u0026#34;No tooltip value was found.\u0026#34;; // ??= -\u0026gt; if this is null set it to the following if (Globals.Tooltips.TryGetValue(key, out string value)) { return value; } return failValue; } // Method to get an icon as an image source public static ImageSource GetIcon(string baseName, int resolution = 32) { var resourcePath = $\u0026#34;guRoo.Resources.Icons{resolution}.{baseName}{resolution}.png\u0026#34;; using (var stream = Globals.Assembly.GetManifestResourceStream(resourcePath)) { if (stream is null) { return null; } var decoder = new PngBitmapDecoder( stream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default); if (decoder.Frames.Count \u0026gt; 0) { return decoder.Frames.First(); } else { return null; } } } } } RibbonPanel_Ext.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 using Autodesk.Revit.UI; using System.Diagnostics; using gRib = guRoo.Utilities.Ribbon_Utils; namespace guRoo.Extensions { public static class RibbonPanel_Ext { // Adds a new push button to a specified RibbonPanel in Revit. /// \u0026lt;summary\u0026gt; /// Creates and adds a \u0026lt;see cref=\u0026#34;PushButton\u0026#34;/\u0026gt; to the given \u0026lt;see cref=\u0026#34;RibbonPanel\u0026#34;/\u0026gt;. /// Configures the button’s tooltip and icon images based on the associated command name. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;panel\u0026#34;\u0026gt;The target RibbonPanel where the button will be added.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;The display name of the button as it appears in the UI.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;The full class name (namespace + class) of the command to execute when the button is clicked.\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt; /// The created \u0026lt;see cref=\u0026#34;PushButton\u0026#34;/\u0026gt; instance if successful; otherwise, \u0026lt;c\u0026gt;null\u0026lt;/c\u0026gt;. /// \u0026lt;/returns\u0026gt; public static PushButton AddPushButton(this RibbonPanel panel, string buttonName, string className) { if (panel is null) { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } // Open PushButtonData Constructor and check what\u0026#39;s needed var baseName = gRib.CommandToBaseName(className); var pushButtonData = new PushButtonData(baseName, buttonName, Globals.AssemblyPath, className); if (panel.AddItem(pushButtonData) is PushButton pushButton) { pushButton.ToolTip = gRib.LookupTooltip(baseName); pushButton.Image = gRib.GetIcon(baseName, resolution: 16); pushButton.LargeImage = gRib.GetIcon(baseName, resolution: 32); return pushButton; } else { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } } } } These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-9/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emodifiers\u003c/span\u003e \u003cspan class=\"n\"\u003ereturnType\u003c/span\u003e \u003cspan class=\"n\"\u003eMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"n\"\u003eextendedType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ecoding\u003c/span\u003e \u003cspan class=\"n\"\u003elogic\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSo far, we have been using \u003ccode\u003estatic utility classes\u003c/code\u003e to store common methods to call upon. Alternatively, we can use \u003ccode\u003eExtension Methods\u003c/code\u003e to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMake the code readable.\u003c/li\u003e\n\u003cli\u003eTo let you \u003ccode\u003eAdd\u003c/code\u003e methods to existing types.\n\u003cul\u003e\n\u003cli\u003eThey provide \u003cstrong\u003esyntactic sugar\u003c/strong\u003e (a nicer way to write code), so calls look like instance methods:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eReverse\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Looks built-in, but it\u0026#39;s actually an extension\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003chr\u003e\n\u003cp\u003eif \u003ccode\u003eReverse\u003c/code\u003e was written as a \u003cstrong\u003estatic utility method\u003c/strong\u003e instead of an \u003cstrong\u003eextension\u003c/strong\u003e, it might look like this:\u003c/p\u003e","title":"C# + Revit API: Lesson 9 - Static vs. Extension Methods"},{"content":"In the previous lesson, we built a PushButton using classes, constructors, properties, methods, interfaces, and a few global variables. In this lesson, we’ll put that button in its proper place on the ribbon and make sure everything—panel, icon, and tooltip—works end to end:\nThis is what we are trying to create:\nRibbon Panel PushButton Icon Tooltip We will cover how to manage resource/command naming, And, how to easily manage tooltips for our tools, As well as, the standard/large image icons, Finally, we will test the tool in action. Base Command Naming 1 2 3 4 5 // Command namespace guRoo.Cmds_GroupName //Command Class guRoo.Cmds_GroupName.Cmd_CommandName Preferred Method: 1 2 3 4 5 6 7 8 9 // Before: guRoo.Cmds_GroupName // After: GroupName //Before: guRoo.Cmds_GroupName.Cmd_CommandName //After GroupName._CommandName The Approach we will use: 1 2 3 4 5 guRoo.Cmds_GroupName.Cmd_CommandName // Remove guRoo.Cmds_ GroupName.Cmd_CommandName // Remove .Cmd GrouName_CommandName Or you can make things even more resilient by using: 1 typeof(CommandName).FullName Tooltipkey is base name: 1 2 GrouName GroupName_CommandName Icons: 1 2 3 4 GroupName## GroupName_CommandName## ## = Reolusion in pixels (16 or 32) How we will manage Tooltips We will create a Resources (resx) file in C# and embed this into our project. It will be available in memory for our project whilst it runs to access. We will store the tooltip and description as a dictionary of keys and values.\nWe will access this using the dedicated ResourceManager class.\nHow we will manage Icons Revit tools feature 2 icon types:\nImage -\u0026gt; 16x16px (96dpi) icon which shows at a smaller resolution (e.g. in pulldown, quick access). LargeImage -\u0026gt; 32x32px (96dpi) icon which shows at a larger resolution (e.g. in PushButtons). We will store our icons as embedded resources also in a PNG format. We will use a ResourceStream in order to decode these resources into a bitmap in our application.\nStreaming resources is quite common in C/C# and allows decoding of memory into suitable resources, such as an ImageSource.\nConsolidation Functionality The goal here ultimately is to make the process of adding/assigning icons to our tools as simple as possible for the user.\nThis will get around repetitive code, as well as providing a better entry environment for long text inputs such as tooltips.\nHomework Create a command \u0026gt; base name converter Set up a tooltips resource Read, store and assign a tooltip Set up icon files in 16/32 px format Assign the Icons to our Pushbuttons Test the changes Solution Revit API PushButtonData Class - ultimately we are just setting Properties of the ButtonData. Properties we are really interested in are: Image, LargeImage, ToolTip.\nName Description AssemblyName The assembly path of the button. AvailabilityClassName The full class name for the class providing the entry point to decide availablility of this push button. ClassName The name of the Class containing the implementation for the command. Image The image of the button. LargeImage The large image of the button. LongDescription Long description of the command tooltip. Name The name of the item. Text The user-visible text of the button. ToolTip The description that appears as a ToolTip for the item. ToolTipImage The image to show as a part of the button extended tooltip. Tips:\nImage - requires an ImageSource which is a Windows C# .NET - API. icons8.com - great resource to find icons for your buttons. photopea.com - to adjust the resolution of the icons downloaded from icons8 website. Code Project Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; General |-\u0026gt; Cmds_General.cs |-\u0026gt; Forms |-\u0026gt; General |-\u0026gt; Globals.cs // ---------\u0026gt; Update |-\u0026gt; Resources |-\u0026gt; Files //---------------\u0026gt; Add \u0026#34;Files\u0026#34; Folder |-\u0026gt; Tooltips.resx //---\u0026gt; Add \u0026#34;Resources File\u0026#34; item |-\u0026gt; Icons //---------------\u0026gt; Add \u0026#34;Icons\u0026#34; Folder |-\u0026gt; Icons16 //-------------\u0026gt; Add \u0026#34;Icons16\u0026#34; Folder |-\u0026gt; General_test16.png // Add an Icon 16px |-\u0026gt; Icons32 //-------------\u0026gt; Add \u0026#34;Icons32\u0026#34; Folder |-\u0026gt; General_test32.png // Add an Icon 32px |-\u0026gt; Utilities |-\u0026gt; Ribbon_Utils.cs //-----\u0026gt; Update |-\u0026gt; Application.cs //----------\u0026gt; Update |-\u0026gt; guRoo.addin Ribbon_Utils.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 using Autodesk.Revit.UI; using System.Diagnostics; namespace guRoo.Utilities { public static class Ribbon_Utils { // Method to create a \u0026#34;Tab\u0026#34; public static Result AddRibbonTab(UIControlledApplication uiCtlApp,string tabName) { try { uiCtlApp.CreateRibbonTab(tabName); return Result.Succeeded; } catch { Debug.WriteLine($\u0026#34;Error: Could not create a tab: {tabName}\u0026#34;); return Result.Failed; } } // Method to create a \u0026#34;Panel\u0026#34; public static RibbonPanel AddRibbonPanelToTab(UIControlledApplication uiCtlApp, string tabName, string panelName) { try { var panel = uiCtlApp.CreateRibbonPanel(tabName, panelName); return panel; } catch { Debug.WriteLine($\u0026#34;Error: Could not add {panelName} to {tabName}\u0026#34;); return null; } } // Method to get that \u0026#34;Panel\u0026#34; public static RibbonPanel GetRibbonPanelByName(UIControlledApplication uiCtlApp, string tabName, string panelName) { var panels = uiCtlApp.GetRibbonPanels(tabName); foreach (var panel in panels) { if (panel.Name == panelName) return panel; } // Not found return null; } // Method to create a \u0026#34;Button\u0026#34; to \u0026#34;Panel\u0026#34; /// \u0026lt;summary\u0026gt; /// Fill this summary for Methods to be described on Mouse Hover. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;panel\u0026#34;\u0026gt;This is the RibbonPanel to add to.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;internalName\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;assemblyPath\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; public static PushButton AddPushButtonToPanel(RibbonPanel panel, string buttonName, string className) // string internalName, -\u0026gt; NOT NEEDED ANYMORE // string assemblyPath)-\u0026gt; NOT NEEDED ANYMORE { if (panel is null) { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } // Open PushButtonData Constructor and check what\u0026#39;s needed // ====The Updated Part 2 Start==== // Get the base name from below var baseName = CommandToBaseName(className); // ====The Updated Part 2 End==== // Create a PushButtonData object: var pushButtonData = new PushButtonData(baseName, buttonName, Globals.AssemblyPath, className); // if the button was made - return it: if (panel.AddItem(pushButtonData) is PushButton pushButton) { pushButton.ToolTip = LookupTooltip(baseName); // We will come back to this: // ====The Updated Part 4 Start==== pushButton.Image = GetIcon(baseName, resolution: 16); pushButton.LargeImage = GetIcon(baseName, resolution: 32); // ====The Updated Part 4 End==== return pushButton; } else { Debug.WriteLine($\u0026#34;Error: Could not create {buttonName}.\u0026#34;); return null; } } // ====The Updated Part 1 Start==== // Method to get the base name of a command: public static string CommandToBaseName(string commandName) { return commandName.Replace(\u0026#34;guRoo.Cmds_\u0026#34;, \u0026#34;\u0026#34;).Replace(\u0026#34;.Cmd\u0026#34;, \u0026#34;\u0026#34;); } // Method to get a value from a dictionary key public static string LookupTooltip(string key, string failValue = null) { failValue ??= \u0026#34;No tooltip value was found.\u0026#34;; // ??= -\u0026gt; if this is null set it to the following if (Globals.Tooltips.TryGetValue(key, out string value)) { return value; } return failValue; } // ====The Updated Part 1 End==== // ====The Updated Part 3 Start==== // Method to get an icon as an image source public static ImageSource GetIcon(string baseName, int resolution = 32) { var resourcePath = $\u0026#34;guRoo.Resources.Icons{resolution}.{baseName}{resolution}.png\u0026#34;; using (var stream = Globals.Assembly.GetManifestResourceStream(resourcePath)) { if (stream is null) { return null; } var decoder = new PngBitmapDecoder( stream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default); if (decoder.Frames.Count \u0026gt; 0) { return decoder.Frames.First(); } else { return null; } } } // All you have to do now, is assign these icons back where we added a PushButton // ====The Updated Part 3 End==== } } Tooltips.resx Create Tooltips.resx under \u0026hellip;/Resources/Files/Tooltips.resx Once created, click Add Resource + button on the top left of the screen. Add the following 2 Resources: Name Value Comment General_Test This is a working tooltip.\nWe can do extra lines. General_Test2 This is a working tooltip.\nWe can do extra lines. Properties Then make sure the properties of the Tooltips.resx are set as follows: Advanced: Value Build Action Embedded resource Copy to Output Directory Do not copy Custom Tool ResXFileCodeGenerator Mics: Value File Name Tooltips.resx Full Path \u0026hellip;/Tooltips.resx Globals.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 using Autodesk.Revit.ApplicationServices; using Autodesk.Revit.UI; using System.Collections; using System.Globalization; using System.Resources; using Assembly = System.Reflection.Assembly; namespace guRoo { public static class Globals { #region Properties // Applications public static UIControlledApplication UiCtlApp { get; set; } public static ControlledApplication CtlApp { get; set; } public static UIApplication UiApp { get; set; } // Assembly public static Assembly Assembly { get; set; } // Ambiguity or missing ref public static string AssemblyPath { get; set; } // Revit Versions public static string RevitVersion { get; set; } public static int RevitVersionInt { get; set; } // User Names public static string UsernameRevit { get; set; } public static string UsernameWindows { get; set; } // GUIDs and Versioning public static string AddinVersionNumber { get; set; } public static string AddinVersionName { get; set; } public static string AddinName { get; set; } public static string AddinGuid { get; set; } #endregion // Dictionaries for resources as a Dict \u0026lt;key, value\u0026gt; Name public static Dictionary\u0026lt;string, string\u0026gt; Tooltips { get; set; } = new Dictionary\u0026lt;string, string\u0026gt;(); #region Register Method // Method to Register Variable Properties public static void RegisterProperties(UIControlledApplication uiCtlApp) { UiCtlApp = uiCtlApp; CtlApp = uiCtlApp.ControlledApplication; // UiApp set on idling Assembly = Assembly.GetExecutingAssembly(); AssemblyPath = Assembly.Location; RevitVersion = CtlApp.VersionNumber; RevitVersionInt = Int32.Parse(RevitVersion); // Revit Username set to idling UsernameWindows = Environment.UserName; AddinVersionNumber = \u0026#34;25.08.12\u0026#34;; AddinVersionName = \u0026#34;WIP\u0026#34;; AddinName = \u0026#34;guRoo\u0026#34;; AddinGuid = \u0026#34;5FD7523B-5832-4AB8-9B3D-0BE7ACFE1207\u0026#34;; } #endregion // Register our tooltup (Microsoft API Methods) public static void RegisterTooltips(string resourcePath) { var resourceManager = new ResourceManager(resourcePath,typeof(Application).Assembly); var resourceSet = resourceManager.GetResourceSet(CultureInfo.CurrentCulture, true, true); foreach (DictionaryEntry entry in resourceSet) { var key = entry.Key.ToString(); var value = entry.Value.ToString(); Tooltips[key] = value; // Don\u0026#39;t forget to register our Tooltip in the Application.cs } } } } Application.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 // Autodesk using Autodesk.Revit.UI; // guRoo using gRib = guRoo.Utilities.Ribbon_Utils; // This application belongs to the root namespace namespace guRoo { // Implementing the interface for application.cs class public class Application : IExternalApplication // IExternalApplication for the interface { // Make a private uiCtlApp method: private static UIControlledApplication _uiCtlApp; //This will return a result on Startup method - requires uiCtlApp public Result OnStartup(UIControlledApplication uiCtlApp) { #region Globals registration // Store _uiCtlApp, register on idling _uiCtlApp = uiCtlApp; try { _uiCtlApp.Idling += RegisterUiApp; } catch { Globals.UiApp = null; Globals.UsernameRevit = null; } // Register Globals Globals.RegisterProperties(uiCtlApp); // ===========Register Tooltips=========== Globals.RegisterTooltips(\u0026#34;guRoo.Resources.Files.Tooltips\u0026#34;); #endregion #region Removed because we added the Global Variables: // Collect the controlled application: // var ctlApp = uiCtlApp.ControlledApplication; // var assembly = Assembly.GetExecutingAssembly(); // avr assemblyPath = assembly.Location; // Variables // string tabName = \u0026#34;guRoo\u0026#34; #endregion #region Ribbon setup // Add RibbonTab uRib.AddRibbonTab(uiCtlApp, Globals.AddinName); // Create RibbonPanel var panelGeneral = uRib.AddRibbonPanelToTab(uiCtlApp, Globals.AddinName, \u0026#34;General\u0026#34;); // =====Updated Part===== // Add PushButton to RibbonPanel var buttonTest = uRib.AddPushButtonToPanel(panelGeneral, \u0026#34;Testing\u0026#34;, \u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;); // Adjust it in Ribbon_Utils.cs // =====Updated Part===== #endregion // Final return: return Result.Succeeded; // or Cancelled } #region On shutdown method // This will urn on shutdown public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } #endregion #region Use idling to register UiApp // On idling, register UiApp/username private static void RegisterUiApp(object sender, IdlingEventArgs e) { _uiCtlApp.Idling -= RegisterUiApp; if (sender is UIApplication uiApp) { Globals.UiApp = uiApp; Globals.UsernameRevit = uiApp.Application.Username; } } #endregion } } Add Icons to Resources folder Add 2 folders under Resources: Icons16 Icons32 Go to Icons8.com Search and download the icons you need @ resolution 80x80. Go to Photopea.com Create a New Project 96 Width, 96 Height, 96 DPI -\u0026gt; Create File -\u0026gt; Open -\u0026gt; Choose the downloaded icon Image -\u0026gt; Image Size -\u0026gt; Width=32, Height=32, DPI=96 -\u0026gt; OK File -\u0026gt; Export as -\u0026gt; PNG Image -\u0026gt; Image Size -\u0026gt; Width=16, Height=16, DPI=96 -\u0026gt; OK File -\u0026gt; Export as -\u0026gt; PNG Place those 2 exported images to the folders you created earlier: Icons16 Name: General_test16.png Icons32 Name: General_test32.png In the Properties of the images you have to make sure: Build Action -\u0026gt; Embedded Resource To make things even easier, we can make sure the Build Action gets set to Embedded Resource for all images added to the Icons folders, here how you would do that:\nGo to the Solution Explorer and double click on your project name guRoo in this case. Then you should find the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!-- Build configuration --\u0026gt; \u0026lt;!-- https://github.com/Nice3point/Revit.Build.Tasks --\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;IsRepackable\u0026gt;true\u0026lt;/IsRepackable\u0026gt; \u0026lt;DeployRevitAddin\u0026gt;true\u0026lt;/DeployRevitAddin\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Remove=\u0026#34;Resources\\Icons16\\General_test16.png\u0026#34; /\u0026gt; \u0026lt;None Remove=\u0026#34;Resources\\Icons32\\General_test32.png\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;EmbeddedResource Include=\u0026#34;Resources\\Icons16\\General_test16.png\u0026#34; /\u0026gt; \u0026lt;EmbeddedResource Include=\u0026#34;Resources\\Icons32\\General_test32.png\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; You should just replace the name of the images with a star *: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!-- Build configuration --\u0026gt; \u0026lt;!-- https://github.com/Nice3point/Revit.Build.Tasks --\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;IsRepackable\u0026gt;true\u0026lt;/IsRepackable\u0026gt; \u0026lt;DeployRevitAddin\u0026gt;true\u0026lt;/DeployRevitAddin\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Remove=\u0026#34;Resources\\Icons16\\*.png\u0026#34; /\u0026gt; \u0026lt;None Remove=\u0026#34;Resources\\Icons32\\*.png\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;EmbeddedResource Include=\u0026#34;Resources\\Icons16\\*.png\u0026#34; /\u0026gt; \u0026lt;EmbeddedResource Include=\u0026#34;Resources\\Icons32\\*.png\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; That\u0026rsquo;s it, now every image you are going to place under these folders would automatically be Embedded as Resources after you Build this project. Now we are going to add a Method to get an icon as an image source back in the Ribbon_Utils.cs. Summary All of this was done to make it super easy for you to create new buttons, from now on, you will be able to create a new button, simply by: Going to Application.cs Find this part: 1 2 3 4 5 6 // Add PushButton to RibbonPanel var buttonTest = uRib.AddPushButtonToPanel( panelGeneral, \u0026#34;Testing\u0026#34;, \u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;); And just Make sure to: Get the Command Class right = guRoo.Cmds_General.Cmd_Test Give it a Name = Testing And specify what Panel is it going on = panelGeneral Finally, add the Icons \u0026amp; Tooltips, that\u0026rsquo;s it, you have a New Button. These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-8/","summary":"\u003cp\u003eIn the previous lesson, we built a \u003ccode\u003ePushButton\u003c/code\u003e using classes, constructors, properties, methods, interfaces, and a few global variables. In this lesson, we’ll put that button in its proper place on the ribbon and make sure everything—panel, icon, and tooltip—works end to end:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis is what we are trying to create:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eRibbon\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePanel\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePushButton\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIcon\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTooltip\u003c/code\u003e\n\u003cimg alt=\"Pasted image 20250813140525.png\" loading=\"lazy\" src=\"/images/Pasted%20image%2020250813140525.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eWe will cover how to manage \u003ccode\u003eresource\u003c/code\u003e/\u003ccode\u003ecommand\u003c/code\u003e naming,\u003c/li\u003e\n\u003cli\u003eAnd, how to easily manage \u003ccode\u003etooltips\u003c/code\u003e for our tools,\u003c/li\u003e\n\u003cli\u003eAs well as, the \u003ccode\u003estandard\u003c/code\u003e/\u003ccode\u003elarge\u003c/code\u003e image \u003ccode\u003eicons\u003c/code\u003e,\u003c/li\u003e\n\u003cli\u003eFinally, we will test the \u003ccode\u003etool\u003c/code\u003e in action.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"base-command-naming\"\u003eBase Command Naming\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Command namespace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmds_GroupName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//Command Class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmds_GroupName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmd_CommandName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"preferred-method\"\u003ePreferred Method:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Before: \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmds_GroupName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// After:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGroupName\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//Before:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmds_GroupName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmd_CommandName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//After\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGroupName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_CommandName\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"the-approach-we-will-use\"\u003eThe Approach we will use:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eguRoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmds_GroupName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmd_CommandName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Remove guRoo.Cmds_\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGroupName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCmd_CommandName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Remove .Cmd\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGrouName_CommandName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"or-you-can-make-things-even-more-resilient-by-using\"\u003eOr you can make things even more resilient by using:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCommandName\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eFullName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"tooltipkey-is-base-name\"\u003eTooltipkey is base name:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGrouName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGroupName_CommandName\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"icons\"\u003eIcons:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGroupName\u003c/span\u003e\u003cspan class=\"err\"\u003e##\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eGroupName_CommandName\u003c/span\u003e\u003cspan class=\"err\"\u003e##\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e##\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eReolusion\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003epixels\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e16\u003c/span\u003e \u003cspan class=\"n\"\u003eor\u003c/span\u003e \u003cspan class=\"m\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"how-we-will-manage-tooltips\"\u003eHow we will manage \u003ccode\u003eTooltips\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003eWe will create a \u003ccode\u003eResources\u003c/code\u003e (resx) file in C# and embed this into our project. It will be available in memory for our project whilst it runs to access. We will store the tooltip and description as a \u003ccode\u003edictionary\u003c/code\u003e of \u003ccode\u003ekeys\u003c/code\u003e and \u003ccode\u003evalues\u003c/code\u003e.\u003c/p\u003e","title":"C# + Revit API: Lesson 8 - Tooltips \u0026 Icons"},{"content":"Game: Introduction to Classes Let\u0026rsquo;s play a little game that would help you quickly visualize a Class, Properties, Methods, and Interface. And select the interface that matches the class.\nThink of the interface as a Template the Class should follow or in other words the Category the Class belongs to.\nSimply, the Interface is a Category of the Class, the Class is a Template of an Object, and the Object, for example, is an actual Dog.\nWe will explore this pattern below, let\u0026rsquo;s just play the game first, what Category or Interface does the Class:Dog belongs?\n1. Introduction Project Folder Structure 1 2 3 4 5 6 7 8 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; Forms |-\u0026gt; Resources |-\u0026gt; Application.cs |-\u0026gt; guRoo.addin These are folders which contain various files that our toolbar will utilize.\nNote that these are not necessarily aligned with namespaces (which will be covered later) 2. What is a Class? In C#, classes are templates related to the creation and management of objects. There are many predefined classes available in C# and the Revit API. We use them for a wide range of things and will regularly be creating and developing our own classes. Accessing properties / methods of a Class Property: object.Property -\u0026gt; to access a property Method: Object.Method(argument1, argument2, etc) -\u0026gt; to access a method Namespaces When we create classes, we first tell them where they belong in our project. Namespaces can be nested within others using a dot separator, eventually tied back to our .addin namespace. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Revit API using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; // geeWiz - internal project objects using geeWiz.Extensions; using geeWiz = geeWiz.Forms; using geeWiz = geeWiz.Utilities.Workshare_Utils; // The class belongs to the Commands namespace namespace geeWiz.Cmds_Audit { // Cmd_DeletePatterns // Cmd_PurgeRooms // Cmd_PurgeTemplates // Cmd_PurgeFilters } Basic Class Anatomy modifers class ClassName : Interface(s) Constructor (optional) Properties (optional) Methods (optional) Access modifiers control how this code can be accessed inside and outside your project. You will typically need to declare at least on of public/private, And sometimes static for the purposes we will use them for early on. Static Modifier The static access modifier is a difficult concept to grasp at first, so we will simplify it somewhat. Classes with a static modifier do not support the creation of objects of that class (instantiated). We commonly take advantage of this to create classes which behave more like toolkits, where the class itself acts more like a singe object we can call upon to do things for us. So basically, the Static modifier is one instrument that you could use to build a complex script with.\nPublic and Private Modifier The public modifier lets you access something anywhere in your project. The private modifier limits access to the same class instead (generally for behind-the-scenes code in the class itself). There are other modifiers, but let\u0026rsquo;s keep it simple.\nClass Declaration modifiers class ClassName : Interface(s)\nAfter our modifiers we must define our class by using the keyword \u0026lsquo;class\u0026rsquo;, followed by a Class Name.\nGenerally, most people use PascalCase for class names, and you should choose names which are not reserved elsewhere.\nInterface(s) (Optional) modifiers class ClassName : Interface(s)\nInterface - acts as a template that a class should follow. It\u0026rsquo;s like a contract that is formed with your class -\u0026gt; the class must have certain methods / properties / behaviours that this interface would provide to it.\nFormally:\nInterfaces are optional agreements that the class must form with predefined class templates. They usually provide methods and properties which would otherwise be cumbersome to access/define, as well as ensuring the class follows some requirements. Referencing a Class Static example (access without creating an instance): 1 var myInstance = ClassName; A static class or member belongs to the class itself, not to any specific object. You use the class name to access it directly. You can call its methods or properties right away — no need to create an object. Because it’s static, you cannot use new to make an instance of it. Example:\n1 2 // Accessing a static property without creating Math object Console.WriteLine(Math.PI); Non-static example – Create and use an object 1 var myInstance = new ClassName(); A non-static class needs to be instantiated (created) before you can use it. You create a new object using the new keyword and parentheses () to run its constructor. The variable myInstance now refers to this new object, and you can use its methods and properties. The var keyword tells the compiler to figure out the variable’s type automatically. Example:\n1 2 var car = new Car(); car.Drive(); // Calling an instance method Homework Let\u0026rsquo;s do the following:\nSet up a class file (.cs) in our project, Create a namespace for it, Define our class (non-static, public). Its purpose is to store and process results from forms we create.\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 1. Create a new folder (if you haven\u0026#39;t already) and call it \u0026#39;Forms\u0026#39; // 2. Add a new item to \u0026#39;Forms\u0026#39; -\u0026gt; pick the \u0026#39;Class\u0026#39; type -\u0026gt; name it: \u0026#34;Custom.cs\u0026#34; using System; using System.Collection.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace guRoo.Forms // try to make your namespace follow your folder structure { public static class Custom // change to \u0026#39;public\u0026#39; + \u0026#39;static\u0026#39; class { } public class FormResult // add another \u0026#39;non-static\u0026#39; class { } } Here’s a cleaner, beginner-friendly rewrite with improved structure, simpler explanations, and a working example that will actually compile.\nI’ve also made the terminology more precise and added a clear generic vs. specific constructor example.\n3. Constructors Optional but very useful\nA constructor is a special method that runs automatically when you create a new object from a class:\nIt tells the class how it should start — for example, setting initial values. If you don’t add a constructor, C# uses a default constructor that simply sets properties to their default values, or formally: C# provides an implicit parameterless constructor that sets members to their type defaults. You can make your own constructor to set specific values when an object is created. A class can have multiple constructors (called constructor overloading), which is a form of polymorphism. Constructor Syntax 1 2 3 4 5 6 7 8 class ClassName { // Constructor with parameters public ClassName(type parameterName) { // Initialization logic } } Example: Generic vs. Specific Constructor Let’s create a FormResult class with two constructors:\nGeneric constructor – takes no arguments (creates a form with default values) Specific constructor – allows setting a custom status when creating the form 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 namespace guRoo.Forms // Use namespaces that match your folder structure { public class FormResult { public string Status { get; set; } // 1. Generic constructor (no parameters) public FormResult() { Status = \u0026#34;Pending\u0026#34;; // Default value } // 2. Specific constructor (with parameter) public FormResult(string status) { Status = status; } } } Using the Constructors 1 2 3 4 5 6 7 // Using the generic constructor var form1 = new FormResult(); Console.WriteLine(form1.Status); // Output: Pending // Using the specific constructor var form2 = new FormResult(\u0026#34;Cancelled\u0026#34;); Console.WriteLine(form2.Status); // Output: Cancelled Homework In this exercise, you’ll learn how to create two different constructors in a class — one that uses a default value and one that accepts a custom value when creating an object.\nWe’ll do this in a Revit API context by making a simple SheetResult class that stores the name of a sheet.\nYour task:\nCreate a new class called SheetResult in Custom.cs. Add: A generic constructor (no parameters) that sets the SheetName property to \u0026ldquo;Untitled Sheet\u0026rdquo;. A specific constructor (with a parameter) that accepts a string and sets SheetName to the provided value. Note: if you add the specific constructor, also add the parameterless one yourself. In Custom.cs, create a static method ShowSheetResultDemo() that: Creates one SheetResult using the generic constructor. Creates another SheetResult using the specific constructor with a custom name. Displays both names in a TaskDialog. In your StartupCommand.Execute() method, call Custom.ShowSheetResultDemo() to run the demo inside Revit. 💡 This will help you understand how constructors work in C#, and how you can use them to set up different ways of creating an object in your Revit add-ins.\nSolution Custom.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 using Autodesk.Revit.UI; namespace guRoo.Forms { public static class Custom // helper you can call from anywhere { public static void ShowSheetResultDemo() { var sheet1 = new SheetResult(); // generic var sheet2 = new SheetResult(\u0026#34;A101 - Floor Plan\u0026#34;); // specific TaskDialog.Show(\u0026#34;Sheet Results\u0026#34;, $\u0026#34;Generic constructor: {sheet1.SheetName}\\n\u0026#34; + $\u0026#34;Specific constructor: {sheet2.SheetName}\u0026#34;); } } public class SheetResult { public string SheetName { get; set; } // Parameterless (generic) constructor public SheetResult() =\u0026gt; SheetName = \u0026#34;Untitled Sheet\u0026#34;; // Constructor with parameters (specific) public SheetResult(string sheetName) =\u0026gt; SheetName = sheetName; } } StartupCommand.cs 1 2 3 4 5 6 7 8 using guRoo.Forms; // add this public override void Execute() { // ...your existing code... Custom.ShowSheetResultDemo(); // \u0026lt;-- shows the dialog from Custom.cs } 4. Properties Properties define the data that a class can store and expose.\nWhile you can make properties publicly accessible, best practice is to keep the underlying data private (inside the class) and control access through public get and set accessors.\nThis approach:\nKeeps the internal state of your object safe from unintended changes. Lets you add validation or extra logic when reading or writing values. In simple examples, we’ll mostly use auto-implemented properties (public string Name { get; set; }), but we’ll also show how to back them with private fields when you need more control.\nDeclaring a property A property is like a named piece of data that belongs to a class. The simplest form is an auto-implemented property, which C# creates for you without needing to write extra code:\n1 2 3 4 Class declaration { modifiers type PropertyName{get;set} } 1 2 3 4 public class Person { public string Name { get; set; } // auto property } Using a private field Sometimes you want more control over how a property’s value is stored or changed. In that case, you can store the value in a private field and use a property to get and set it.\n1 2 3 4 5 6 7 8 9 10 class ClassName { private type fieldName; // lowerCamelCase for fields public type PropertyName // PascalCase for properties { get { return fieldName; } set { fieldName = value; } } } Example: 1 2 3 4 5 6 7 8 9 10 public class Person { private string name; // field public string Name // property { get { return name; } set { name = value; } } } 💡 Tip: By convention, fields use camelCase and properties use PascalCase. This makes it easier to spot them in your code.\nHomework Properties let us store and access data in a class. In our earlier example, the SheetResult class only had a SheetName property.\nYour task:\nLet’s expand it to include more information — for example, the SheetNumber And show both a simple auto-property and a property backed by a private field. Solution Custom.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 using Autodesk.Revit.UI; namespace guRoo.Forms { // ===== STATIC CLASS ===== public static class Custom { // ===== METHOD ===== public static void ShowSheetResultDemo() { // Create objects var sheet1 = new SheetResult(); // generic constructor var sheet2 = new SheetResult(\u0026#34;A101 - Floor Plan\u0026#34;, \u0026#34;S-001\u0026#34;); // specific constructor // Show results in Revit dialog TaskDialog.Show(\u0026#34;Sheet Results\u0026#34;, $\u0026#34;Generic constructor: {sheet1.SheetName}, Number: {sheet1.SheetNumber}\\n\u0026#34; + $\u0026#34;Specific constructor: {sheet2.SheetName}, Number: {sheet2.SheetNumber}\u0026#34;); } // ===== END METHOD ===== } // ===== END STATIC CLASS ===== // ===== CLASS ===== public class SheetResult { // ===== PROPERTIES ===== // Auto-implemented property public string SheetName { get; set; } // Private field + property with get/set logic private string sheetNumber; public string SheetNumber { get { return sheetNumber; } set { // Example: basic validation if (string.IsNullOrWhiteSpace(value)) sheetNumber = \u0026#34;No Number\u0026#34;; else sheetNumber = value; } } // ===== END PROPERTIES ===== // ===== CONSTRUCTORS ===== // Generic constructor public SheetResult() { SheetName = \u0026#34;Untitled Sheet\u0026#34;; SheetNumber = \u0026#34;No Number\u0026#34;; } // Specific constructor public SheetResult(string sheetName, string sheetNumber = \u0026#34;No Number\u0026#34;) { SheetName = sheetName; SheetNumber = sheetNumber; } // ===== END CONSTRUCTORS ===== } // ===== END CLASS ===== } What Changed? Auto property: SheetName — quick and simple, no custom logic. Property with private field: SheetNumber — lets us add validation before saving the value. Constructors updated so both values can be set when creating a SheetResult. Result in Revit When you run StartupCommand, you’ll still get your original workflow, but now the Custom.ShowSheetResultDemo() dialog will display both the sheet name and the sheet number, with “No Number” automatically set if no value is given.\n5. Methods A method is an action your class can perform.\nThink of it this way:\nProperties = what the object is (its data). Methods = what the object does (its behavior). Key points:\nMethods can take arguments (optional). Methods have a return type. If they return nothing, use void. Declaring a method 1 2 3 4 5 6 7 8 class ClassName { modifiers returnType MethodName(optionalArguments) { // Code logic here return objectOfType; // omit if return type is void } } Example (continuing our SheetResult) We’ll extend SheetResult with a method that formats its data for display. This reinforces: field + property + constructor + method working together. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 using Autodesk.Revit.UI; namespace guRoo.Forms { // ------- CALLER (static helper you can invoke from your command) ------- public static class Custom { public static void ShowSheetResultDemo() { var s1 = new SheetResult(); // generic ctor var s2 = new SheetResult(\u0026#34;A101 - Floor Plan\u0026#34;, \u0026#34;S-001\u0026#34;); // specific ctor // Call a METHOD that uses the properties/field TaskDialog.Show(\u0026#34;Methods Demo\u0026#34;, $\u0026#34;s1 label: {s1.FormatLabel()}\\n\u0026#34; + $\u0026#34;s2 label: {s2.FormatLabel()}\u0026#34;); } } // ------- DATA MODEL (class with properties, field, constructors, methods) ------- public class SheetResult { // Properties public string SheetName { get; set; } // auto-property // Private field + property with simple validation private string _sheetNumber; // field (camelCase with leading underscore is common) public string SheetNumber { get =\u0026gt; _sheetNumber; set =\u0026gt; _sheetNumber = string.IsNullOrWhiteSpace(value) ? \u0026#34;No Number\u0026#34; : value; } // Constructors public SheetResult() { SheetName = \u0026#34;Untitled Sheet\u0026#34;; SheetNumber = \u0026#34;No Number\u0026#34;; } public SheetResult(string sheetName, string sheetNumber = \u0026#34;No Number\u0026#34;) { SheetName = sheetName; SheetNumber = sheetNumber; } // METHODS // Returns a formatted label combining the properties public string FormatLabel() { return $\u0026#34;{SheetNumber} - {SheetName}\u0026#34;; } // Example of a void method that changes state (optional) public void Rename(string newName) { SheetName = string.IsNullOrWhiteSpace(newName) ? SheetName : newName; } } } Homework Create a class Add some properties Give it a constructor Demonstrate how to use a field Demonstrate how to make a method Reference our class in another part of your code base Solution Custom.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 using System.Collections.Generic; using Autodesk.Revit.DB; using Autodesk.Revit.UI; namespace guRoo.Forms { public class FormResult { // ====== Field + wrapped property (best practice) ====== private bool _cancelled; public bool ExampleCancelled { get =\u0026gt; _cancelled; set =\u0026gt; _cancelled = value; } // ====== Properties ====== public object Payload { get; set; } public List\u0026lt;object\u0026gt; Items { get; set; } public bool Cancelled { get; set; } public bool Valid { get; set; } public bool Affirmative { get; set; } // ====== Constructors ====== public FormResult() { Payload = null; Items = new List\u0026lt;object\u0026gt;(); _cancelled = true; Cancelled = true; Valid = false; Affirmative = false; } public FormResult(bool isValid) { Payload = null; Items = new List\u0026lt;object\u0026gt;(); _cancelled = !isValid; Cancelled = !isValid; Valid = isValid; Affirmative = isValid; } // ====== Methods ====== // Change state to invalid public void SetToInvalid() { _cancelled = true; Cancelled = true; Valid = false; Affirmative = false; } // Summary for debugging or UI public string Summary() =\u0026gt; $\u0026#34;Valid: {Valid}, Cancelled: {Cancelled}, Affirmative: {Affirmative}, Items: {Items.Count}\u0026#34;; // Real-world method: tries to create a sheet based on form state public string TryCreateSheet(Document doc) { if (!Valid || Cancelled) return \u0026#34;Form is invalid or cancelled. No sheet created.\u0026#34;; // Grab first available title block ElementId titleBlockId = new FilteredElementCollector(doc) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); if (titleBlockId == ElementId.InvalidElementId) return \u0026#34;No title block types found. Cannot create sheet.\u0026#34;; using (Transaction tx = new Transaction(doc, \u0026#34;Create Sheet\u0026#34;)) { tx.Start(); ViewSheet.Create(doc, titleBlockId); tx.Commit(); } return \u0026#34;Sheet created successfully!\u0026#34;; } } } StartupCommand.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 using Autodesk.Revit.Attributes; using Autodesk.Revit.DB; using Autodesk.Revit.UI; using Nice3point.Revit.Toolkit.External; using gFrm = guRoo.Forms; namespace guRoo.Commands { [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { // Example 1: Default constructor (invalid form) // var formResult = new gFrm.FormResult(); // Example 2: Affirmative constructor (valid form) var formResult = new gFrm.FormResult(true); // Attach the Revit Document to our form object formResult.Payload = Document; // Optionally, flip it to invalid to test // formResult.SetToInvalid(); // Try to create the sheet string operationResult = formResult.TryCreateSheet(Document); // Show result to the user TaskDialog.Show(\u0026#34;Form + Sheet Creation\u0026#34;, formResult.Summary() + \u0026#34;\\n\\n\u0026#34; + operationResult); } } } Disposal Later on, we will look into other things we can make use of, such as specifying what happens to our class instances when they are disposed. Generally, an object will be disposed when it us not needed anymore. The compiler tracks and determines when this occurs for us, but we can also manually dispose of or with the disposal of objects. We now have a basic understanding of:\nClasses in C# Access modifiers Initialization Properties and methods Namespaces 6. Introduction to Interfaces An interface is like a contract for a class.\nIt doesn’t contain actual working code — instead, it defines what properties and methods a class must have.\nIf a class implements an interface, it promises to include all the members that interface defines.\nThis is useful for making sure different classes follow the same pattern, even if they work in different ways inside.\n💡 Think of it as a checklist: the interface says “you must have these items,” and your class fills in the details.\nASCII diagram showing the real world application of interfaces: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 +-------------------+ | IAnimal | \u0026lt;- Interface (the contract) |-------------------| | Name : string | | Age : int | | Fetch(): void | +-------------------+ ^ | +-----------+------------+ | | +------------+ +-------------+ | Dog | | Cat | \u0026lt;- Class (blueprint) |------------| |-------------| | Name | | Name | | Age | | Age | | Breed | | Color | | Bark() | | Meow() | | Fetch() | | Fetch() | | Sleep() | | Sleep() | +------------+ +-------------+ ^ ^ | | +----------------+ +------------------+ | myDog | | myCat | \u0026lt;- Object (instance in memory) |----------------| |------------------| | Name = \u0026#34;Buddy\u0026#34; | | Name = \u0026#34;Mittens\u0026#34; | | Age = 3 | | Age = 2 | | Breed = \u0026#34;GR\u0026#34; | | Color = \u0026#34;Gray\u0026#34; | | Bark() | | Meow() | | Fetch() | | Fetch() | | Sleep() | | Sleep() | +----------------+ +------------------+ ^ ^ +-----------+------------+ | +----------------------+ | AnimalPlayground | \u0026lt;- Code using IAnimal |----------------------| | Play(IAnimal animal) | +----------------------+ | +-------------------------------+ | Works with ANY object that | | implements IAnimanl (myDog, | | myCat, future animals, etc.) | +-------------------------------+ Flow explanation:\nIAnimal defines the rules. Dog / Cat promise to follow them. myDog / myCat are real objects in memory created from those classes. AnimalPlayground can work with any object that implements IAnimal — no matter what the actual class is. Interface Example If we have an interface IAnimal that says:\n“You must have a property Legs” “You must have a property Name” “You must have a method MakeNoise()” Then any class implementing IAnimal must include all of those members. 1 2 3 4 5 6 7 8 // Pseudo Code IAnimal int Legs; string Name; void MakeNoise(); Once a class implements an interface:\nYou write the actual code for the methods in that class. You can set the starting values for the interface’s properties. You can define the behavior of each method however you want. This is why interfaces are considered abstract — they don’t tell you how to do something, only that you must have it.\nThey’re a way to guide multiple classes to share the same “template” of members while letting each class have its own unique implementation.\nUsing an Interface Example.cs 1 2 3 4 5 6 7 8 9 10 11 // Class that implements the IAnimal interface public class Dog : IAnimal { public int Legs { get; set; } = 4; public string Name { get; set; } = \u0026#34;Dog\u0026#34;; public void MakeNoise() { Console.WriteLine(\u0026#34;Woof!\u0026#34;); } } Explanation:\nThe Dog class implements IAnimal. The Legs and Name properties are given real values. The MakeNoise() method is given actual behavior (printing \u0026ldquo;Woof!\u0026rdquo;). You can implement more than one interface in a single class. By convention, interface names start with I (e.g., IAnimal, IExternalCommand). Argument Provision Many interfaces in the Revit API come with extra built-in support.\nFor example:\nSome interfaces include methods that are automatically called when certain events happen (e.g., a command starts, the application opens, or a document changes). When you implement such an interface, you don’t have to set up the event wiring yourself — Revit will call the method for you. Your job is simply to write the code that runs when the event occurs. 💡 Think of it like Revit saying: “When this happens, I’ll call your method. Just tell me what you want to do inside it.”\nApplication Variants Type Description UIControlledApplication Provides access to the Revit application, typically used on startup and shutdown when no document is yet available. ControlledApplication Represents the application service, giving access to documents, options, and application-specific settings (e.g., language). UIApplication Similar to UIControlledApplication, but available during a running session. We’ll use this often, and in a future lesson we’ll register it as a globally accessible variable. UIDocument Represents the current document at the UI level, giving access to things like selections and opened views. Document Represents the current document at the core API level, providing access to Revit API classes, methods, and properties (e.g., collecting elements). How we can access them? These objects are related in a cascading hierarchy — you can get one from another:\n1 2 3 4 5 6 7 UIControlledApplication uiCtlApp; // Available at startup/shutdown ControlledApplication ctlApp = uiCtlApp.ControlledApplication; UIApplication uiApp; // Available in commands/events UIDocument uiDoc = uiApp.ActiveUIDocument; Document doc = uiDoc.Document; // The main Revit document API 💡 Tip: At startup/shutdown you’ll usually have UIControlledApplication.\n💡 Tip: During a command / event, you’ll start with UIApplication.\nHomework Implement IExternalApplication Implement IExternalCommand Collect the ControlledApplication in your application entry point Collect the Document inside your command Solution Step 1 — Learn the interface requirements Go to revitapidocs.com.\nYou’ll see that IExternalApplication defines two methods you must implement:\nOnStartup(UIControlledApplication application) — runs when Revit starts. OnShutdown(UIControlledApplication application) — runs when Revit shuts down. Both methods must return a Result enum:\nResult.Succeeded — startup/shutdown completed successfully. Result.Cancelled — you want to cancel the process. Result.Failed — something went wrong. Step 2 — Understand the parameters When OnStartup() or OnShutdown() runs, Revit passes you a UIControlledApplication object.\nFrom this you can get:\nControlledApplication → uiCtlApp.ControlledApplication Gives access to application-level settings, documents list, Revit version info, language, etc. Ribbon and UI setup methods (you can add panels and buttons here). Step 3 — Implementation in Application.cs Application.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Autodesk using Autodesk.Revit.UI; // This application belongs to the root namespace namespace guRoo { // Implementing the interface for application.cs class public class Application: IExternalApplication // IExternalApplication for the interface { //This will return a result on Startup method - requires uiCtlApp public Result OnStartup(UIControlledApplication uiCtlApp) { var ctlApp = uiCtlApp.ControlledApplication; return Result.Succeeded; // or Cancelled } // This will urn on shutdown public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } } } Project Solution 1 2 3 4 5 6 7 8 9 10 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; General // Create a Ribbon Panel Folder |-\u0026gt; Cmds_General.cs // Create a Ribbon Panel |-\u0026gt; Forms |-\u0026gt; Resources |-\u0026gt; Application.cs |-\u0026gt; guRoo.addin Cmds_General.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // Autodesk using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; namespace guRoo.Cmds_General { /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_Test: IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { UIApplication uiApp = commandData.Application; UIDocument uiDoc = uiApp.ActiveUIDocument; Document doc = uiDoc.Document; // Code logic here: // Final return here: return Result.Succeeded; } } /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_Test2: IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { UIApplication uiApp = commandData.Application; UIDocument uiDoc = uiApp.ActiveUIDocument; Document doc = uiDoc.Document; // Code logic here: // Final return here: return Result.Succeeded; } } } Typically, when working with interfaces you start with collecting information from your Revit document. We now have a basic understanding of:\nInterfaces IExternalApplication IExternalCommand Application Classes Document Classes 7. Create a PushButton Now we’ll set up a button in Revit’s ribbon to run our command.\nWe’ve done something similar before, but this time we’ll follow the standard Revit API approach instead of the Nice3point method.\nWe’ll create:\nRibbonTab RibbonPanel PushButton Command Understanding the Terms RibbonTab – A top-level tab in the Revit ribbon interface. Each RibbonTab groups related functionality and contains one or more RibbonPanels. For example, the “Annotate” tab contains tools related to dimensions, text, and tags.\nRibbonPanel – A container within a RibbonTab that holds one or more buttons. Panels help organize commands visually and logically within a tab. For instance, the “Text” panel inside the “Annotate” tab might contain buttons for adding text, leaders, and notes.\nPushButton – A clickable button (or a pull-down button with multiple options) that executes a specific Command. There are several related button types in the Revit API:\nPulldownButton – Displays a drop-down list of other buttons or commands when clicked.\nPushButton – The most common button type. To create one in an add-in, you first create a PushButtonData object to define its properties (name, tooltip, images, and linked command), then add it to a RibbonPanel with RibbonPanel.AddItem(), which returns a PushButton object.\nRadioButton – Allows users to select one option from a set. When placed in a group, selecting one radio button automatically deselects the others.\nSplitButton – Combines a PushButton with a PulldownButton. The top half performs a default action, while the bottom half opens a list of related actions.\nToggleButton – Acts like an on/off switch. It maintains its state after being clicked, making it useful for settings that need to stay enabled or disabled until changed again.\nCommand – The underlying logic that executes when a button is pressed. In Revit API development, a Command is typically implemented as a class that implements IExternalCommand, containing the Execute() method where your code runs.\nProperties of a PushButton Property Description AssemblyName Assembly path of the button. AvailabilityClassName The full class name of the class providing the entry point to decide availability of this push button. ClassName The name of the class containing the implementation for the command. Enabled Gets or sets a value indicating whether the item is enabled. Image The image of the button. IsEnabledByContext Indicates if this button can be executed. True if permitted based on the current Revit context (active doc, active view, active tool). False if disabled because of the active context. ItemText Gets or sets the text displayed on the item. ItemType Gets the item type. LargeImage The large image shown on the button. LongDescription Long description of the command tooltip. Name The name of the item. ToolTip The description that appears as a tooltip for the item. ToolTipImage The image to show as part of the button’s extended tooltip. Visible Gets or sets a value indicating whether the item is visible. Step-by-step: Create a Tab Add a RibbonPanel to the Tab Add a PushButton to the RibbonPanel Related API Classes: UIControlledApplication \u0026gt; GetRibbonPannels Method \u0026gt; Tab Tab \u0026gt; RibbonPannel \u0026gt; AddItem Method RibbonPanel \u0026gt; PushButtonData Constructor \u0026gt; PushButton Object \u0026gt; Icon / Tooltip One Important Method -\u0026gt; GetRibbonPanels : GetRibbonPannels - Get all the custom Panels on Add-Ins Tab of Revit. GetRibbonPannels(String) - Get all the custom Panels on a designated Revit Tab. GetRibbonPannel(Tab) - Get all the custom Panels on a designated standard Revit Tab. Executing Assembly When our add-in is running, all the classes, resources and code we have produced are executed as an Assembly. We will access this to connect commands to buttons. 1 2 using System.Reflection Assembly.GetExecutingAssembly() Homework Create a static utility class Add methods to static utility class that we need Run these methods in OnStartup method Solution Project Solution 1 2 3 4 5 6 7 8 9 10 11 12 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; General // Create a Ribbon Panel Folder |-\u0026gt; Cmds_General.cs // Create a Ribbon Panel |-\u0026gt; Forms |-\u0026gt; Resources |-\u0026gt; Utilities // Add a New Utilities Folder |-\u0026gt; Ribbon_Utils.cs // Add a New Ribbon Utilities Class |-\u0026gt; Application.cs // Update Application Class |-\u0026gt; guRoo.addin Ribbon_Utils.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Task; namespace guRoo.Utilities { public static class Ribbon_Utils { // Method to create a \u0026#34;Tab\u0026#34; public static Result AddRibbonTab(UIControlledApplication uiCtlApp, string tabName) { try { uiCtlApp.CreateRibbonTab(tabName) return Result.Succeeded; } catch { Debug.WriteLine($\u0026#34;Error: Coulnd not create a tab: {tabName}\u0026#34;); return Result.Failed; } } // Method to create a \u0026#34;Panel\u0026#34; public static RibbonPanel AddRibbonPanelToTab(UIControlledApplication uiCtlApp, string tabName, string panelName) { try { uiCtlApp.CreateRibbonPanel(tabName, panelName) } catch { Debug.WriteLine($\u0026#34;Error: Could not add {panelName} to {tabName}\u0026#34;) return null; } GetRibbonPanelByName(uiCtlApp, tabName, panelName) } // Method to get that \u0026#34;Panel\u0026#34; public static RibbonPannel GetRibbonPanelByName(UIControlledApplication uiCtlApp, string panelName) { var panels = uiCtlApp.GetRibbonPanels(tabName); foreach (var panel in panels) { if (panel.Name == panelName) { return panel; } return null; } } // Method to create a \u0026#34;Button\u0026#34; to \u0026#34;Panel\u0026#34; /// \u0026lt;summary\u0026gt; /// Fill this summary for Methods to be described on Mouse Hover. /// \u0026lt;/summary\u0026gt; /// \u0026lt;param name=\u0026#34;panel\u0026#34;\u0026gt;This is the ribbonpannel to add to.\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;buttonName\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;className\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;internalName\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;param name=\u0026#34;assemblyPath\u0026#34;\u0026gt;Test\u0026lt;/param\u0026gt; /// \u0026lt;returns\u0026gt;\u0026lt;/returns\u0026gt; public static PushButton AddPushButtonToPanel( RibbonPanel panel, string buttonName, string className, string internalName, string assemblyPath) { if (panel is null) { Debug.WriteLine($Error: Could not create {buttonName}.) return null; } // Open PushButtonData Constructor and check what\u0026#39;s needed var pushButtonData = new PushButtonData( internalName, buttonName, assemblyPath, className); if (panel.AddItem(pushButtonData) is PushButton pushButton) { pushButton.ToolTip = \u0026#34;Testing tooltip\u0026#34;; // pushButton.Image = null; // pushButton.LargeImage = null; return pushButton; } else { Debug.WriteLine(\u0026#34;$Error: Could not create {buttonName}.\u0026#34;) return null; } } } } Application.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // System using System.Reflection; // Autodesk using Autodesk.Revit.UI; // guRoo using gRib = guRoo.Utilities.Ribbon_Utils; // This application belongs to the root namespace namespace guRoo { // Implementing the interface for application.cs class public class Application: IExternalApplication // IExternalApplication for the interface { //This will return a result on Startup method - requires uiCtlApp public Result OnStartup(UIControlledApplication uiCtlApp) { // Collect the controlled application: var ctlApp = uiCtlApp.ControlledApplication; var assembly = Assembly.GetExecutingAssembly(); avr assemblyPath = assembly.Location; // Variables string tabName = \u0026#34;guRoo\u0026#34; // Add RibbonTab gRib.AddRibbonTab(uiCtlApp, tabName); // Create RibbonPanel var panelGeneral = gRib.AddRibbonPanelToTab( uiCtlApp, tabName, \u0026#34;General\u0026#34;); // Add PushButton to RibbonPanel var buttonTest = gRib.AddPushButtonToPanel( panelGeneral, \u0026#34;Testing\u0026#34;, \u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;, assemblyPath) // Final return: return Result.Succeeded; // or Cancelled } // This will urn on shutdown public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } } } Cmds_General.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // Autodesk using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; namespace guRoo.Cmds_General { /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_Test: IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { UIApplication uiApp = commandData.Application; UIDocument uiDoc = uiApp.ActiveUIDocument; Document doc = uiDoc.Document; // Code logic here: // Final return here: return Result.Succeeded; } } /// \u0026lt;summary\u0026gt; ///\tExample Command /// \u0026lt;/summary\u0026gt; [Transaction(TransactionMode.Manual)] public class Cmd_Test2: IExternalCommand { public Result Execute(ExternalCommandData CommandData, ref string message, ElementSet elements) { UIApplication uiApp = commandData.Application; UIDocument uiDoc = uiApp.ActiveUIDocument; Document doc = uiDoc.Document; // Code logic here: TaskDialog.Show(\u0026#34;It\u0026#39;s Working!\u0026#34;, doc.Title); // Final return here: return Result.Succeeded; } } } 8. Global Variables Some programming languages support \u0026lsquo;global\u0026rsquo; variables, which can be accessed anywhere at any time once set in the project.\nTo my knowledge, C# does not have a dedicated system for this. We can still achieve this by utilizing a static class that is dedicated to storing and providing these.\nLet\u0026rsquo;s set up a Globals Class, which will give us access to objects that would otherwise be inaccessible from various areas of our project. We will also look at how we can use an event to capture the UIApplication. Why can\u0026rsquo;t we get the UiApp? We will collect most variables on startup, but the UiApplication is not available during this time in Revit. In order to collect it we will take advantage of the Idling Event.\nEvents 101 Events provide us the ability to have code that executes when various events occur in an application. For example, run a code whenever the view is changed. When Revit is available, it is said to be Idling (not doing anything). The Idling event is commonly used to run some code as soon as Revit is available for code to be run. Basic Sub/Unsub syntax Subscribe to Idling event UICtlApp.Idling += MethodName\nUnsubscribe from idling event UICtlApp.Idling -= MethodName\nIn most cases, you will want your method to unsubscribe itself once it has run.\nHomework Create a static Globals Class Add properties and registration method Register the UiApp and Revit User Name using IdlingEvent Solution Project Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Solution |-\u0026gt; guRoo |-\u0026gt; Dependencies |-\u0026gt; Commands |-\u0026gt; General |-\u0026gt; Cmds_General.cs |-\u0026gt; Forms |-\u0026gt; General // Add a New General Folder |-\u0026gt; Globals.cs // Add a New Globals Class |-\u0026gt; Resources |-\u0026gt; Utilities |-\u0026gt; Ribbon_Utils.cs |-\u0026gt; Application.cs // Updated |-\u0026gt; guRoo.addin Globals.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 using System; using System.Collection.Generic; using System.Linq; using System.Text; using System.Threading.Task; using Assembly = System.Reflection.Assembly; namespace guRoo { public static class Globals { #region Properties // Applications public static UIControlledApplication UiCtlApp {get;set;} public static ControlledApplication CtlApp {get;set;} public static UIApplication UiApp {get;set;} // Assembly public static Assembly Assembly {get;set;} // Ambiguity or missing ref piblic static string AssemblyPath{get;set;} // Revit Versions public static string RevitVersion {get;set;} public static int RevitVersionInt {get;set;} // User Names public static string UsernameRevit {get;set;} public static string UsernameWindows {get;set;} // GUIDs and Versioning public static string AdddinVersionNumber {get;set;} public static string AddinVersionName {get;set;} public static string AddinName {get;set;} public static string AddinGuid {get;set;} #endregion #region Register Method // Method to Register Variable Properties public static void RegisterProperties(UIControlledApplication uiCtlApp) { UiCtlApp = uiCtlApp; CtlApp = uiCtlApp.ContrlledApplication; // UiApp set on idling Assembly = Assembly.GetExecutingAssembly(); AssemblyPath = Assembly.Location; RevitVersion = CtlApp.VersionNumber; RevitVersionInt = Int32.Parse(RevitVersion); // Revit Username set to idling UsernameWindows = Environment.UserName; AddinVersionNumber = \u0026#34;25.08.12\u0026#34;; AddinVersionName = \u0026#34;WIP\u0026#34;; AddinName = \u0026#34;guRoo\u0026#34;; AddinGuid = \u0026#34;5FD7523B-5832-4AB8-9B3D-0BE7ACFE1207\u0026#34;; } #endregion } } Application.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 // Autodesk using Autodesk.Revit.UI; // guRoo using gRib = guRoo.Utilities.Ribbon_Utils; // This application belongs to the root namespace namespace guRoo { // Implementing the interface for application.cs class public class Application: IExternalApplication // IExternalApplication for the interface { // Make a private uiCtlApp method: private static UIControlledApplication _uiCtlApp; //This will return a result on Startup method - requires uiCtlApp public Result OnStartup(UIControlledApplication uiCtlApp) { #region Globals registration // Store _uiCtlApp, register on idling _uiCtlApp = uiCtlApp; try { _uiCtlApp.Idling += RegisterUiApp; } catch { Globals.UiApp = null; Glovals.UsernameRevit = null; } // Register Globals Globals.RegisterProperties(uiCtlApp); #endregion #region Removed because we added the Global Variables: // Collect the controlled application: // var ctlApp = uiCtlApp.ControlledApplication; // var assembly = Assembly.GetExecutingAssembly(); // avr assemblyPath = assembly.Location; // Variables // string tabName = \u0026#34;guRoo\u0026#34; #endregion #region Ribbon setup // Add RibbonTab gRib.AddRibbonTab(uiCtlApp, Globals.AddinName); // instead of TabName // Create RibbonPanel var panelGeneral = gRib.AddRibbonPanelToTab( uiCtlApp, Globals.AddinName, // instead of TabName \u0026#34;General\u0026#34;); // Add PushButton to RibbonPanel var buttonTest = gRib.AddPushButtonToPanel( panelGeneral, \u0026#34;Testing\u0026#34;, \u0026#34;guRoo.Cmds_General.Cmd_Test\u0026#34;, Globals.AssemblyPath) // instead of assemblyPath #endregion // Final return: return Result.Succeeded; // or Cancelled } #region On shutdown method // This will urn on shutdown public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } #endregion #region Use idling to register UiApp // On idling, register UiApp/username private static void RegisterUiApp(object sender, IdlingEvenArgs e) { _uiCtlApp.Idling -= RegisterUiApp; if (sender is UIApplication uiApp) { Globals.UiApp = uiApp; Globals.UsernameRevit = uiApp.Application.Username; } } #endregion } } Ambiguity - is when Windows API and Revit API has the same class name like Assembly using Assembly = System.Reflection.Assembly; - this is how to remove Ambiguity. #region \u0026amp; #endregion let\u0026rsquo;s you organize the code - collapses long paragraphs of code to be able to skim the logic. These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-7/","summary":"\u003ch1 id=\"game-introduction-to-classes\"\u003eGame: Introduction to Classes\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s play a little game that would help you quickly visualize a \u003ccode\u003eClass\u003c/code\u003e, \u003ccode\u003eProperties\u003c/code\u003e, \u003ccode\u003eMethods\u003c/code\u003e, and \u003ccode\u003eInterface\u003c/code\u003e. And select the \u003ccode\u003einterface\u003c/code\u003e that matches the \u003ccode\u003eclass\u003c/code\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThink of the \u003ccode\u003einterface\u003c/code\u003e as a Template the Class should follow or in other words the Category the Class belongs to.\u003c/p\u003e\n\u003cp\u003eSimply, the \u003ccode\u003eInterface\u003c/code\u003e is a Category of the Class, the \u003ccode\u003eClass\u003c/code\u003e is a Template of an Object, and the \u003ccode\u003eObject\u003c/code\u003e, for example, is an actual Dog.\u003c/p\u003e","title":"C# + Revit API: Lesson 7 - Creating a PushButton"},{"content":"Pseudocode 1 2 3 4 5 6 7 8 try { try to do this; } catch { if try gets exception, rollback and do this; } Exceptions Exceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 catch // Exception as \u0026#34;e\u0026#34; to print the error { To catch a specific exceptions, catch as e; } catch { To catch all exceptions, do this; // but better to catch specific exceptions, // otherwise you will catch all necessary and unecessary exceptions. } finally { To run a final code regardless of outcome; } Use Don\u0026rsquo;t Abuse When you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!\nTry statements should be used only when you know there is a chance an exception could occur, and it cannot be otherwise dealt with.\nYou should make them as robust as possible, and use them only for parts of your code that need them.\nDON\u0026rsquo;T DO THIS! 1 2 3 4 5 6 7 8 try { all code; } catch { oh no, somethis went wrong; } Example – Creating a Revit Sheet with Error Handling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 using Autodesk.Revit.DB; using Autodesk.Revit.UI; using System; public class CreateSheetExample { public void CreateSheet(Document doc, ElementId titleBlockId) { try { using (Transaction tx = new Transaction(doc, \u0026#34;Create New Sheet\u0026#34;)) { tx.Start(); try { // Attempt to create a sheet ViewSheet sheet = ViewSheet.Create(doc, titleBlockId); TaskDialog.Show(\u0026#34;Success\u0026#34;, $\u0026#34;Sheet \u0026#39;{sheet.Name}\u0026#39; created!\u0026#34;); tx.Commit(); } catch (Autodesk.Revit.Exceptions. ArgumentException argEx) { // Rollback and handle known Revit-specific error tx.RollBack(); TaskDialog.Show(\u0026#34;Error\u0026#34;, $\u0026#34;Invalid title block: {argEx.Message}\u0026#34;); } catch (Exception ex) { // Rollback for unexpected system-level errors tx.RollBack(); TaskDialog.Show(\u0026#34;Unexpected Error\u0026#34;, ex.Message); } } } finally { // Always run this, no matter success or failure TaskDialog.Show(\u0026#34;Info\u0026#34;, \u0026#34;Finished attempting to create a sheet.\u0026#34;); } } } These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-6/","summary":"\u003ch1 id=\"pseudocode\"\u003ePseudocode\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"n\"\u003egets\u003c/span\u003e \u003cspan class=\"n\"\u003eexception\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erollback\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"exceptions\"\u003eExceptions\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Exception as \u0026#34;e\u0026#34; to print the error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eTo\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003especific\u003c/span\u003e \u003cspan class=\"n\"\u003eexceptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eTo\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"n\"\u003eall\u003c/span\u003e \u003cspan class=\"n\"\u003eexceptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// but better to catch specific exceptions, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// otherwise you will catch all necessary and unecessary exceptions.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efinally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eTo\u003c/span\u003e \u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"n\"\u003eregardless\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003eoutcome\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"use-dont-abuse\"\u003eUse Don\u0026rsquo;t Abuse\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!\u003c/p\u003e","title":"C# + Revit API: Lesson 6 - try \u0026 catch Statements"},{"content":" 1 2 3 4 5 6 7 8 if // Condition { run if condition is true; } else // If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether { run if condition is false; } else if Statement 1 2 3 4 5 6 7 8 9 10 11 12 if // Condition { run if condition is true; } else if // Condition { run if there are more conditions; } else // If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether { run if condition is false; } Shorthand if Statements 1 value = condition?then:else; Nearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it\u0026rsquo;s a simple one liner task.\nExample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; using Nice3point.Revit.Toolkit.External; using Microsoft.VisualBasic; namespace guRoo.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { //TaskDialog.Show(Document.Title, \u0026#34;Hot reload!\u0026#34;); string input = Interaction.InputBox(\u0026#34;Enter a number:\u0026#34;, \u0026#34;Input Required\u0026#34;, \u0026#34;0\u0026#34;); if (!int.TryParse(input, out int i)) { TaskDialog.Show(Document.Title, \u0026#34;Invalid number entered.\u0026#34;); return; } // Shorthand version // string s = i == 3 ? \u0026#34;i is 2\u0026#34; : \u0026#34;i is not 2\u0026#34;; string outcome; if (i == 2) { outcome = \u0026#34;i is 2\u0026#34;; } else if (i == 3) { outcome = \u0026#34;i is 3\u0026#34;; } else { outcome = \u0026#34;i is neither 2 nor 3\u0026#34;; } TaskDialog.Show(Document.Title, outcome); } } } These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-5/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"c1\"\u003e// If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"else-if-statement\"\u003e\u003ccode\u003eelse if\u003c/code\u003e Statement\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ethere\u003c/span\u003e \u003cspan class=\"n\"\u003eare\u003c/span\u003e \u003cspan class=\"n\"\u003emore\u003c/span\u003e \u003cspan class=\"n\"\u003econditions\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"c1\"\u003e// If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"shorthand-if-statements\"\u003eShorthand \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\u003cspan class=\"n\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eNearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it\u0026rsquo;s a simple one liner task.\u003c/p\u003e","title":"C# + Revit API: Lesson 5 - `if` Statements"},{"content":" They control logic and flow in our tools. We will have a good understanding of core statements we can use to build Revit Add-ins.\nLogical Operators x == y =\u0026gt; true if x is equal to y\nx != y =\u0026gt; true if x is not equal to y\nx \u0026gt; y =\u0026gt; true if x is greater than y\nx \u0026lt; y =\u0026gt; true if x is less than y\nx \u0026gt;= y =\u0026gt; true if x greater than or equals to y\nx \u0026lt;= y =\u0026gt; true if x less than or equals to y\nx || y =\u0026gt; true if x OR y are true\nx \u0026amp;\u0026amp; y =\u0026gt; true if x AND y are true\n!(x) =\u0026gt; true if not x (can also use \u0026rsquo;not\u0026rsquo; x)\nx ^ y =\u0026gt; true if x OR y are true, but not both\nNull Operations / Operands x?.Method() =\u0026gt; If x is null, Method() will NOT run\nx ??= value =\u0026gt; If x is null, set it to value specified\nx is null =\u0026gt; True if x is Null, False if it\u0026rsquo;s not Null\nif (x) =\u0026gt; if x is Null, it yields Null or false\nThese tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-4/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThey control logic and flow in our tools.\nWe will have a good understanding of core statements we can use to build Revit Add-ins.\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch1 id=\"logical-operators\"\u003eLogical Operators\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003ex == y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue  if x is equal to y\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ex != y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is not equal to y\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ex \u0026gt; y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is greater than y\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ex \u0026lt; y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is less than y\u003c/em\u003e\u003c/p\u003e","title":"C# + Revit API: Lesson 4 - Logical Operators"},{"content":"Boolean bool true (1) false (0) Integer int Whole number:\n1, 2, 3, etc.\nNumbers come in different formats but by default they are signable (can be negative).\nTypically, they use 32 bits based.\nDouble double Decimal number:\n0.0, 1.5, 6.592, -5.00, etc.\nDoubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.\nCharacters char \u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, etc.\nChars store a single character (which can be a number - it is ASCII based behind the scenes). They use 1 byte (8 bits).\nStrings str \u0026ldquo;string\u0026rdquo;, \u0026ldquo;example\u0026rdquo;, etc.\nStrings are technically an array of characters (a consecutive set of [[chars]] in memory). They are abstracted for us in C#, and you might sometimes see them called a [[char*]] (CharStar).\nNull pointer null Always written as [[null]]\nNulls are a special object that points to the first byte in memory. It represents an absence of data and may commonly be caused through an error or exception.\nNullable Types Most objects you use will be [[Nullable]], in that they can be represented and set to [[null]]. [[Integers]] are an example of a type which cannot be set to [[null]] unless you declare them as [[nullable]] (which makes them a different type). Revit API Classes are generally nullable. Lists or Arrays? [[Arrays]] are important for memory management eventually, but I recommend skipping the use of them initially.\nThe Revit API generally works with [[Lists]].\n[[Lists]] - differ to [[arrays]] in that we can add additional objects to them, whereas [[arrays]] have a fixed size upon creation.\nWe will learn about [[Lists]] later.\nCompiling Generally, [[C#]] code will be faster than languages such as [[Python]] as it is compiled before execution. Compiling refers to the conversion of written code into machine code (1\u0026rsquo;s and 0\u0026rsquo;s). When we build our solution before running it, it is turning our code into a [[Dynamic Linked Library]] ([[DLL]]) which is executed by the application. Languages like [[Python]] instead use [[interpreters]]. Declaring a Variable in C# [[modifier(s)]] type variableName;\n[[public]] [[private]] [[static]] [[internal]] [[virtual]] We will return to access modifiers later, for now we can avoid using them in basic examples.\nWe tell the compiler what [[type]] we need first.\nWe then tell it the [[variableName]] to assign to it.\nAssign a Variable in C# [[type]] [[variableName]] = value;\nWe can assign a value upon creating the variable.\nOr, we can assign it later on\u0026hellip;\n1 2 type variableName; // \u0026lt;= Initialize variableName = value; // \u0026lt;= Assign When we assign a value, you need to give it a valid value for its [[type]]: 1 int myInteger = 5; The assigned value must suit the variable type upon assignment. Type safety in C# will ensure this. Examples below would cause an error: 1 2 int myInteger = 3.5; // \u0026lt;= Should be a double int myInteger = \u0026#34;5\u0026#34;; // \u0026lt;= Should be a string Creating a List in C# 1 List\u0026lt;int\u0026gt;()myList = new List\u0026lt;int\u0026gt;(); We can also declare a list and store objects to is: 1 List\u0026lt;int\u0026gt;()myList = new List\u0026lt;int\u0026gt;(){1,2,3}; We will come back to the braces later. Making use of var 1 var myList = new List\u0026lt;int\u0026gt;(); If the value being assigned on the right implies a specific type, we can instead use the var keyword to simplify our code. This is generally best practice. However, if the right side is ambiguous, declare the type on the left. This will matter when we learn about class inheritance. 1 var myList = new List\u0026lt;object\u0026gt;(); Object is a special type which allows the storage of many things. It can be a useful but ambiguous return type for functions and classes through which you might need to pass many things in/out of. We will learn in a later lesson about type casting, where the object class can be a useful intermediate type to take advantage of. Inheritance 101 The RevitAPI uses a lot of class inheritance. Metaphorical example:\nDogs and Cats are both Animals Dogs are not Cats Cats are not Dogs But the they both inherit the Animal RevitAPI Example:\nViews and Floors are both Elements\nViews are not Floors\nFloors are not Views\nBut they both inherit the Element\nElements have an ElementID property\nViews and Floors have an ElementID from Element Class\nFloors have a SlabShapeEditor Elements DO NOT Views DO NOT Basic Type Checking 1 object is type variableName This syntax can be used to logically check if an object is or inherits a specific type/class. We can assign a variable to this object as that type in a statement (e.g. if) to locally work with it as that type instead. We now have\u0026hellip; A basic understanding of:\nHow computation works, Basic variable types/classes How to declare variables How to assign variables Inheritance We will be applying these concepts soon.\nThese tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-3/","summary":"\u003ch1 id=\"boolean-bool\"\u003eBoolean \u003ccode\u003ebool\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003etrue (1)\u003c/li\u003e\n\u003cli\u003efalse (0)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"integer-int\"\u003eInteger \u003ccode\u003eint\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWhole number:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e1, 2, 3, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNumbers come in different formats but by default they are signable (can be negative).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTypically, they use 32 bits based.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"double-double\"\u003eDouble \u003ccode\u003edouble\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDecimal number:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e0.0, 1.5, 6.592, -5.00, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDoubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"characters-char\"\u003eCharacters \u003ccode\u003echar\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, etc.\u003c/p\u003e","title":"C# + Revit API: Lesson 3 - Fundamental Types of Data in C#"},{"content":"I suggest taking CS50 Course to understand the basics of Programming True \u0026amp; False 0 and 1 Base 2 numbering system 1 2 3 4 5 6 7 8 9 10 11 1 0 1 x x x 4 2 1 = 5 In other words: 2 2 2 x x x 2 1 0 4 2 1 = 5 1 0 1 1 2 3 We call these bits Eight bits = 1 byte Memory is addressed into bytes ASCII Tables bring meaning to what various bytes represent: 1 2 3 4 5 6 ASCII 48 = 0 (00) 110000 1 * 2^4 = 16 1 * 2^5 = 32 16 + 32 = 48 48 = 0 (in ASCII Table) Pointers = Structs (in C) Pointers are hexadecimal based values that identify an address in computer memory. If you write in C, you need to manage pointers and check memory in and out as you work. C# bypasses this using a garbage collector (GC). Pointers and structs allow us to connect bytes into lists. We can also array objects adjacently. In C#, this is all managed for you. 📊 Breakdown Struct 1 (First Node): Object: Data (e.g., 10) Null: No previous node — this is the start of the list. Pointer to next: Points to Struct 2 Struct 2 (Middle Node): Object: Data (e.g., 20) Pointer to previous: Points back to Struct 1 Pointer to next: Points forward to Struct 3 Struct 3 (Last Node): Object: Data (e.g., 30) Pointer to previous: Points back to Struct 2 Null: No next node — this is the end of the list. 🔁 Why use this? This doubly linked list structure allows you to:\nMove forward and backward through the list, Insert or remove elements in the middle more easily than with arrays. Code Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; typedef struct Node { int value; struct Node* prev; struct Node* next; } Node; int main() { // Create 3 nodes Node* first = malloc(sizeof(Node)); Node* second = malloc(sizeof(Node)); Node* third = malloc(sizeof(Node)); // Assign values first -\u0026gt;value = 10; second-\u0026gt;value = 20; third -\u0026gt;value = 30; // Connect them first-\u0026gt;prev = NULL; first-\u0026gt;next = second; second-\u0026gt;prev = first; second-\u0026gt;next = third; third-\u0026gt;prev = second; third-\u0026gt;next = NULL; // Print values printf(\u0026#34;Forward: %d -\u0026gt; %d -\u0026gt; %d\\n\u0026#34;, first-\u0026gt;value, second-\u0026gt;value, third-\u0026gt;value); printf(\u0026#34;Backward: %d \u0026lt;- %d \u0026lt;- %d\\n\u0026#34;, third-\u0026gt;value, second-\u0026gt;value, first-\u0026gt;value); // Clean up free(third); free(second); free(first); return 0; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 using System; class Node { public int Value; public Node? Prev; public Node? Next; } class Program { static void Main() { // Create 3 nodes var first = new Node { Value = 10 }; var second = new Node { Value = 20 }; var third = new Node { Value = 30 }; // Connect them first.Next = second; second.Prev = first; second.Next = third; third.Prev = second; // Traverse forward Console.WriteLine(\u0026#34;Forward:\u0026#34;); for (var current = first; current != null; current = current.Next) Console.Write(current.Value + \u0026#34; \u0026#34;); Console.WriteLine(\u0026#34;\\nBackward:\u0026#34;); for (var current = third; current != null; current = current.Prev) Console.Write(current.Value + \u0026#34; \u0026#34;); } } 🧠 Insertion and Removal in a Linked List In a linked list (especially a doubly linked list like the one we just looked at), the two most common operations are:\n➕ Insertion Adding a new node between existing nodes.\nFor example, inserting a new value between first and second:\nBefore:\n1 first \u0026lt;-\u0026gt; second After inserting new node (e.g., 15):\n1 first \u0026lt;-\u0026gt; newNode (15) \u0026lt;-\u0026gt; second To do this in code:\nCreate the new node. Update the next of the previous node. Update the prev of the next node. Link the new node’s prev and next. ➖ Removal Deleting a node from the list.\nFor example, removing second:\nBefore:\n1 first \u0026lt;-\u0026gt; second \u0026lt;-\u0026gt; third After removal:\n1 first \u0026lt;-\u0026gt; third To do this in code:\nSet first.next = third. Set third.prev = first. (In C) Free the memory of second. ✅ GOAL: We’ll insert a node with value 15 between nodes first (10) and second (20), and later remove it.\n🧱 C Code 🔧 Insertion in C: 1 2 3 4 5 6 7 8 9 10 11 // Inserting between first and second Node* newNode = malloc(sizeof(Node)); newNode-\u0026gt;value = 15; // Link new node newNode-\u0026gt;prev = first; newNode-\u0026gt;next = second; // Update existing links first-\u0026gt;next = newNode; second-\u0026gt;prev = newNode; ❌ Removal in C: 1 2 3 4 5 6 // Removing the newNode (15) first-\u0026gt;next = second; second-\u0026gt;prev = first; // Free memory free(newNode); 🧱 C# Code 🔧 Insertion in C#: 1 2 3 4 5 6 7 8 9 10 // Inserting between first and second var newNode = new Node { Value = 15 }; // Link new node newNode.Prev = first; newNode.Next = second; // Update existing links first.Next = newNode; second.Prev = newNode; ❌ Removal in C#: 1 2 3 4 5 6 // Removing the newNode (15) first.Next = second; second.Prev = first; // In C#, memory is handled automatically // So we don\u0026#39;t call free(); GC will collect it later ✅ Summary Operation C C# Insert Use malloc, fix 4 pointers Use new, fix 4 references Remove Fix 2 pointers, free() memory Fix 2 references, GC does cleanup These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-2/","summary":"\u003ch4 id=\"i-suggest-taking-cs50-course-to-understand-the-basics-of-programming\"\u003eI suggest taking \u003ca href=\"https://pll.harvard.edu/course/cs50-introduction-computer-science\"\u003eCS50 Course\u003c/a\u003e to understand the basics of Programming\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eTrue \u0026amp; False\u003c/li\u003e\n\u003cli\u003e0 and 1\u003c/li\u003e\n\u003cli\u003eBase 2 numbering system\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eIn\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eWe\u003c/span\u003e \u003cspan class=\"n\"\u003ecall\u003c/span\u003e \u003cspan class=\"n\"\u003ethese\u003c/span\u003e \u003cspan class=\"n\"\u003ebits\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eEight\u003c/span\u003e \u003cspan class=\"n\"\u003ebits\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eMemory\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"n\"\u003eaddressed\u003c/span\u003e \u003cspan class=\"k\"\u003einto\u003c/span\u003e \u003cspan class=\"n\"\u003ebytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"ascii-tables-bring-meaning-to-what-various-bytes-represent\"\u003eASCII Tables bring meaning to what various bytes represent:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eASCII\u003c/span\u003e \u003cspan class=\"m\"\u003e48\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e00\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"m\"\u003e110000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e^\u003c/span\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e16\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e*\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e^\u003c/span\u003e\u003cspan class=\"m\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e16\u003c/span\u003e \u003cspan class=\"p\"\u003e+\u003c/span\u003e \u003cspan class=\"m\"\u003e32\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e48\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e48\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eASCII\u003c/span\u003e \u003cspan class=\"n\"\u003eTable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"pointers--structs-in-c\"\u003ePointers = Structs (in C)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003ePointers are hexadecimal based values that identify an address in computer memory.\u003c/li\u003e\n\u003cli\u003eIf you write in C, you need to manage pointers and check memory in and out as you work.\u003c/li\u003e\n\u003cli\u003eC# bypasses this using a \u003ccode\u003egarbage collector (GC)\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePointers and structs allow us to connect bytes into lists. We can also array objects adjacently.\u003c/li\u003e\n\u003cli\u003eIn C#, this is all managed for you.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-breakdown\"\u003e📊 Breakdown\u003c/h3\u003e\n\u003ch4 id=\"struct-1-first-node\"\u003eStruct 1 (First Node):\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eObject\u003c/code\u003e: Data (e.g., 10)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNull\u003c/code\u003e: No previous node — this is the \u003cstrong\u003estart\u003c/strong\u003e of the list.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePointer to next\u003c/code\u003e: Points to Struct 2\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"struct-2-middle-node\"\u003eStruct 2 (Middle Node):\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eObject\u003c/code\u003e: Data (e.g., 20)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePointer to previous\u003c/code\u003e: Points back to Struct 1\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePointer to next\u003c/code\u003e: Points forward to Struct 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"struct-3-last-node\"\u003eStruct 3 (Last Node):\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eObject\u003c/code\u003e: Data (e.g., 30)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePointer to previous\u003c/code\u003e: Points back to Struct 2\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNull\u003c/code\u003e: No next node — this is the \u003cstrong\u003eend\u003c/strong\u003e of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-why-use-this\"\u003e🔁 Why use this?\u003c/h3\u003e\n\u003cp\u003eThis \u003cstrong\u003edoubly linked list\u003c/strong\u003e structure allows you to:\u003c/p\u003e","title":"C# + Revit API: Lesson 2 - Bits \u0026 Bytes, ASCII Table, Pointers \u0026 Structs - Programming 101"},{"content":"This post explains one concrete command—line by line—so a beginner can follow without extra abstractions.\nWhat this command does when you click your add-in button:\nTries to create a sheet (using an invalid title block on purpose → shows how error handling works).\nCollects up to 10 existing sheets and formats their numbers/names.\nDisplays the result in a WPF dialog via a ViewModel.\n✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\nIf you have no knowledge of how to set this up, I would suggest just skimming through - just for reference and going to the next post, where I will start from scratch.\nThe Command (Full Code) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 using Autodesk.Revit.Attributes; using Nice3point.Revit.Toolkit.External; using guRoo.Views; using guRoo.ViewModels; namespace guRoo.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { var viewModel = Host.GetService\u0026lt;guRooViewModel\u0026gt;(); var titleBlockId = ElementId.InvalidElementId; string resultMessage = \u0026#34;\u0026#34;; using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } // Get sheet information to display var allSheets = new FilteredElementCollector(Document). OfClass(typeof(ViewSheet)). ToElements(). ToList(); if (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets: \\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } viewModel.ResultMessage = resultMessage; var view = new guRooView(viewModel); view.ShowDialog(); } } } What Each Part Does (Beginner-Friendly) 1) Imports 1 2 3 4 using Autodesk.Revit.Attributes; // [Transaction(...)] attribute using Nice3point.Revit.Toolkit.External; // ExternalCommand base + Host DI using guRoo.Views; // WPF Window (guRooView) using guRoo.ViewModels; // ViewModel (guRooViewModel) Revit attributes let you declare transaction behaviour.\nNice3point Toolkit provides a simplified ExternalCommand base (gives you Document) and DI access via Host.GetService\u0026lt;T\u0026gt;().\nViews/ViewModels are your WPF MVVM types.\n2) Class \u0026amp; Attributes 1 2 3 [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand StartupCommand runs when the user clicks your button.\n[Transaction(TransactionMode.Manual)] = you start/commit/rollback changes.\nExternalCommand (Nice3point) simplifies the Revit command pattern.\nUsedImplicitly is an analyzer hint (e.g., JetBrains) so tooling doesn’t flag it as “unused.”\n3) Getting the ViewModel 1 var viewModel = Host.GetService\u0026lt;UguRooViewModel\u0026gt;(); Pulls a ViewModel instance from DI so the dialog can display results via data binding. 4) Intentionally Invalid Title Block 1 2 3 4 var titleBlockId = ElementId.InvalidElementId; // invalid on purpose string resultMessage = \u0026#34;\u0026#34;; We force a failure to demonstrate safe error handling. resultMessage will collect feedback for the user. 5) Transaction + Error Handling Around ViewSheet.Create 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } Revit is read-only unless you’re inside a Transaction. Creating a sheet with an invalid title block throws ArgumentException → we rollback safely and show the message. Any unexpected error also triggers a rollback. This is the core pattern you’ll reuse for any change in Revit: Start → Do work → Commit or RollBack on error.\n6) Collecting Existing Sheets 1 2 3 4 var allSheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .ToElements() .ToList(); Use FilteredElementCollector to find elements in the document. Here we collect all sheets. Then we format a short list for display:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets:\\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } We show up to 10 sheets as \u0026ldquo;A101 - Floor Plan\u0026rdquo;. If there are none, we display that clearly. 7) Show the Result in WPF 1 2 3 4 viewModel.ResultMessage = resultMessage; var view = new guRooView(viewModel); view.ShowDialog(); Set the ViewModel property (MVVM). Open your WPF dialog to show the message. Why the Sheet Creation “Fails” (and How to Make It Succeed) It fails because we passed ElementId.InvalidElementId. To actually create a sheet, find a real title block type first:\n1 2 3 4 var titleBlockId = new FilteredElementCollector(Document) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); // throws if none exist Replace the invalid id with this titleBlockId before ViewSheet.Create(...) and the command will create a sheet (assuming at least one title block type is loaded).\nOptional Cleanups (Beginner-Safe) Safer casting with LINQ: 1 2 3 4 var sheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .Cast\u0026lt;ViewSheet\u0026gt;() .ToList(); StringBuilder for long messages (not required, just tidy for larger outputs). Key Takeaways Always use a Transaction to modify the model. Handle exceptions and rollback on failure—never leave a transaction open. Collectors are how you find elements efficiently. MVVM + WPF: set data on the ViewModel; the dialog updates automatically. For creating sheets, you need a valid title block type (OST_TitleBlocks). These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-1/","summary":"\u003cp\u003eThis post explains \u003cstrong\u003eone concrete command\u003c/strong\u003e—line by line—so a beginner can follow without extra abstractions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat this command does when you click your add-in button:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTries to create a \u003cstrong\u003esheet\u003c/strong\u003e (using an \u003cstrong\u003einvalid\u003c/strong\u003e title block on purpose → shows how error handling works).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCollects up to \u003cstrong\u003e10 existing sheets\u003c/strong\u003e and formats their numbers/names.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDisplays the result in a \u003cstrong\u003eWPF dialog\u003c/strong\u003e via a ViewModel.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers \u003ccode\u003eStartupCommand\u003c/code\u003e.\u003c/p\u003e","title":"C# + Revit API: Lesson 1 - A Simple Walkthrough of the Command"},{"content":"Why C#? Scalability\nStart with Install Visual Studio 2022 Community Install .NET SDKs (.NET4.8 \u0026amp; .NET8) Install Nice3Point Templates Solution Start a solution / project Create a new project Choose the Revit Addin (Nic3Point) Template Configure your new project Name of the project Location Solution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects) Additional Information Add-in type -\u0026gt; Application User Interface -\u0026gt; None IoC -\u0026gt; Disabled Serilog support -\u0026gt; unchecked Explore Visual Studio Properties \u0026amp; Solution Explorer (Project Browser in Revit) Error \u0026amp; Output CSProj -\u0026gt; Preconfigured up to Revit v.2025 .addin -\u0026gt; Change GUID (The rest we will change later) Application Class: Tells your addin how to begin and how to finish when Revit opens and closes. Class: External Application Method: OnStartup() Will run \u0026ldquo;Create Ribbon()\u0026rdquo; Creates a Panel Adds a PushButton to that Panel With 2 Icons Our Application OnStartup When it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo; And CreateRibbon is a defined function below that: Creates a panel This is possible due to pre-configured Revit API that we are using CreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit. Creates a button Same for the Button AddPushButton Method in Revit API - Creates a button Commands Folder Core Code Currently: Task Dialog - Shows the name of the addin ExternalCommand, but we should use IExternalCommand This is the part that writes the logic for your button Once you click the button, whatever is under Commands Folder connected to the button will be executed. If you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;); Once you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo; Resources: Icons Everything is saved in windows explorer Configurations: Debug and Release Per Revit Version from R20 to R25 References: Under: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025]. DLL Files that you can reference to your project to build something. You could even add an excel package to work with Excel, will do that later. Build and test the first plugin Build the solution by clicking on Run (Play Button) next to Any CPU. Lauches Revit (Version that you pre-configured) Always Load your Addin What happened behind the scenes: VS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit. That became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier. Everything is already set and pathed for you for the ease of starting and launching plugins. Go to New Project Find your new panel in the panel tabs on the top of Revit User Interface. Find your Addin / Plugin Click on it And you will get a message with the name of your Tool. Stop Debug Closes Revit \u0026amp; Debug Mode These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-0/","summary":"\u003ch1 id=\"why-c\"\u003eWhy C#?\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eScalability\u003c/code\u003e\u003c/p\u003e\n\u003ch1 id=\"start-with\"\u003eStart with\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://visualstudio.microsoft.com/downloads/\"\u003eInstall Visual Studio 2022 Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dotnet.microsoft.com/en-us/download/visual-studio-sdks\"\u003eInstall .NET SDKs (.NET4.8 \u0026amp; .NET8)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Nice3point/RevitTemplates\"\u003eInstall Nice3Point Templates\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eStart a solution / project\n\u003col\u003e\n\u003cli\u003eCreate a new project\u003c/li\u003e\n\u003cli\u003eChoose the Revit Addin (Nic3Point) Template\u003c/li\u003e\n\u003cli\u003eConfigure your new project\n\u003col\u003e\n\u003cli\u003eName of the project\u003c/li\u003e\n\u003cli\u003eLocation\u003c/li\u003e\n\u003cli\u003eSolution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdditional Information\n\u003col\u003e\n\u003cli\u003eAdd-in type -\u0026gt; Application\u003c/li\u003e\n\u003cli\u003eUser Interface -\u0026gt; None\u003c/li\u003e\n\u003cli\u003eIoC -\u0026gt; Disabled\u003c/li\u003e\n\u003cli\u003eSerilog support -\u0026gt; unchecked\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eExplore Visual Studio\n\u003col\u003e\n\u003cli\u003eProperties \u0026amp; Solution Explorer (Project Browser in Revit)\u003c/li\u003e\n\u003cli\u003eError \u0026amp; Output\u003c/li\u003e\n\u003cli\u003eCSProj -\u0026gt; Preconfigured up to Revit v.2025\u003c/li\u003e\n\u003cli\u003e.addin -\u0026gt; Change GUID (The rest we will change later)\u003c/li\u003e\n\u003cli\u003eApplication Class:\n\u003col\u003e\n\u003cli\u003eTells your addin how to begin and how to finish when Revit opens and closes.\u003c/li\u003e\n\u003cli\u003eClass: External Application\u003c/li\u003e\n\u003cli\u003eMethod: OnStartup()\n\u003col\u003e\n\u003cli\u003eWill run \u0026ldquo;Create Ribbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eCreates a \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eAdds a \u003cstrong\u003ePushButton\u003c/strong\u003e to that \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eWith 2 \u003cstrong\u003eIcons\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Application\n\u003col\u003e\n\u003cli\u003eOnStartup\u003c/li\u003e\n\u003cli\u003eWhen it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd CreateRibbon is a defined function below that:\n\u003col\u003e\n\u003cli\u003eCreates a panel\n\u003col\u003e\n\u003cli\u003eThis is possible due to pre-configured Revit API that we are using\u003c/li\u003e\n\u003cli\u003eCreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCreates a button\n\u003col\u003e\n\u003cli\u003eSame for the Button\u003c/li\u003e\n\u003cli\u003eAddPushButton Method in Revit API - Creates a button\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCommands Folder\n\u003col\u003e\n\u003cli\u003eCore Code\u003c/li\u003e\n\u003cli\u003eCurrently: Task Dialog - Shows the name of the addin\n\u003col\u003e\n\u003cli\u003eExternalCommand, but we should use IExternalCommand\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eThis is the part that writes the logic for your button\u003c/li\u003e\n\u003cli\u003eOnce you click the button, whatever is under Commands Folder connected to the button will be executed.\u003c/li\u003e\n\u003cli\u003eIf you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;);\n\u003col\u003e\n\u003cli\u003eOnce you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eResources:\n\u003col\u003e\n\u003cli\u003eIcons\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eEverything is saved in windows explorer\u003c/li\u003e\n\u003cli\u003eConfigurations:\n\u003col\u003e\n\u003cli\u003eDebug and Release\u003c/li\u003e\n\u003cli\u003ePer Revit Version from R20 to R25\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eReferences:\n\u003col\u003e\n\u003cli\u003eUnder: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025].\u003c/li\u003e\n\u003cli\u003eDLL Files that you can reference to your project to build something.\u003c/li\u003e\n\u003cli\u003eYou could even add an excel package to work with Excel, will do that later.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild and test the first plugin\n\u003col\u003e\n\u003cli\u003eBuild the solution by clicking on Run (Play Button) next to Any CPU.\u003c/li\u003e\n\u003cli\u003eLauches Revit (Version that you pre-configured)\u003c/li\u003e\n\u003cli\u003eAlways Load your Addin\u003c/li\u003e\n\u003cli\u003eWhat happened behind the scenes:\n\u003col\u003e\n\u003cli\u003eVS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit.\u003c/li\u003e\n\u003cli\u003eThat became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier.\u003c/li\u003e\n\u003cli\u003eEverything is already set and pathed for you for the ease of starting and launching plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eGo to New Project\n\u003col\u003e\n\u003cli\u003eFind your new panel in the panel tabs on the top of Revit User Interface.\u003c/li\u003e\n\u003cli\u003eFind your Addin / Plugin\u003c/li\u003e\n\u003cli\u003eClick on it\u003c/li\u003e\n\u003cli\u003eAnd you will get a message with the name of your Tool.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eStop Debug\n\u003col\u003e\n\u003cli\u003eCloses Revit \u0026amp; Debug Mode\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThese tutorials were inspired by the work of \u003ca href=\"https://www.youtube.com/@AussieBIMGuru\"\u003eAussie BIM Guru\u003c/a\u003e. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\u003c/p\u003e","title":"C# + Revit API: Lesson 0"}]