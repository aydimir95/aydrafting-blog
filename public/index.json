[{"content":"This post explains one concrete command—line by line—so a beginner can follow without extra abstractions.\nWhat this command does when you click your add-in button:\nTries to create a sheet (using an invalid title block on purpose → shows how error handling works).\nCollects up to 10 existing sheets and formats their numbers/names.\nDisplays the result in a WPF dialog via a ViewModel.\n✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\nThe Command (Full Code) using Autodesk.Revit.Attributes; using Nice3point.Revit.Toolkit.External; using UKON.Views; using UKON.ViewModels; namespace UKON.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); var titleBlockId = ElementId.InvalidElementId; string resultMessage = \u0026#34;\u0026#34;; using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } // Get sheet information to display var allSheets = new FilteredElementCollector(Document). OfClass(typeof(ViewSheet)). ToElements(). ToList(); if (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets: \\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); } } } What Each Part Does (Beginner-Friendly) 1) Imports using Autodesk.Revit.Attributes; // [Transaction(...)] attribute using Nice3point.Revit.Toolkit.External; // ExternalCommand base + Host DI using UKON.Views; // WPF Window (UKONView) using UKON.ViewModels; // ViewModel (UKONViewModel) Revit attributes let you declare transaction behaviour.\nNice3point Toolkit provides a simplified ExternalCommand base (gives you Document) and DI access via Host.GetService\u0026lt;T\u0026gt;().\nViews/ViewModels are your WPF MVVM types.\n2) Class \u0026amp; Attributes [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand StartupCommand runs when the user clicks your button.\n[Transaction(TransactionMode.Manual)] = you start/commit/rollback changes.\nExternalCommand (Nice3point) simplifies the Revit command pattern.\nUsedImplicitly is an analyzer hint (e.g., JetBrains) so tooling doesn’t flag it as “unused.”\n3) Getting the ViewModel var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); Pulls a ViewModel instance from DI so the dialog can display results via data binding. 4) Intentionally Invalid Title Block var titleBlockId = ElementId.InvalidElementId; // invalid on purpose string resultMessage = \u0026#34;\u0026#34;; We force a failure to demonstrate safe error handling.\nresultMessage will collect feedback for the user.\n5) Transaction + Error Handling Around ViewSheet.Create using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } Revit is read-only unless you’re inside a Transaction.\nCreating a sheet with an invalid title block throws ArgumentException → we rollback safely and show the message.\nAny unexpected error also triggers a rollback.\nThis is the core pattern you’ll reuse for any change in Revit: Start → Do work → Commit or RollBack on error.\n6) Collecting Existing Sheets var allSheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .ToElements() .ToList(); Use FilteredElementCollector to find elements in the document.\nHere we collect all sheets.\nThen we format a short list for display:\nif (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets:\\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } We show up to 10 sheets as \u0026ldquo;A101 - Floor Plan\u0026rdquo;.\nIf there are none, we display that clearly.\n7) Show the Result in WPF viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); Set the ViewModel property (MVVM). Open your WPF dialog to show the message. Why the Sheet Creation “Fails” (and How to Make It Succeed) It fails because we passed ElementId.InvalidElementId. To actually create a sheet, find a real title block type first:\nvar titleBlockId = new FilteredElementCollector(Document) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); // throws if none exist Replace the invalid id with this titleBlockId before ViewSheet.Create(\u0026hellip;) and the command will create a sheet (assuming at least one title block type is loaded).\nOptional Cleanups (Beginner-Safe) Safer casting with LINQ: var sheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .Cast\u0026lt;ViewSheet\u0026gt;() .ToList(); StringBuilder for long messages (not required, just tidy for larger outputs).\nKey Takeaways Always use a Transaction to modify the model.\nHandle exceptions and rollback on failure—never leave a transaction open.\nCollectors are how you find elements efficiently.\nMVVM + WPF: set data on the ViewModel; the dialog updates automatically.\nFor creating sheets, you need a valid title block type (OST_TitleBlocks).\n","permalink":"https://blog.aydrafting.com/posts/post-1/","summary":"\u003cp\u003eThis post explains \u003cstrong\u003eone concrete command\u003c/strong\u003e—line by line—so a beginner can follow without extra abstractions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat this command does when you click your add-in button:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTries to create a \u003cstrong\u003esheet\u003c/strong\u003e (using an \u003cstrong\u003einvalid\u003c/strong\u003e title block on purpose → shows how error handling works).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCollects up to \u003cstrong\u003e10 existing sheets\u003c/strong\u003e and formats their numbers/names.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDisplays the result in a \u003cstrong\u003eWPF dialog\u003c/strong\u003e via a ViewModel.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\u003c/p\u003e","title":"C# + Revit API: Lesson 1 — A Simple Walkthrough of the Command"},{"content":"Why C#? Scalability Start with: Install Visual Studio 2022 Community Install .NET SDKs (.NET4.8 \u0026amp; .NET8) Install Nice3Point Templates Solution Start a solution / project Create a new project Choose the Revit Addin (Nic3Point) Template Configure your new project Name of the project Location Solution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects) Additional Information Add-in type -\u0026gt; Application User Interface -\u0026gt; None IoC -\u0026gt; Disabled Serilog support -\u0026gt; unchecked Explore Visual Studio Properties \u0026amp; Solution Explorer (Project Browser in Revit) Error \u0026amp; Output CSProj -\u0026gt; Preconfigured up to Revit v.2025 .addin -\u0026gt; Change GUID (The rest we will change later) Application Class: Tells your addin how to begin and how to finish when Revit opens and closes. Class: External Application Method: OnStartup() Will run \u0026ldquo;Create Ribbon()\u0026rdquo; Creates a Panel Adds a PushButton to that Panel With 2 Icons Our Application OnStartup When it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo; And CreateRibbon is a defined function below that: Creates a panel This is possible due to pre-configured Revit API that we are using CreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit. Creates a button Same for the Button AddPushButton Method in Revit API - Creates a button Commands Folder Core Code Currently: Task Dialog - Shows the name of the addin ExternalCommand, but we should use IExternalCommand This is the part that writes the logic for your button Once you click the button, whatever is under Commands Folder connected to the button will be executed. If you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;); Once you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo; Resources: Icons Everything is saved in windows explorer Configurations: Debug and Release Per Revit Version from R20 to R25 References: Under: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025]. DLL Files that you can reference to your project to build something. You could even add an excel package to work with Excel, will do that later. Build and test the first plugin Build the solution by clicking on Run (Play Button) next to Any CPU. Lauches Revit (Version that you pre-configured) Always Load your Addin What happened behind the scenes: VS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit. That became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier. Everything is already set and pathed for you for the ease of starting and launching plugins. Go to New Project Find your new panel in the panel tabs on the top of Revit User Interface. Find your Addin / Plugin Click on it And you will get a message with the name of your Tool. Stop Debug Closes Revit \u0026amp; Debug Mode ","permalink":"https://blog.aydrafting.com/posts/post-0/","summary":"\u003ch3 id=\"why-c\"\u003eWhy C#?\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eScalability\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"start-with\"\u003eStart with:\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://visualstudio.microsoft.com/downloads/\"\u003eInstall Visual Studio 2022 Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dotnet.microsoft.com/en-us/download/visual-studio-sdks\"\u003eInstall .NET SDKs (.NET4.8 \u0026amp; .NET8)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Nice3point/RevitTemplates\"\u003eInstall Nice3Point Templates\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eStart a solution / project\n\u003col\u003e\n\u003cli\u003eCreate a new project\u003c/li\u003e\n\u003cli\u003eChoose the Revit Addin (Nic3Point) Template\u003c/li\u003e\n\u003cli\u003eConfigure your new project\n\u003col\u003e\n\u003cli\u003eName of the project\u003c/li\u003e\n\u003cli\u003eLocation\u003c/li\u003e\n\u003cli\u003eSolution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdditional Information\n\u003col\u003e\n\u003cli\u003eAdd-in type -\u0026gt; Application\u003c/li\u003e\n\u003cli\u003eUser Interface -\u0026gt; None\u003c/li\u003e\n\u003cli\u003eIoC -\u0026gt; Disabled\u003c/li\u003e\n\u003cli\u003eSerilog support -\u0026gt; unchecked\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eExplore Visual Studio\n\u003col\u003e\n\u003cli\u003eProperties \u0026amp; Solution Explorer (Project Browser in Revit)\u003c/li\u003e\n\u003cli\u003eError \u0026amp; Output\u003c/li\u003e\n\u003cli\u003eCSProj -\u0026gt; Preconfigured up to Revit v.2025\u003c/li\u003e\n\u003cli\u003e.addin -\u0026gt; Change GUID (The rest we will change later)\u003c/li\u003e\n\u003cli\u003eApplication Class:\n\u003col\u003e\n\u003cli\u003eTells your addin how to begin and how to finish when Revit opens and closes.\u003c/li\u003e\n\u003cli\u003eClass: External Application\u003c/li\u003e\n\u003cli\u003eMethod: OnStartup()\n\u003col\u003e\n\u003cli\u003eWill run \u0026ldquo;Create Ribbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eCreates a \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eAdds a \u003cstrong\u003ePushButton\u003c/strong\u003e to that \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eWith 2 \u003cstrong\u003eIcons\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Application\n\u003col\u003e\n\u003cli\u003eOnStartup\u003c/li\u003e\n\u003cli\u003eWhen it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd CreateRibbon is a defined function below that:\n\u003col\u003e\n\u003cli\u003eCreates a panel\n\u003col\u003e\n\u003cli\u003eThis is possible due to pre-configured Revit API that we are using\u003c/li\u003e\n\u003cli\u003eCreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCreates a button\n\u003col\u003e\n\u003cli\u003eSame for the Button\u003c/li\u003e\n\u003cli\u003eAddPushButton Method in Revit API - Creates a button\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCommands Folder\n\u003col\u003e\n\u003cli\u003eCore Code\u003c/li\u003e\n\u003cli\u003eCurrently: Task Dialog - Shows the name of the addin\n\u003col\u003e\n\u003cli\u003eExternalCommand, but we should use IExternalCommand\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eThis is the part that writes the logic for your button\u003c/li\u003e\n\u003cli\u003eOnce you click the button, whatever is under Commands Folder connected to the button will be executed.\u003c/li\u003e\n\u003cli\u003eIf you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;);\n\u003col\u003e\n\u003cli\u003eOnce you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eResources:\n\u003col\u003e\n\u003cli\u003eIcons\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eEverything is saved in windows explorer\u003c/li\u003e\n\u003cli\u003eConfigurations:\n\u003col\u003e\n\u003cli\u003eDebug and Release\u003c/li\u003e\n\u003cli\u003ePer Revit Version from R20 to R25\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eReferences:\n\u003col\u003e\n\u003cli\u003eUnder: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025].\u003c/li\u003e\n\u003cli\u003eDLL Files that you can reference to your project to build something.\u003c/li\u003e\n\u003cli\u003eYou could even add an excel package to work with Excel, will do that later.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild and test the first plugin\n\u003col\u003e\n\u003cli\u003eBuild the solution by clicking on Run (Play Button) next to Any CPU.\u003c/li\u003e\n\u003cli\u003eLauches Revit (Version that you pre-configured)\u003c/li\u003e\n\u003cli\u003eAlways Load your Addin\u003c/li\u003e\n\u003cli\u003eWhat happened behind the scenes:\n\u003col\u003e\n\u003cli\u003eVS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit.\u003c/li\u003e\n\u003cli\u003eThat became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier.\u003c/li\u003e\n\u003cli\u003eEverything is already set and pathed for you for the ease of starting and launching plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eGo to New Project\n\u003col\u003e\n\u003cli\u003eFind your new panel in the panel tabs on the top of Revit User Interface.\u003c/li\u003e\n\u003cli\u003eFind your Addin / Plugin\u003c/li\u003e\n\u003cli\u003eClick on it\u003c/li\u003e\n\u003cli\u003eAnd you will get a message with the name of your Tool.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eStop Debug\n\u003col\u003e\n\u003cli\u003eCloses Revit \u0026amp; Debug Mode\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"C# + Revit API: Lesson 0"}]