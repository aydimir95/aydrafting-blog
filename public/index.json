[{"content":"Why C#? Scalability\nStart with Install Visual Studio 2022 Community Install .NET SDKs (.NET4.8 \u0026amp; .NET8) Install Nice3Point Templates Project Solution Start a solution / project Create a new project Choose the Revit Addin (Nice3Point) Template Configure your new project Name of the project Location Solution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects) Additional Information Add-in type -\u0026gt; Application User Interface -\u0026gt; None IoC -\u0026gt; Disabled Serilog support -\u0026gt; unchecked Explore Visual Studio Properties \u0026amp; Solution Explorer (Project Browser in Revit) Error \u0026amp; Output CSProj -\u0026gt; Preconfigured up to Revit v.2025 .addin -\u0026gt; Change GUID (The rest we will change later) Application Class: Tells your .addin how to begin and how to finish when Revit opens and closes. Class: External Application Method: OnStartup() Will run Create Ribbon() Creates a Panel Adds a PushButton to that Panel With 2 Icons Our Application OnStartup When it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo; And CreateRibbon is a defined function below that: Creates a panel This is possible due to pre-configured Revit API that we are using CreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit. Creates a button Same for the Button AddPushButton Method in Revit API - Creates a button Commands Folder Core Code Currently: Task Dialog - Shows the name of the .addin ExternalCommand, but we should use IExternalCommand This is the part that writes the logic for your button Once you click the button, whatever is under Commands Folder connected to the button will be executed. If you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;); Once you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo; Resources: Icons Everything is saved in windows explorer Configurations: Debug and Release Per Revit Version from R20 to R25 References: Under: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025]. DLL Files that you can reference to your project to build something. You could even add an excel package to work with Excel, will do that later. Build and test the first plugin Build the solution by clicking on Run (Play Button) next to Any CPU. Launches Revit (Version that you pre-configured) Always Load your .addin What happened behind the scenes: VS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit. That became possible due to preconfigured Visual Studio Nice3Point Template that you ran earlier. Everything is already set and pathed for you for the ease of starting and launching plugins. Go to New Project Find your new panel in the panel tabs on the top of Revit UI. Find your Plugin / add-in Click on it And you will get a message with the name of your Tool. Stop Debug Closes Revit \u0026amp; Debug Mode ","permalink":"https://blog.aydrafting.com/posts/lesson-0/","summary":"\u003ch1 id=\"why-c\"\u003eWhy C#?\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eScalability\u003c/code\u003e\u003c/p\u003e\n\u003ch1 id=\"start-with\"\u003eStart with\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://visualstudio.microsoft.com/downloads/\"\u003eInstall Visual Studio 2022 Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dotnet.microsoft.com/en-us/download/visual-studio-sdks\"\u003eInstall .NET SDKs (.NET4.8 \u0026amp; .NET8)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Nice3point/RevitTemplates\"\u003eInstall Nice3Point Templates\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"project-solution\"\u003eProject Solution\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eStart a solution / project\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003enew project\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eChoose the Revit Addin (\u003ccode\u003eNice3Point\u003c/code\u003e) Template\u003c/li\u003e\n\u003cli\u003eConfigure your new project\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eName\u003c/code\u003e of the project\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSolution Name\u003c/code\u003e - same as project name (it\u0026rsquo;s a folder name that holds many projects)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdditional Information\n\u003col\u003e\n\u003cli\u003eAdd-in type -\u0026gt; \u003ccode\u003eApplication\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser Interface -\u0026gt; \u003ccode\u003eNone\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIoC -\u0026gt; \u003ccode\u003eDisabled\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSerilog support -\u0026gt; \u003ccode\u003eunchecked\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eExplore \u003ccode\u003eVisual Studio\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003eProperties \u0026amp; Solution Explorer (Project Browser in Revit)\u003c/li\u003e\n\u003cli\u003eError \u0026amp; Output\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCSProj\u003c/code\u003e -\u0026gt; Preconfigured up to Revit v.2025\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.addin\u003c/code\u003e -\u0026gt; Change GUID (The rest we will change later)\u003c/li\u003e\n\u003cli\u003eApplication Class:\n\u003col\u003e\n\u003cli\u003eTells your \u003ccode\u003e.addin\u003c/code\u003e how to begin and how to finish when Revit opens and closes.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eClass\u003c/code\u003e: External Application\u003c/li\u003e\n\u003cli\u003eMethod: \u003ccode\u003eOnStartup()\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003eWill run \u003ccode\u003eCreate Ribbon()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCreates a \u003cstrong\u003e\u003ccode\u003ePanel\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eAdds a \u003cstrong\u003e\u003ccode\u003ePushButton\u003c/code\u003e\u003c/strong\u003e to that \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eWith 2 \u003cstrong\u003e\u003ccode\u003eIcons\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Application\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eOnStartup\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWhen it begins, it calls a Function \u0026ldquo;\u003ccode\u003eCreateRibbon()\u003c/code\u003e\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd CreateRibbon is a defined function below that:\n\u003col\u003e\n\u003cli\u003eCreates a panel\n\u003col\u003e\n\u003cli\u003eThis is possible due to pre-configured Revit API that we are using\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCreatePanel\u003c/code\u003e - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCreates a button\n\u003col\u003e\n\u003cli\u003eSame for the Button\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAddPushButton\u003c/code\u003e Method in Revit API - Creates a button\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCommands Folder\n\u003col\u003e\n\u003cli\u003eCore Code\u003c/li\u003e\n\u003cli\u003eCurrently: Task Dialog - Shows the name of the \u003ccode\u003e.addin\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eExternalCommand\u003c/code\u003e, but we should use \u003ccode\u003eIExternalCommand\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eThis is the part that writes the logic for your button\u003c/li\u003e\n\u003cli\u003eOnce you click the button, whatever is under Commands Folder connected to the button will be executed.\u003c/li\u003e\n\u003cli\u003eIf you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;);\n\u003col\u003e\n\u003cli\u003eOnce you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eResources:\n\u003col\u003e\n\u003cli\u003eIcons\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eEverything is saved in windows explorer\u003c/li\u003e\n\u003cli\u003eConfigurations:\n\u003col\u003e\n\u003cli\u003eDebug and Release\u003c/li\u003e\n\u003cli\u003ePer Revit Version from R20 to R25\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eReferences:\n\u003col\u003e\n\u003cli\u003eUnder: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025].\u003c/li\u003e\n\u003cli\u003eDLL Files that you can reference to your project to build something.\u003c/li\u003e\n\u003cli\u003eYou could even add an excel package to work with Excel, will do that later.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild and test the first plugin\n\u003col\u003e\n\u003cli\u003eBuild the solution by clicking on \u003ccode\u003eRun\u003c/code\u003e (Play Button) next to \u003ccode\u003eAny CPU\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eLaunches Revit (Version that you pre-configured)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAlways Load\u003c/code\u003e your \u003ccode\u003e.addin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWhat happened behind the scenes:\n\u003col\u003e\n\u003cli\u003eVS2022 Added the DLL file and the \u003ccode\u003e.addin\u003c/code\u003e file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit.\u003c/li\u003e\n\u003cli\u003eThat became possible due to preconfigured Visual Studio \u003ccode\u003eNice3Point\u003c/code\u003e Template that you ran earlier.\u003c/li\u003e\n\u003cli\u003eEverything is already set and pathed for you for the ease of starting and launching plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eGo to \u003ccode\u003eNew Project\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003eFind your new panel in the \u003ccode\u003epanel\u003c/code\u003e tabs on the top of Revit UI.\u003c/li\u003e\n\u003cli\u003eFind your Plugin / add-in\u003c/li\u003e\n\u003cli\u003eClick on it\u003c/li\u003e\n\u003cli\u003eAnd you will get a message with the \u003ccode\u003ename\u003c/code\u003e of your Tool.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eStop \u003ccode\u003eDebug\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003eCloses Revit \u0026amp; Debug Mode\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"C# + Revit API: Lesson 0"}]