[{"content":"Pseudocode try { try to do this; } catch { if try gets exception, rollback and do this; } Exceptions Exceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.\ncatch // Exception as \u0026#34;e\u0026#34; to print the error { To catch a specific exceptions, catch as e; } catch { To catch all exceptions, do this; // but better to catch specific exceptions, // otherwise you will catch all necessary and unecessary exceptions. } finally { To run a final code regardless of outcome; } Use Don\u0026rsquo;t Abuse When you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!\nTry statements should be used only when you know there is a chance an exception could occur, and it cannot be otherwise dealt with.\nYou should make them as robust as possible, and use them only for parts of your code that need them.\nDON\u0026rsquo;T DO THIS! try { all code; } catch { oh no, somethis went wrong; } Example – Creating a Revit Sheet with Error Handling using Autodesk.Revit.DB; using Autodesk.Revit.UI; using System; public class CreateSheetExample { public void CreateSheet(Document doc, ElementId titleBlockId) { try { using (Transaction tx = new Transaction(doc, \u0026#34;Create New Sheet\u0026#34;)) { tx.Start(); try { // Attempt to create a sheet ViewSheet sheet = ViewSheet.Create(doc, titleBlockId); TaskDialog.Show(\u0026#34;Success\u0026#34;, $\u0026#34;Sheet \u0026#39;{sheet.Name}\u0026#39; created!\u0026#34;); tx.Commit(); } catch (Autodesk.Revit.Exceptions.ArgumentException argEx) { // Rollback and handle known Revit-specific error tx.RollBack(); TaskDialog.Show(\u0026#34;Error\u0026#34;, $\u0026#34;Invalid title block: {argEx.Message}\u0026#34;); } catch (Exception ex) { // Rollback for unexpected system-level errors tx.RollBack(); TaskDialog.Show(\u0026#34;Unexpected Error\u0026#34;, ex.Message); } } } finally { // Always run this, no matter success or failure TaskDialog.Show(\u0026#34;Info\u0026#34;, \u0026#34;Finished attempting to create a sheet.\u0026#34;); } } } ","permalink":"https://blog.aydrafting.com/posts/post-6/","summary":"\u003ch1 id=\"pseudocode\"\u003ePseudocode\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e to \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e gets exception, rollback and \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"exceptions\"\u003eExceptions\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// Exception as \u0026#34;e\u0026#34; to print the error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tTo \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e a specific exceptions, \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tTo \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e all exceptions, \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// but better to catch specific exceptions, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// otherwise you will catch all necessary and unecessary exceptions.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efinally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tTo run a final code regardless of outcome;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"use-dont-abuse\"\u003eUse Don\u0026rsquo;t Abuse\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!\u003c/p\u003e","title":"C# + Revit API: Lesson 6 - `if` Statements"},{"content":"if // Condition { run if condition is true; } else // If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether { run if condition is false; } else if Statement if // Condition { run if condition is true; } else if // Condition { run if there are more conditions; } else // If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether { run if condition is false; } Shorthand if Statements value = condition?then:else; Nearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it\u0026rsquo;s a simple one liner task.\nExample using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; using Nice3point.Revit.Toolkit.External; using Microsoft.VisualBasic; namespace guRoo.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { //TaskDialog.Show(Document.Title, \u0026#34;Hot reload!\u0026#34;); string input = Interaction.InputBox(\u0026#34;Enter a number:\u0026#34;, \u0026#34;Input Required\u0026#34;, \u0026#34;0\u0026#34;); if (!int.TryParse(input, out int i)) { TaskDialog.Show(Document.Title, \u0026#34;Invalid number entered.\u0026#34;); return; } // Shorthand version // string s = i == 3 ? \u0026#34;i is 2\u0026#34; : \u0026#34;i is not 2\u0026#34;; string outcome; if (i == 2) { outcome = \u0026#34;i is 2\u0026#34;; } else if (i == 3) { outcome = \u0026#34;i is 3\u0026#34;; } else { outcome = \u0026#34;i is neither 2 nor 3\u0026#34;; } TaskDialog.Show(Document.Title, outcome); } } } ","permalink":"https://blog.aydrafting.com/posts/post-5/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trun \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e condition \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trun \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e condition \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"else-if-statement\"\u003e\u003ccode\u003eelse if\u003c/code\u003e Statement\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trun \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e condition \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trun \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e there are more conditions;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\trun \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e condition \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"shorthand-if-statements\"\u003eShorthand \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evalue\u003c/span\u003e = condition?then:\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eNearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it\u0026rsquo;s a simple one liner task.\u003c/p\u003e","title":"C# + Revit API: Lesson 6 - `if` Statements"},{"content":" They control logic and flow in our tools. We will have a good understanding of core statements we can use to build Revit Add-ins.\nLogical Operators x == y =\u0026gt; true if x is equal to y x != y =\u0026gt; true if x is not equal to y x \u0026gt; y =\u0026gt; true if x is greater than y x \u0026lt; y =\u0026gt; true if x is less than y x \u0026gt;= y =\u0026gt; true if x greater than or equals to y x \u0026lt;= y =\u0026gt; true if x less than or equals to y\nx || y =\u0026gt; true if x OR y are true x \u0026amp;\u0026amp; y =\u0026gt; true if x AND y are true !(x) =\u0026gt; true if not x (can also use \u0026rsquo;not\u0026rsquo; x) x ^ y =\u0026gt; true if x OR y are true, but not both\nNull Operations / Operands x?.Method() =\u0026gt; If x is null, Method() will NOT run x ??= value =\u0026gt; If x is null, set it to value specified x is null =\u0026gt; True if x is Null, False if it\u0026rsquo;s not Null if (x) =\u0026gt; if x is Null, it yields Null or false\n","permalink":"https://blog.aydrafting.com/posts/post-4/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThey control logic and flow in our tools.\nWe will have a good understanding of core statements we can use to build Revit Add-ins.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"logical-operators\"\u003eLogical Operators\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003ex == y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue  if x is equal to y\u003c/em\u003e\n\u003ccode\u003ex != y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is not equal to y\u003c/em\u003e\n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is greater than y\u003c/em\u003e\n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is less than y\u003c/em\u003e\n\u003ccode\u003ex \u0026gt;= y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x greater than or equals to y\u003c/em\u003e\n\u003ccode\u003ex \u0026lt;= y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x less than or equals to y\u003c/em\u003e\u003c/p\u003e","title":"C# + Revit API: Lesson 5 - Core C# Statements"},{"content":"Boolean bool true (1) false (0) Integer int Whole number:\n1, 2, 3, etc.\nNumbers come in different formats but by default they are signable (can be negative).\nTypically, they use 32 bits based.\nDouble double Decimal number:\n0.0, 1.5, 6.592, -5.00, etc.\nDoubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.\nCharacters char \u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, etc.\nChars store a single character (which can be a number - it is ASCII based behind the scenes). They use 1 byte (8 bits).\nStrings str \u0026ldquo;string\u0026rdquo;, \u0026ldquo;example\u0026rdquo;, etc.\nStrings are technically an array of characters (a consecutive set of [[chars]] in memory). They are abstracted for us in C#, and you might sometimes see them called a [[char*]] (CharStar).\nNull pointer null Always written as [[null]]\nNulls are a special object that points to the first byte in memory. It represents an absence of data and may commonly be caused through an error or exception.\nNullable Types Most objects you use will be [[Nullable]], in that they can be represented and set to [[null]]. [[Integers]] are an example of a type which cannot be set to [[null]] unless you declare them as [[nullable]] (which makes them a different type). Revit API Classes are generally nullable. Lists or Arrays? [[Arrays]] are important for memory management eventually, but I recommend skipping the use of them initially.\nThe Revit API generally works with [[Lists]].\n[[Lists]] - differ to [[arrays]] in that we can add additional objects to them, whereas [[arrays]] have a fixed size upon creation.\nWe will learn about [[Lists]] later.\nCompiling Generally, [[C#]] code will be faster than languages such as [[Python]] as it is compiled before execution. Compiling refers to the conversion of written code into machine code (1\u0026rsquo;s and 0\u0026rsquo;s). When we build our solution before running it, it is turning our code into a [[Dynamic Linked Library]] ([[DLL]]) which is executed by the application. Languages like [[Python]] instead use [[interpreters]]. Declaring a Variable in C# [[modifier(s)]] type variableName;\n[[public]] [[private]] [[static]] [[internal]] [[virtual]] We will return to access modifiers later, for now we can avoid using them in basic examples.\nWe tell the compiler what [[type]] we need first.\nWe then tell it the [[variableName]] to assign to it.\nAssign a Variable in C# [[type]] [[variableName]] = value;\nWe can assign a value upon creating the variable.\nOr, we can assign it later on\u0026hellip;\ntype variableName; // \u0026lt;= Initialize variableName = value; // \u0026lt;= Assign When we assign a value, you need to give it a valid value for its [[type]]: int myInteger = 5; The assigned value must suit the variable type upon assignment. Type safety in C# will ensure this. Examples below would cause an error: int myInteger = 3.5; // \u0026lt;= Should be a double int myInteger = \u0026#34;5\u0026#34;; // \u0026lt;= Should be a string Creating a List in C# List\u0026lt;int\u0026gt;()myList = new List\u0026lt;int\u0026gt;(); We can also declare a list and store objects to is: List\u0026lt;int\u0026gt;()myList = new List\u0026lt;int\u0026gt;(){1,2,3}; We will come back to the braces later. Making use of var var myList = new List\u0026lt;int\u0026gt;(); If the value being assigned on the right implies a specific type, we can instead use the var keyword to simplify our code. This is generally best practice. However, if the right side is ambiguous, declare the type on the left. This will matter when we learn about class inheritance. var myList = new List\u0026lt;object\u0026gt;(); Object is a special type which allows the storage of many things. It can be a useful but ambiguous return type for functions and classes through which you might need to pass many things in/out of. We will learn in a later lesson about type casting, where the object class can be a useful intermediate type to take advantage of. Inheritance 101 The RevitAPI uses a lot of class inheritance. Metaphorical example:\nDogs and Cats are both Animals Dogs are not Cats Cats are not Dogs But the they both inherit the Animal RevitAPI Example:\nViews and Floors are both Elements\nViews are not Floors\nFloors are not Views\nBut they both inherit the Element\nElements have an ElementID property\nViews and Floors have an ElementID from Element Class\nFloors have a SlabShapeEditor Elements DO NOT Views DO NOT Basic Type Checking object is type variableName This syntax can be used to logically check if an object is or inherits a specific type/class. We can assign a variable to this object as that type in a statement (e.g. if) to locally work with it as that type instead. We now have\u0026hellip; A basic understanding of:\nHow computation works, Basic variable types/classes How to declare variables How to assign variables Inheritance We will be applying these concepts soon.\n","permalink":"https://blog.aydrafting.com/posts/post-3/","summary":"\u003ch1 id=\"boolean-bool\"\u003eBoolean \u003ccode\u003ebool\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003etrue (1)\u003c/li\u003e\n\u003cli\u003efalse (0)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"integer-int\"\u003eInteger \u003ccode\u003eint\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWhole number:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e1, 2, 3, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNumbers come in different formats but by default they are signable (can be negative).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTypically, they use 32 bits based.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"double-double\"\u003eDouble \u003ccode\u003edouble\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDecimal number:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e0.0, 1.5, 6.592, -5.00, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDoubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"characters-char\"\u003eCharacters \u003ccode\u003echar\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, etc.\u003c/p\u003e","title":"C# + Revit API: Lesson 3 - Fundamental Types of Data in C#"},{"content":"I suggest taking CS50 Course to understand the basics of Programming True \u0026amp; False 0 and 1 Base 2 numbering system 1 0 1 x x x 4 2 1 = 5 In other words: 2 2 2 x x x 2 1 0 4 2 1 = 5 1 0 1 We call these bits Eight bits = 1 byte Memory is addressed into bytes ASCII Tables bring meaning to what various bytes represent: ASCII 48 = 0 (00) 110000 1 * 2^4 = 16 1 * 2^5 = 32 16 + 32 = 48 48 = 0 (in ASCII Table) Pointers = Structs (in C) Pointers are hexadecimal based values that identify an address in computer memory.\nIf you write in C, you need to manage pointers and check memory in and out as you work.\nC# bypasses this using a garbage collector (GC).\nPointers and structs allow us to connect bytes into lists. We can also array objects adjacently.\nIn C#, this is all managed for you.\n📊 Breakdown Struct 1 (First Node): Object: Data (e.g., 10) Null: No previous node — this is the start of the list. Pointer to next: Points to Struct 2 Struct 2 (Middle Node): Object: Data (e.g., 20) Pointer to previous: Points back to Struct 1 Pointer to next: Points forward to Struct 3 Struct 3 (Last Node): Object: Data (e.g., 30) Pointer to previous: Points back to Struct 2 Null: No next node — this is the end of the list. 🔁 Why use this? This doubly linked list structure allows you to:\nMove forward and backward through the list, Insert or remove elements in the middle more easily than with arrays. Code Example: #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; typedef struct Node { int value; struct Node* prev; struct Node* next; } Node; int main() { // Create 3 nodes Node* first = malloc(sizeof(Node)); Node* second = malloc(sizeof(Node)); Node* third = malloc(sizeof(Node)); // Assign values first -\u0026gt;value = 10; second-\u0026gt;value = 20; third -\u0026gt;value = 30; // Connect them first-\u0026gt;prev = NULL; first-\u0026gt;next = second; second-\u0026gt;prev = first; second-\u0026gt;next = third; third-\u0026gt;prev = second; third-\u0026gt;next = NULL; // Print values printf(\u0026#34;Forward: %d -\u0026gt; %d -\u0026gt; %d\\n\u0026#34;, first-\u0026gt;value, second-\u0026gt;value, third-\u0026gt;value); printf(\u0026#34;Backward: %d \u0026lt;- %d \u0026lt;- %d\\n\u0026#34;, third-\u0026gt;value, second-\u0026gt;value, first-\u0026gt;value); // Clean up free(third); free(second); free(first); return 0; } using System; class Node { public int Value; public Node? Prev; public Node? Next; } class Program { static void Main() { // Create 3 nodes var first = new Node { Value = 10 }; var second = new Node { Value = 20 }; var third = new Node { Value = 30 }; // Connect them first.Next = second; second.Prev = first; second.Next = third; third.Prev = second; // Traverse forward Console.WriteLine(\u0026#34;Forward:\u0026#34;); for (var current = first; current != null; current = current.Next) Console.Write(current.Value + \u0026#34; \u0026#34;); Console.WriteLine(\u0026#34;\\nBackward:\u0026#34;); for (var current = third; current != null; current = current.Prev) Console.Write(current.Value + \u0026#34; \u0026#34;); } } 🧠 Insertion and Removal in a Linked List In a linked list (especially a doubly linked list like the one we just looked at), the two most common operations are:\n➕ Insertion Adding a new node between existing nodes.\nFor example, inserting a new value between first and second:\nBefore:\nfirst \u0026lt;-\u0026gt; second After inserting new node (e.g., 15):\nfirst \u0026lt;-\u0026gt; newNode (15) \u0026lt;-\u0026gt; second To do this in code:\nCreate the new node. Update the next of the previous node. Update the prev of the next node. Link the new node’s prev and next. ➖ Removal Deleting a node from the list.\nFor example, removing second:\nBefore:\nfirst \u0026lt;-\u0026gt; second \u0026lt;-\u0026gt; third After removal:\nfirst \u0026lt;-\u0026gt; third To do this in code:\nSet first.next = third. Set third.prev = first. (In C) Free the memory of second. ✅ GOAL: We’ll insert a node with value 15 between nodes first (10) and second (20), and later remove it.\n🧱 C Code 🔧 Insertion in C: // Inserting between first and second Node* newNode = malloc(sizeof(Node)); newNode-\u0026gt;value = 15; // Link new node newNode-\u0026gt;prev = first; newNode-\u0026gt;next = second; // Update existing links first-\u0026gt;next = newNode; second-\u0026gt;prev = newNode; ❌ Removal in C: // Removing the newNode (15) first-\u0026gt;next = second; second-\u0026gt;prev = first; // Free memory free(newNode); 🧱 C# Code 🔧 Insertion in C#: // Inserting between first and second var newNode = new Node { Value = 15 }; // Link new node newNode.Prev = first; newNode.Next = second; // Update existing links first.Next = newNode; second.Prev = newNode; ❌ Removal in C#: // Removing the newNode (15) first.Next = second; second.Prev = first; // In C#, memory is handled automatically // So we don\u0026#39;t call free(); GC will collect it later ✅ Summary Operation C C# Insert Use malloc, fix 4 pointers Use new, fix 4 references Remove Fix 2 pointers, free() memory Fix 2 references, GC does cleanup ","permalink":"https://blog.aydrafting.com/posts/post-2/","summary":"\u003ch4 id=\"i-suggest-taking-cs50-course-to-understand-the-basics-of-programming\"\u003eI suggest taking \u003ca href=\"https://pll.harvard.edu/course/cs50-introduction-computer-science\"\u003eCS50 Course\u003c/a\u003e to understand the basics of Programming\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eTrue \u0026amp; False\u003c/li\u003e\n\u003cli\u003e0 and 1\u003c/li\u003e\n\u003cli\u003eBase 2 numbering system\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1 0 1\nx x x\n4 2 1 = 5 \n\t\nIn other words:\n2 2 2\nx x x\n2 1 0\n\t \n4 2 1 = 5 \n1 0 1\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eWe call these bits \nEight bits = 1 byte\nMemory is addressed into bytes\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ascii-tables-bring-meaning-to-what-various-bytes-represent\"\u003eASCII Tables bring meaning to what various bytes represent:\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eASCII 48 = 0\n(00) 110000\n1 * 2^4 = 16\n1 * 2^5 = 32\n16 + 32 = 48\n48 = 0 (in ASCII Table)\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"pointers--structs-in-c\"\u003ePointers = Structs (in C)\u003c/h1\u003e\n\u003cp\u003ePointers are hexadecimal based values that identify an address in computer memory.\u003c/p\u003e","title":"C# + Revit API: Lesson 2 - Bits \u0026 Bytes, ASCII Table, Pointers \u0026 Structs - Programming 101"},{"content":"This post explains one concrete command—line by line—so a beginner can follow without extra abstractions.\nWhat this command does when you click your add-in button:\nTries to create a sheet (using an invalid title block on purpose → shows how error handling works).\nCollects up to 10 existing sheets and formats their numbers/names.\nDisplays the result in a WPF dialog via a ViewModel.\n✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\nThe Command (Full Code) using Autodesk.Revit.Attributes; using Nice3point.Revit.Toolkit.External; using UKON.Views; using UKON.ViewModels; namespace UKON.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); var titleBlockId = ElementId.InvalidElementId; string resultMessage = \u0026#34;\u0026#34;; using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } // Get sheet information to display var allSheets = new FilteredElementCollector(Document). OfClass(typeof(ViewSheet)). ToElements(). ToList(); if (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets: \\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); } } } What Each Part Does (Beginner-Friendly) 1) Imports using Autodesk.Revit.Attributes; // [Transaction(...)] attribute using Nice3point.Revit.Toolkit.External; // ExternalCommand base + Host DI using UKON.Views; // WPF Window (UKONView) using UKON.ViewModels; // ViewModel (UKONViewModel) Revit attributes let you declare transaction behaviour.\nNice3point Toolkit provides a simplified ExternalCommand base (gives you Document) and DI access via Host.GetService\u0026lt;T\u0026gt;().\nViews/ViewModels are your WPF MVVM types.\n2) Class \u0026amp; Attributes [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand StartupCommand runs when the user clicks your button.\n[Transaction(TransactionMode.Manual)] = you start/commit/rollback changes.\nExternalCommand (Nice3point) simplifies the Revit command pattern.\nUsedImplicitly is an analyzer hint (e.g., JetBrains) so tooling doesn’t flag it as “unused.”\n3) Getting the ViewModel var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); Pulls a ViewModel instance from DI so the dialog can display results via data binding. 4) Intentionally Invalid Title Block var titleBlockId = ElementId.InvalidElementId; // invalid on purpose string resultMessage = \u0026#34;\u0026#34;; We force a failure to demonstrate safe error handling.\nresultMessage will collect feedback for the user.\n5) Transaction + Error Handling Around ViewSheet.Create using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } Revit is read-only unless you’re inside a Transaction.\nCreating a sheet with an invalid title block throws ArgumentException → we rollback safely and show the message.\nAny unexpected error also triggers a rollback.\nThis is the core pattern you’ll reuse for any change in Revit: Start → Do work → Commit or RollBack on error.\n6) Collecting Existing Sheets var allSheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .ToElements() .ToList(); Use FilteredElementCollector to find elements in the document.\nHere we collect all sheets.\nThen we format a short list for display:\nif (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets:\\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } We show up to 10 sheets as \u0026ldquo;A101 - Floor Plan\u0026rdquo;.\nIf there are none, we display that clearly.\n7) Show the Result in WPF viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); Set the ViewModel property (MVVM). Open your WPF dialog to show the message. Why the Sheet Creation “Fails” (and How to Make It Succeed) It fails because we passed ElementId.InvalidElementId. To actually create a sheet, find a real title block type first:\nvar titleBlockId = new FilteredElementCollector(Document) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); // throws if none exist Replace the invalid id with this titleBlockId before ViewSheet.Create(\u0026hellip;) and the command will create a sheet (assuming at least one title block type is loaded).\nOptional Cleanups (Beginner-Safe) Safer casting with LINQ: var sheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .Cast\u0026lt;ViewSheet\u0026gt;() .ToList(); StringBuilder for long messages (not required, just tidy for larger outputs).\nKey Takeaways Always use a Transaction to modify the model.\nHandle exceptions and rollback on failure—never leave a transaction open.\nCollectors are how you find elements efficiently.\nMVVM + WPF: set data on the ViewModel; the dialog updates automatically.\nFor creating sheets, you need a valid title block type (OST_TitleBlocks).\n","permalink":"https://blog.aydrafting.com/posts/post-1/","summary":"\u003cp\u003eThis post explains \u003cstrong\u003eone concrete command\u003c/strong\u003e—line by line—so a beginner can follow without extra abstractions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat this command does when you click your add-in button:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTries to create a \u003cstrong\u003esheet\u003c/strong\u003e (using an \u003cstrong\u003einvalid\u003c/strong\u003e title block on purpose → shows how error handling works).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCollects up to \u003cstrong\u003e10 existing sheets\u003c/strong\u003e and formats their numbers/names.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDisplays the result in a \u003cstrong\u003eWPF dialog\u003c/strong\u003e via a ViewModel.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\u003c/p\u003e","title":"C# + Revit API: Lesson 1 — A Simple Walkthrough of the Command"},{"content":"Why C#? Scalability Start with: Install Visual Studio 2022 Community Install .NET SDKs (.NET4.8 \u0026amp; .NET8) Install Nice3Point Templates Solution Start a solution / project Create a new project Choose the Revit Addin (Nic3Point) Template Configure your new project Name of the project Location Solution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects) Additional Information Add-in type -\u0026gt; Application User Interface -\u0026gt; None IoC -\u0026gt; Disabled Serilog support -\u0026gt; unchecked Explore Visual Studio Properties \u0026amp; Solution Explorer (Project Browser in Revit) Error \u0026amp; Output CSProj -\u0026gt; Preconfigured up to Revit v.2025 .addin -\u0026gt; Change GUID (The rest we will change later) Application Class: Tells your addin how to begin and how to finish when Revit opens and closes. Class: External Application Method: OnStartup() Will run \u0026ldquo;Create Ribbon()\u0026rdquo; Creates a Panel Adds a PushButton to that Panel With 2 Icons Our Application OnStartup When it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo; And CreateRibbon is a defined function below that: Creates a panel This is possible due to pre-configured Revit API that we are using CreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit. Creates a button Same for the Button AddPushButton Method in Revit API - Creates a button Commands Folder Core Code Currently: Task Dialog - Shows the name of the addin ExternalCommand, but we should use IExternalCommand This is the part that writes the logic for your button Once you click the button, whatever is under Commands Folder connected to the button will be executed. If you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;); Once you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo; Resources: Icons Everything is saved in windows explorer Configurations: Debug and Release Per Revit Version from R20 to R25 References: Under: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025]. DLL Files that you can reference to your project to build something. You could even add an excel package to work with Excel, will do that later. Build and test the first plugin Build the solution by clicking on Run (Play Button) next to Any CPU. Lauches Revit (Version that you pre-configured) Always Load your Addin What happened behind the scenes: VS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit. That became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier. Everything is already set and pathed for you for the ease of starting and launching plugins. Go to New Project Find your new panel in the panel tabs on the top of Revit User Interface. Find your Addin / Plugin Click on it And you will get a message with the name of your Tool. Stop Debug Closes Revit \u0026amp; Debug Mode ","permalink":"https://blog.aydrafting.com/posts/post-0/","summary":"\u003ch3 id=\"why-c\"\u003eWhy C#?\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eScalability\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"start-with\"\u003eStart with:\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://visualstudio.microsoft.com/downloads/\"\u003eInstall Visual Studio 2022 Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dotnet.microsoft.com/en-us/download/visual-studio-sdks\"\u003eInstall .NET SDKs (.NET4.8 \u0026amp; .NET8)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Nice3point/RevitTemplates\"\u003eInstall Nice3Point Templates\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eStart a solution / project\n\u003col\u003e\n\u003cli\u003eCreate a new project\u003c/li\u003e\n\u003cli\u003eChoose the Revit Addin (Nic3Point) Template\u003c/li\u003e\n\u003cli\u003eConfigure your new project\n\u003col\u003e\n\u003cli\u003eName of the project\u003c/li\u003e\n\u003cli\u003eLocation\u003c/li\u003e\n\u003cli\u003eSolution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdditional Information\n\u003col\u003e\n\u003cli\u003eAdd-in type -\u0026gt; Application\u003c/li\u003e\n\u003cli\u003eUser Interface -\u0026gt; None\u003c/li\u003e\n\u003cli\u003eIoC -\u0026gt; Disabled\u003c/li\u003e\n\u003cli\u003eSerilog support -\u0026gt; unchecked\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eExplore Visual Studio\n\u003col\u003e\n\u003cli\u003eProperties \u0026amp; Solution Explorer (Project Browser in Revit)\u003c/li\u003e\n\u003cli\u003eError \u0026amp; Output\u003c/li\u003e\n\u003cli\u003eCSProj -\u0026gt; Preconfigured up to Revit v.2025\u003c/li\u003e\n\u003cli\u003e.addin -\u0026gt; Change GUID (The rest we will change later)\u003c/li\u003e\n\u003cli\u003eApplication Class:\n\u003col\u003e\n\u003cli\u003eTells your addin how to begin and how to finish when Revit opens and closes.\u003c/li\u003e\n\u003cli\u003eClass: External Application\u003c/li\u003e\n\u003cli\u003eMethod: OnStartup()\n\u003col\u003e\n\u003cli\u003eWill run \u0026ldquo;Create Ribbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eCreates a \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eAdds a \u003cstrong\u003ePushButton\u003c/strong\u003e to that \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eWith 2 \u003cstrong\u003eIcons\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Application\n\u003col\u003e\n\u003cli\u003eOnStartup\u003c/li\u003e\n\u003cli\u003eWhen it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd CreateRibbon is a defined function below that:\n\u003col\u003e\n\u003cli\u003eCreates a panel\n\u003col\u003e\n\u003cli\u003eThis is possible due to pre-configured Revit API that we are using\u003c/li\u003e\n\u003cli\u003eCreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCreates a button\n\u003col\u003e\n\u003cli\u003eSame for the Button\u003c/li\u003e\n\u003cli\u003eAddPushButton Method in Revit API - Creates a button\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCommands Folder\n\u003col\u003e\n\u003cli\u003eCore Code\u003c/li\u003e\n\u003cli\u003eCurrently: Task Dialog - Shows the name of the addin\n\u003col\u003e\n\u003cli\u003eExternalCommand, but we should use IExternalCommand\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eThis is the part that writes the logic for your button\u003c/li\u003e\n\u003cli\u003eOnce you click the button, whatever is under Commands Folder connected to the button will be executed.\u003c/li\u003e\n\u003cli\u003eIf you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;);\n\u003col\u003e\n\u003cli\u003eOnce you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eResources:\n\u003col\u003e\n\u003cli\u003eIcons\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eEverything is saved in windows explorer\u003c/li\u003e\n\u003cli\u003eConfigurations:\n\u003col\u003e\n\u003cli\u003eDebug and Release\u003c/li\u003e\n\u003cli\u003ePer Revit Version from R20 to R25\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eReferences:\n\u003col\u003e\n\u003cli\u003eUnder: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025].\u003c/li\u003e\n\u003cli\u003eDLL Files that you can reference to your project to build something.\u003c/li\u003e\n\u003cli\u003eYou could even add an excel package to work with Excel, will do that later.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild and test the first plugin\n\u003col\u003e\n\u003cli\u003eBuild the solution by clicking on Run (Play Button) next to Any CPU.\u003c/li\u003e\n\u003cli\u003eLauches Revit (Version that you pre-configured)\u003c/li\u003e\n\u003cli\u003eAlways Load your Addin\u003c/li\u003e\n\u003cli\u003eWhat happened behind the scenes:\n\u003col\u003e\n\u003cli\u003eVS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit.\u003c/li\u003e\n\u003cli\u003eThat became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier.\u003c/li\u003e\n\u003cli\u003eEverything is already set and pathed for you for the ease of starting and launching plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eGo to New Project\n\u003col\u003e\n\u003cli\u003eFind your new panel in the panel tabs on the top of Revit User Interface.\u003c/li\u003e\n\u003cli\u003eFind your Addin / Plugin\u003c/li\u003e\n\u003cli\u003eClick on it\u003c/li\u003e\n\u003cli\u003eAnd you will get a message with the name of your Tool.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eStop Debug\n\u003col\u003e\n\u003cli\u003eCloses Revit \u0026amp; Debug Mode\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"C# + Revit API: Lesson 0"}]