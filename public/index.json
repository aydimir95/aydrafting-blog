[{"content":" 1. Introduction Project Folder Structure Commands Extensions Forms General Resources Utilities These are folders which contain various files that our toolbar will utilize. Note that these are not necessarily aligned with namespaces (which will be covered later) 2. What is a Class? In C#, classes are templates related to the creation and management of objects. There are many predefined classes available in C# and the Revit API. We use them for a wide range of things and will regularly be creating and developing our own classes. Accessing properties / methods of a Class Property: object.Property -\u0026gt; to access a property Method: Object.Method(argument1, argument2, etc) -\u0026gt; to access a method Namespaces When we create classes, we first tell them where they belong in our project. Namespaces can be nested within others using a dot separator, eventually tied back to our .addin namespace. // Revit API using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; // geeWiz - internal project objects using geeWiz.Extensions; using geeWiz = geeWiz.Forms; using geeWiz = geeWiz.Utilities.Workshare_Utils; // The class belongs to the Commands namespace namespace geeWiz.Cmds_Audit { // Cmd_DeletePatterns // Cmd_PurgeRooms // Cmd_PurgeTemplates // Cmd_PurgeFilters } Basic Class Anatomy modifers class ClassName : Interface(s) Constructor (optional) Properties (optional) Methods (optional) Access modifiers control how this code can be accessed inside and outside your project. You will typically need to declare at least on of public/private, And sometimes static for the purposes we will use them for early on. Static Modifier The static access modifier is a difficult concept to grasp at first, so we will simplify it somewhat. Classes with a static modifier do not support the creation of objects of that class (instantiated). We commonly take advantage of this to create classes which behave more like toolkits, where the class itself acts more like a singe object we can call upon to do things for us. So basically, the Static modifier is one instrument that you could use to build a complex script with.\nPublic and Private Modifier The public modifier lets you access something anywhere in your project. The private modifier limits access to the same class instead (generally for behind-the-scenes code in the class itself). There are other modifiers, but let\u0026rsquo;s keep it simple.\nClass Declaration modifiers class ClassName : Interface(s)\nAfter our modifiers we must define our class by using the keyword \u0026lsquo;class\u0026rsquo;, followed by a Class Name.\nGenerally, most people use PascalCase for class names, and you should choose names which are not reserved elsewhere.\nInterface(s) (Optional) modifiers class ClassName : Interface(s)\nInterface - acts as a template that a class should follow. It\u0026rsquo;s like a contract that is formed with your class -\u0026gt; the class must have certain methods / properties / behaviours that this interface would provide to it.\nFormally:\nInterfaces are optional agreements that the class must form with predefined class templates. They usually provide methods and properties which would otherwise be cumbersome to access/define, as well as ensuring the class follows some requirements. Referencing a Class Static example (access without creating an instance): var myInstance = ClassName; A static class or member belongs to the class itself, not to any specific object. You use the class name to access it directly. You can call its methods or properties right away — no need to create an object. Because it’s static, you cannot use new to make an instance of it. Example:\n// Accessing a static property without creating Math object Console.WriteLine(Math.PI); Non-static example – Create and use an object var myInstance = new ClassName(); A non-static class needs to be instantiated (created) before you can use it. You create a new object using the new keyword and parentheses () to run its constructor. The variable myInstance now refers to this new object, and you can use its methods and properties. The var keyword tells the compiler to figure out the variable’s type automatically. Example:\nvar car = new Car(); car.Drive(); // Calling an instance method Homework Let\u0026rsquo;s do the following:\nSet up a class file (.cs) in our project, Create a namespace for it, Define our class (non-static, public). Its purpose is to store and process results from forms we create.\nSolution // 1. Create a new folder (if you haven\u0026#39;t already) and call it \u0026#39;Forms\u0026#39; // 2. Add a new item to \u0026#39;Forms\u0026#39; -\u0026gt; pick the \u0026#39;Class\u0026#39; type -\u0026gt; name it: \u0026#34;Custom.cs\u0026#34; using System; using System.Collection.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace guRoo.Forms // try to make your namespace follow your folder structure { public static class Custom // change to \u0026#39;public\u0026#39; + \u0026#39;static\u0026#39; class { } public class FormResult // add another \u0026#39;non-static\u0026#39; class { } } Here’s a cleaner, beginner-friendly rewrite with improved structure, simpler explanations, and a working example that will actually compile.\nI’ve also made the terminology more precise and added a clear generic vs. specific constructor example.\n3. Constructors Optional but very useful\nA constructor is a special method that runs automatically when you create a new object from a class:\nIt tells the class how it should start — for example, setting initial values. If you don’t add a constructor, C# uses a default constructor that simply sets properties to their default values, or formally: C# provides an implicit parameterless constructor that sets members to their type defaults. You can make your own constructor to set specific values when an object is created. A class can have multiple constructors (called constructor overloading), which is a form of polymorphism. Constructor Syntax class ClassName { // Constructor with parameters public ClassName(type parameterName) { // Initialization logic } } Example: Generic vs. Specific Constructor Let’s create a FormResult class with two constructors:\nGeneric constructor – takes no arguments (creates a form with default values) Specific constructor – allows setting a custom status when creating the form namespace guRoo.Forms // Use namespaces that match your folder structure { public class FormResult { public string Status { get; set; } // 1. Generic constructor (no parameters) public FormResult() { Status = \u0026#34;Pending\u0026#34;; // Default value } // 2. Specific constructor (with parameter) public FormResult(string status) { Status = status; } } } Using the Constructors // Using the generic constructor var form1 = new FormResult(); Console.WriteLine(form1.Status); // Output: Pending // Using the specific constructor var form2 = new FormResult(\u0026#34;Cancelled\u0026#34;); Console.WriteLine(form2.Status); // Output: Cancelled Homework In this exercise, you’ll learn how to create two different constructors in a class — one that uses a default value and one that accepts a custom value when creating an object.\nWe’ll do this in a Revit API context by making a simple SheetResult class that stores the name of a sheet.\nYour task:\nCreate a new class called SheetResult in Custom.cs. Add: A generic constructor (no parameters) that sets the SheetName property to \u0026ldquo;Untitled Sheet\u0026rdquo;. A specific constructor (with a parameter) that accepts a string and sets SheetName to the provided value. Note: if you add the specific constructor, also add the parameterless one yourself. In Custom.cs, create a static method ShowSheetResultDemo() that: Creates one SheetResult using the generic constructor. Creates another SheetResult using the specific constructor with a custom name. Displays both names in a TaskDialog. In your StartupCommand.Execute() method, call Custom.ShowSheetResultDemo() to run the demo inside Revit. 💡 This will help you understand how constructors work in C#, and how you can use them to set up different ways of creating an object in your Revit add-ins.\nSolution (Copy Paste -\u0026gt; Compile \u0026amp; Test it in Revit) Custom.cs using Autodesk.Revit.UI; namespace guRoo.Forms { public static class Custom // helper you can call from anywhere { public static void ShowSheetResultDemo() { var sheet1 = new SheetResult(); // generic var sheet2 = new SheetResult(\u0026#34;A101 - Floor Plan\u0026#34;); // specific TaskDialog.Show(\u0026#34;Sheet Results\u0026#34;, $\u0026#34;Generic constructor: {sheet1.SheetName}\\n\u0026#34; + $\u0026#34;Specific constructor: {sheet2.SheetName}\u0026#34;); } } public class SheetResult { public string SheetName { get; set; } // Parameterless (generic) constructor public SheetResult() =\u0026gt; SheetName = \u0026#34;Untitled Sheet\u0026#34;; // Constructor with parameters (specific) public SheetResult(string sheetName) =\u0026gt; SheetName = sheetName; } } StartupCommand.cs using guRoo.Forms; // add this public override void Execute() { // ...your existing code... Custom.ShowSheetResultDemo(); // \u0026lt;-- shows the dialog from Custom.cs } 4. Properties Properties define the data that a class can store and expose.\nWhile you can make properties publicly accessible, best practice is to keep the underlying data private (inside the class) and control access through public get and set accessors.\nThis approach:\nKeeps the internal state of your object safe from unintended changes. Lets you add validation or extra logic when reading or writing values. In simple examples, we’ll mostly use auto-implemented properties (public string Name { get; set; }), but we’ll also show how to back them with private fields when you need more control.\nDeclaring a property A property is like a named piece of data that belongs to a class. The simplest form is an auto-implemented property, which C# creates for you without needing to write extra code:\nClass declaration { modifiers type PropertyName{get;set} } public class Person { public string Name { get; set; } // auto property } Using a private field Sometimes you want more control over how a property’s value is stored or changed. In that case, you can store the value in a private field and use a property to get and set it.\nclass ClassName { private type fieldName; // lowerCamelCase for fields public type PropertyName // PascalCase for properties { get { return fieldName; } set { fieldName = value; } } } Example: public class Person { private string name; // field public string Name // property { get { return name; } set { name = value; } } } 💡 Tip: By convention, fields use camelCase and properties use PascalCase. This makes it easier to spot them in your code.\nHomework Properties let us store and access data in a class. In our earlier example, the SheetResult class only had a SheetName property.\nYour task:\nLet’s expand it to include more information — for example, the SheetNumber And show both a simple auto-property and a property backed by a private field. Solution Custom.cs using Autodesk.Revit.UI; namespace guRoo.Forms { // ===== STATIC CLASS ===== public static class Custom { // ===== METHOD ===== public static void ShowSheetResultDemo() { // Create objects var sheet1 = new SheetResult(); // generic constructor var sheet2 = new SheetResult(\u0026#34;A101 - Floor Plan\u0026#34;, \u0026#34;S-001\u0026#34;); // specific constructor // Show results in Revit dialog TaskDialog.Show(\u0026#34;Sheet Results\u0026#34;, $\u0026#34;Generic constructor: {sheet1.SheetName}, Number: {sheet1.SheetNumber}\\n\u0026#34; + $\u0026#34;Specific constructor: {sheet2.SheetName}, Number: {sheet2.SheetNumber}\u0026#34;); } // ===== END METHOD ===== } // ===== END STATIC CLASS ===== // ===== CLASS ===== public class SheetResult { // ===== PROPERTIES ===== // Auto-implemented property public string SheetName { get; set; } // Private field + property with get/set logic private string sheetNumber; public string SheetNumber { get { return sheetNumber; } set { // Example: basic validation if (string.IsNullOrWhiteSpace(value)) sheetNumber = \u0026#34;No Number\u0026#34;; else sheetNumber = value; } } // ===== END PROPERTIES ===== // ===== CONSTRUCTORS ===== // Generic constructor public SheetResult() { SheetName = \u0026#34;Untitled Sheet\u0026#34;; SheetNumber = \u0026#34;No Number\u0026#34;; } // Specific constructor public SheetResult(string sheetName, string sheetNumber = \u0026#34;No Number\u0026#34;) { SheetName = sheetName; SheetNumber = sheetNumber; } // ===== END CONSTRUCTORS ===== } // ===== END CLASS ===== } What Changed? Auto property: SheetName — quick and simple, no custom logic. Property with private field: SheetNumber — lets us add validation before saving the value. Constructors updated so both values can be set when creating a SheetResult. Result in Revit When you run StartupCommand, you’ll still get your original workflow, but now the Custom.ShowSheetResultDemo() dialog will display both the sheet name and the sheet number, with “No Number” automatically set if no value is given.\n5. Methods A method is an action your class can perform.\nThink of it this way:\nProperties = what the object is (its data). Methods = what the object does (its behavior). Key points:\nMethods can take arguments (optional). Methods have a return type. If they return nothing, use void. Declaring a method class ClassName { modifiers returnType MethodName(optionalArguments) { // Code logic here return objectOfType; // omit if return type is void } } Example (continuing our SheetResult) We’ll extend SheetResult with a method that formats its data for display. This reinforces: field + property + constructor + method working together. using Autodesk.Revit.UI; namespace guRoo.Forms { // ------- CALLER (static helper you can invoke from your command) ------- public static class Custom { public static void ShowSheetResultDemo() { var s1 = new SheetResult(); // generic ctor var s2 = new SheetResult(\u0026#34;A101 - Floor Plan\u0026#34;, \u0026#34;S-001\u0026#34;); // specific ctor // Call a METHOD that uses the properties/field TaskDialog.Show(\u0026#34;Methods Demo\u0026#34;, $\u0026#34;s1 label: {s1.FormatLabel()}\\n\u0026#34; + $\u0026#34;s2 label: {s2.FormatLabel()}\u0026#34;); } } // ------- DATA MODEL (class with properties, field, constructors, methods) ------- public class SheetResult { // Properties public string SheetName { get; set; } // auto-property // Private field + property with simple validation private string _sheetNumber; // field (camelCase with leading underscore is common) public string SheetNumber { get =\u0026gt; _sheetNumber; set =\u0026gt; _sheetNumber = string.IsNullOrWhiteSpace(value) ? \u0026#34;No Number\u0026#34; : value; } // Constructors public SheetResult() { SheetName = \u0026#34;Untitled Sheet\u0026#34;; SheetNumber = \u0026#34;No Number\u0026#34;; } public SheetResult(string sheetName, string sheetNumber = \u0026#34;No Number\u0026#34;) { SheetName = sheetName; SheetNumber = sheetNumber; } // METHODS // Returns a formatted label combining the properties public string FormatLabel() { return $\u0026#34;{SheetNumber} - {SheetName}\u0026#34;; } // Example of a void method that changes state (optional) public void Rename(string newName) { SheetName = string.IsNullOrWhiteSpace(newName) ? SheetName : newName; } } } Homework Create a class Add some properties Give it a constructor Demonstrate how to use a field Demonstrate how to make a method Reference our class in another part of your code base Solution Custom.cs using System.Collections.Generic; using Autodesk.Revit.DB; using Autodesk.Revit.UI; namespace guRoo.Forms { public class FormResult { // ====== Field + wrapped property (best practice) ====== private bool _cancelled; public bool ExampleCancelled { get =\u0026gt; _cancelled; set =\u0026gt; _cancelled = value; } // ====== Properties ====== public object Payload { get; set; } public List\u0026lt;object\u0026gt; Items { get; set; } public bool Cancelled { get; set; } public bool Valid { get; set; } public bool Affirmative { get; set; } // ====== Constructors ====== public FormResult() { Payload = null; Items = new List\u0026lt;object\u0026gt;(); _cancelled = true; Cancelled = true; Valid = false; Affirmative = false; } public FormResult(bool isValid) { Payload = null; Items = new List\u0026lt;object\u0026gt;(); _cancelled = !isValid; Cancelled = !isValid; Valid = isValid; Affirmative = isValid; } // ====== Methods ====== // Change state to invalid public void SetToInvalid() { _cancelled = true; Cancelled = true; Valid = false; Affirmative = false; } // Summary for debugging or UI public string Summary() =\u0026gt; $\u0026#34;Valid: {Valid}, Cancelled: {Cancelled}, Affirmative: {Affirmative}, Items: {Items.Count}\u0026#34;; // Real-world method: tries to create a sheet based on form state public string TryCreateSheet(Document doc) { if (!Valid || Cancelled) return \u0026#34;Form is invalid or cancelled. No sheet created.\u0026#34;; // Grab first available title block ElementId titleBlockId = new FilteredElementCollector(doc) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); if (titleBlockId == ElementId.InvalidElementId) return \u0026#34;No title block types found. Cannot create sheet.\u0026#34;; using (Transaction tx = new Transaction(doc, \u0026#34;Create Sheet\u0026#34;)) { tx.Start(); ViewSheet.Create(doc, titleBlockId); tx.Commit(); } return \u0026#34;Sheet created successfully!\u0026#34;; } } } StartCommand.cs using Autodesk.Revit.Attributes; using Autodesk.Revit.DB; using Autodesk.Revit.UI; using Nice3point.Revit.Toolkit.External; using gFrm = guRoo.Forms; namespace guRoo.Commands { [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { // Example 1: Default constructor (invalid form) // var formResult = new gFrm.FormResult(); // Example 2: Affirmative constructor (valid form) var formResult = new gFrm.FormResult(true); // Attach the Revit Document to our form object formResult.Payload = Document; // Optionally, flip it to invalid to test // formResult.SetToInvalid(); // Try to create the sheet string operationResult = formResult.TryCreateSheet(Document); // Show result to the user TaskDialog.Show(\u0026#34;Form + Sheet Creation\u0026#34;, formResult.Summary() + \u0026#34;\\n\\n\u0026#34; + operationResult); } } } Disposal Later on, we will look into other things we can make use of, such as specifying what happens to our class instances when they are disposed. Generally, an object will be disposed when it us not needed anymore. The compiler tracks and determines when this occurs for us, but we can also manually dispose of or with the disposal of objects. From there, we\u0026rsquo;ve learnt all about classes!\nWe now have a basic understanding of:\nClasses in C# Access modifiers Initialization Properties and methods Namespaces 6. Introduction to Interfaces An interface is like a contract for a class.\nIt doesn’t contain actual working code — instead, it defines what properties and methods a class must have.\nIf a class implements an interface, it promises to include all the members that interface defines.\nThis is useful for making sure different classes follow the same pattern, even if they work in different ways inside.\n💡 Think of it as a checklist: the interface says “you must have these items,” and your class fills in the details.\nInterface Example If we have an interface IAnimal that says:\n“You must have a property Legs” “You must have a property Name” “You must have a method MakeNoise()” Then any class implementing IAnimal must include all of those members. // Pseudo Code IAnimal int Legs; string Name; void MakeNoise(); Once a class implements an interface:\nYou write the actual code for the methods in that class. You can set the starting values for the interface’s properties. You can define the behavior of each method however you want. This is why interfaces are considered abstract — they don’t tell you how to do something, only that you must have it.\nThey’re a way to guide multiple classes to share the same “template” of members while letting each class have its own unique implementation.\nUsing an Interface Example // Class that implements the IAnimal interface public class Dog : IAnimal { public int Legs { get; set; } = 4; public string Name { get; set; } = \u0026#34;Dog\u0026#34;; public void MakeNoise() { Console.WriteLine(\u0026#34;Woof!\u0026#34;); } } Explanation:\nThe Dog class implements IAnimal. The Legs and Name properties are given real values. The MakeNoise() method is given actual behavior (printing \u0026ldquo;Woof!\u0026rdquo;). You can implement more than one interface in a single class. By convention, interface names start with I (e.g., IAnimal, IExternalCommand). Argument Provision Many interfaces in the Revit API come with extra built-in support.\nFor example:\nSome interfaces include methods that are automatically called when certain events happen (e.g., a command starts, the application opens, or a document changes). When you implement such an interface, you don’t have to set up the event wiring yourself — Revit will call the method for you. Your job is simply to write the code that runs when the event occurs. 💡 Think of it like Revit saying: “When this happens, I’ll call your method. Just tell me what you want to do inside it.”\nApplication Variants Type Description UIControlledApplication Provides access to the Revit application, typically used on startup and shutdown when no document is yet available. ControlledApplication Represents the application service, giving access to documents, options, and application-specific settings (e.g., language). UIApplication Similar to UIControlledApplication, but available during a running session. We’ll use this often, and in a future lesson we’ll register it as a globally accessible variable. UIDocument Represents the current document at the UI level, giving access to things like selections and opened views. Document Represents the current document at the core API level, providing access to Revit API classes, methods, and properties (e.g., collecting elements). How we can access them? These objects are related in a cascading hierarchy — you can get one from another:\nUIControlledApplication uiCtlApp; // Available at startup/shutdown ControlledApplication ctlApp = uiCtlApp.ControlledApplication; UIApplication uiApp; // Available in commands/events UIDocument uiDoc = uiApp.ActiveUIDocument; Document doc = uiDoc.Document; // The main Revit document API 💡 Tip: At startup/shutdown you’ll usually have UIControlledApplication.\n💡 Tip: During a command / event, you’ll start with UIApplication.\nHomework Implement IExternalApplication Implement IExternalCommand Collect the ControlledApplication in your application entry point Collect the Document inside your command Solution Step 1 — Learn the interface requirements Go to revitapidocs.com.\nYou’ll see that IExternalApplication defines two methods you must implement:\nOnStartup(UIControlledApplication application) — runs when Revit starts. OnShutdown(UIControlledApplication application) — runs when Revit shuts down. Both methods must return a Result enum:\nResult.Succeeded — startup/shutdown completed successfully. Result.Cancelled — you want to cancel the process. Result.Failed — something went wrong. Step 2 — Understand the parameters When OnStartup() or OnShutdown() runs, Revit passes you a UIControlledApplication object.\nFrom this you can get:\nControlledApplication → uiCtlApp.ControlledApplication Gives access to application-level settings, documents list, Revit version info, language, etc. Ribbon and UI setup methods (you can add panels and buttons here). Step 3 — Implementation in Application.cs // Autodesk using Autodesk.Revit.UI // This application belongs to the root namespace namespace guRoo { // Implementing the interface for applications public class Application: IExternalApplication { //This will run on Startup public Result OnStartup(UIControlledApplication uiCtlApp) { // Not sure what this does, explain: car ctlApp = uiCtlApp.ControlledApplication; Not sure, explain better: // This is supposed to be the end of the construction of our toolbar // Meaning it has to result in Success when Revit Launches. return Result.Succeeded; // or Cancelled } // This will urn on shutdown public Result OnShutdown(UIControlledApplication uiCtlApp) { return Result.Succeeded; } } } We now have a basic understanding of:\nInterfaces IExternalApplication IExternalCommand Application Classes Document Classes 7. Create a PushButton Let\u0026rsquo;s set up a button we can run our command from (we had this before, but we\u0026rsquo;re doing it the typical way vs the Nice3point way). We will create a tab, a panel, a button and finally set up a basic command that runs when we press it. Understanding Names RibbonTab RibbonPanel Ribbon PushButton What do we need to do? Create our add-in Tab Add a RibbonPanel to the Tab Add a PushButton to the Ribbon Panel Related API Classes: UIControlledApplication \u0026gt; Tab Tab \u0026gt; RibbonPannel RibbonPanel \u0026gt; PushButtonData \u0026gt; PushButton Properties of a PushButton Property Description AssemblyName Assembly path of the button. AvailabilityClassName The full class name of the class providing the entry point to decide availability of this push button. ClassName The name of the class containing the implementation for the command. Enabled Gets or sets a value indicating whether the item is enabled. Image The image of the button. IsEnabledByContext Indicates if this button can be executed. True if permitted based on the current Revit context (active doc, active view, active tool). False if disabled because of the active context. ItemText Gets or sets the text displayed on the item. ItemType Gets the item type. LargeImage The large image shown on the button. LongDescription Long description of the command tooltip. Name The name of the item. ToolTip The description that appears as a tooltip for the item. ToolTipImage The image to show as part of the button’s extended tooltip. Visible Gets or sets a value indicating whether the item is visible. One Important Method -\u0026gt; GetRibbonPanels GetRibbonPannels - Get all the custom Panels on Add-Ins Tab of Revit. GetRibbonPannels(String) - Get all the custom Panels on a designated Revit Tab. GetRibbonPannel(Tab) - Get all the custom Panels on a designated standard Revit Tab. Executing Assembly When our add-in is running, all the classes, resources and code we have produced are executed as an Assembly. We will access this to connect commands to buttons. using System.Reflection Assembly.GetExecutingAssembly() Homework Create a static utility class Add methods to static utility class that we need Run these methods in OnStartup method Create and assign icons and tooltips, Develop a naming system to simplify it all. 8. Global Variables Some programming languages support \u0026lsquo;global\u0026rsquo; variables, which can be accessed anywhere at any time once set in the project.\nTo my knowledge, C# does not have a dedicated system for this. We can still achieve this by utilizing a static class that is dedicated to storing and providing these, however.\nLet\u0026rsquo;s set up a Globals Class, which will give us access to objects that would otherwise be inaccessible from various areas of our project. We will also look at how we can use an event to capture the UIApplication. Why can\u0026rsquo;t we get the UiApp? We will collect most variables on startup, but the UiApplication is not available during this time in Revit. In order to collect it we will take advantage of the OnIdling Event.\nEvents 101 Events provide us the ability to have code that executes when various events occur in an application. For example, run a code whenever the view is changed. When Revit is available, it is said to be Idling (not doing anything). The OnIdling event is commonly used to run some code as soon as Revit is available for code to be run. Basic Sub/Unsub syntax Subscribe to Idling event UICtlApp.Idling += MethodName\nUnsubsribe from idling event UICtlApp.Idling -= MethodName\nIn most cases, you will want your method to unsubscribe itself once it has run.\nHomework Create a static Globals Class Add properties and registration Register the UiApp using IdlingEvent These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-7/","summary":"\u003c!-- \u003cdiv\n  id=\"shooter-1754863937724814000\"\n  class=\"shooter-embed\"\n  data-strategy=\"burst\"\n  data-count=\"5\"\n  data-spread=\"1.0\"\n  style=\"max-width: 680px; margin: 1rem auto;\"\n\u003e\u003c/div\u003e\u003cscript defer src=\"/js/shooter.js\"\u003e\u003c/script\u003e\n --\u003e\n\u003cdiv\n  id=\"classcard-1754863937724846000\"\n  class=\"class-card-embed\"\n  data-title=\"SheetResult\"\n  data-props=\"string SheetName { get; set; }|string SheetNumber { get; set; }\"\n  data-ctors=\"SheetResult()|SheetResult(string sheetName, string sheetNumber = \u0026#39;No Number\u0026#39;)\"\n  data-methods=\"string FormatLabel()\"\n\u003e\u003c/div\u003e\n\u003ch1 id=\"1-introduction\"\u003e1. Introduction\u003c/h1\u003e\n\u003ch3 id=\"project-folder-structure\"\u003eProject Folder Structure\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eCommands\u003c/li\u003e\n\u003cli\u003eExtensions\u003c/li\u003e\n\u003cli\u003eForms\u003c/li\u003e\n\u003cli\u003eGeneral\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003cli\u003eUtilities\n\u003cem\u003eThese are \u003ccode\u003efolders\u003c/code\u003e which contain various files that our toolbar will utilize.\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eNote that these are not necessarily aligned with \u003ccode\u003enamespaces\u003c/code\u003e (which will be covered later)\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"2-what-is-a-class\"\u003e2. What is a Class?\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eIn C#, classes are templates related to the creation and management of objects. There are many predefined \u003ccode\u003eclasses\u003c/code\u003e available in C# and the Revit API.\u003c/li\u003e\n\u003cli\u003eWe use them for a wide range of things and will regularly be creating and developing our own classes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch3 id=\"accessing-properties--methods-of-a-class\"\u003eAccessing properties / methods of a Class\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eProperty:\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eobject.Property\u003c/code\u003e -\u0026gt; to access a property\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eMethod:\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eObject.Method(argument1, argument2, etc)\u003c/code\u003e -\u0026gt; to access a method\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"namespaces\"\u003eNamespaces\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eWhen we create classes, we first tell them where they belong in our project.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNamespaces\u003c/code\u003e can be nested within others using a dot separator, eventually tied back to our \u003ccode\u003e.addin\u003c/code\u003e namespace.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Revit API\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.Attributes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003eAutodesk.Revit.UI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// geeWiz - internal project objects\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003egeeWiz.Extensions\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003egeeWiz\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egeeWiz\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eForms\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"nn\"\u003egeeWiz\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egeeWiz\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUtilities\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWorkshare_Utils\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// The class belongs to the Commands namespace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"nn\"\u003egeeWiz.Cmds_Audit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// Cmd_DeletePatterns\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// Cmd_PurgeRooms\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// Cmd_PurgeTemplates\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// Cmd_PurgeFilters\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"basic-class-anatomy\"\u003eBasic Class Anatomy\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003emodifers class ClassName : Interface(s)\u003c/code\u003e\n\u003col\u003e\n\u003cli\u003eConstructor (optional)\u003c/li\u003e\n\u003cli\u003eProperties (optional)\u003c/li\u003e\n\u003cli\u003eMethods (optional)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eAccess modifiers\u003c/code\u003e control how this code can be accessed inside and outside your project.\u003c/li\u003e\n\u003cli\u003eYou will typically need to declare at least on of \u003cem\u003e\u003cstrong\u003e\u003ccode\u003epublic/private\u003c/code\u003e\u003c/strong\u003e\u003c/em\u003e,\n\u003cul\u003e\n\u003cli\u003eAnd sometimes \u003cem\u003e\u003cstrong\u003e\u003ccode\u003estatic\u003c/code\u003e\u003c/strong\u003e\u003c/em\u003e for the purposes we will use them for early on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"static-modifier\"\u003e\u003ccode\u003eStatic\u003c/code\u003e Modifier\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003estatic\u003c/code\u003e \u003ccode\u003eaccess\u003c/code\u003e \u003ccode\u003emodifier\u003c/code\u003e is a difficult concept to grasp at first, so we will simplify it somewhat.\n\u003cul\u003e\n\u003cli\u003eClasses with a \u003ccode\u003estatic\u003c/code\u003e \u003ccode\u003emodifier\u003c/code\u003e do not support the creation of \u003ccode\u003eobjects\u003c/code\u003e of that \u003ccode\u003eclass\u003c/code\u003e (instantiated).\u003c/li\u003e\n\u003cli\u003eWe commonly take advantage of this to create classes which behave more like toolkits, where the class itself acts more like a singe object we can call upon to do things for us.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSo basically, the \u003ccode\u003eStatic\u003c/code\u003e \u003ccode\u003emodifier\u003c/code\u003e is one instrument that you could use to build a complex script with.\u003c/p\u003e","title":"C# + Revit API: Lesson 7 - Introduction to Classes"},{"content":"Pseudocode try { try to do this; } catch { if try gets exception, rollback and do this; } Exceptions Exceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.\ncatch // Exception as \u0026#34;e\u0026#34; to print the error { To catch a specific exceptions, catch as e; } catch { To catch all exceptions, do this; // but better to catch specific exceptions, // otherwise you will catch all necessary and unecessary exceptions. } finally { To run a final code regardless of outcome; } Use Don\u0026rsquo;t Abuse When you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!\nTry statements should be used only when you know there is a chance an exception could occur, and it cannot be otherwise dealt with.\nYou should make them as robust as possible, and use them only for parts of your code that need them.\nDON\u0026rsquo;T DO THIS! try { all code; } catch { oh no, somethis went wrong; } Example – Creating a Revit Sheet with Error Handling using Autodesk.Revit.DB; using Autodesk.Revit.UI; using System; public class CreateSheetExample { public void CreateSheet(Document doc, ElementId titleBlockId) { try { using (Transaction tx = new Transaction(doc, \u0026#34;Create New Sheet\u0026#34;)) { tx.Start(); try { // Attempt to create a sheet ViewSheet sheet = ViewSheet.Create(doc, titleBlockId); TaskDialog.Show(\u0026#34;Success\u0026#34;, $\u0026#34;Sheet \u0026#39;{sheet.Name}\u0026#39; created!\u0026#34;); tx.Commit(); } catch (Autodesk.Revit.Exceptions. ArgumentException argEx) { // Rollback and handle known Revit-specific error tx.RollBack(); TaskDialog.Show(\u0026#34;Error\u0026#34;, $\u0026#34;Invalid title block: {argEx.Message}\u0026#34;); } catch (Exception ex) { // Rollback for unexpected system-level errors tx.RollBack(); TaskDialog.Show(\u0026#34;Unexpected Error\u0026#34;, ex.Message); } } } finally { // Always run this, no matter success or failure TaskDialog.Show(\u0026#34;Info\u0026#34;, \u0026#34;Finished attempting to create a sheet.\u0026#34;); } } } These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-6/","summary":"\u003ch1 id=\"pseudocode\"\u003ePseudocode\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"n\"\u003egets\u003c/span\u003e \u003cspan class=\"n\"\u003eexception\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erollback\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"exceptions\"\u003eExceptions\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExceptions come in many forms and Revit API Docs typically specifies the types of Exceptions we can catch for its methods. There are also system type exceptions.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Exception as \u0026#34;e\u0026#34; to print the error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eTo\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003especific\u003c/span\u003e \u003cspan class=\"n\"\u003eexceptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eTo\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"n\"\u003eall\u003c/span\u003e \u003cspan class=\"n\"\u003eexceptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// but better to catch specific exceptions, \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"c1\"\u003e// otherwise you will catch all necessary and unecessary exceptions.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efinally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003eTo\u003c/span\u003e \u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"n\"\u003efinal\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e \u003cspan class=\"n\"\u003eregardless\u003c/span\u003e \u003cspan class=\"n\"\u003eof\u003c/span\u003e \u003cspan class=\"n\"\u003eoutcome\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"use-dont-abuse\"\u003eUse Don\u0026rsquo;t Abuse\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen you first begin using languages, try statements seem great - you can write code, and if you make a mistake your code can continue. THIS IS WRONG!\u003c/p\u003e","title":"C# + Revit API: Lesson 6 - try \u0026 catch Statements"},{"content":"if // Condition { run if condition is true; } else // If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether { run if condition is false; } else if Statement if // Condition { run if condition is true; } else if // Condition { run if there are more conditions; } else // If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether { run if condition is false; } Shorthand if Statements value = condition?then:else; Nearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it\u0026rsquo;s a simple one liner task.\nExample using Autodesk.Revit.Attributes; using Autodesk.Revit.UI; using Nice3point.Revit.Toolkit.External; using Microsoft.VisualBasic; namespace guRoo.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { //TaskDialog.Show(Document.Title, \u0026#34;Hot reload!\u0026#34;); string input = Interaction.InputBox(\u0026#34;Enter a number:\u0026#34;, \u0026#34;Input Required\u0026#34;, \u0026#34;0\u0026#34;); if (!int.TryParse(input, out int i)) { TaskDialog.Show(Document.Title, \u0026#34;Invalid number entered.\u0026#34;); return; } // Shorthand version // string s = i == 3 ? \u0026#34;i is 2\u0026#34; : \u0026#34;i is not 2\u0026#34;; string outcome; if (i == 2) { outcome = \u0026#34;i is 2\u0026#34;; } else if (i == 3) { outcome = \u0026#34;i is 3\u0026#34;; } else { outcome = \u0026#34;i is neither 2 nor 3\u0026#34;; } TaskDialog.Show(Document.Title, outcome); } } } These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-5/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"c1\"\u003e// If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"else-if-statement\"\u003e\u003ccode\u003eelse if\u003c/code\u003e Statement\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Condition\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ethere\u003c/span\u003e \u003cspan class=\"n\"\u003eare\u003c/span\u003e \u003cspan class=\"n\"\u003emore\u003c/span\u003e \u003cspan class=\"n\"\u003econditions\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"c1\"\u003e// If we have no false outcome -\u0026gt; we can skip \u0026#39;else\u0026#39; branch altogether\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003erun\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e \u003cspan class=\"k\"\u003eis\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"shorthand-if-statements\"\u003eShorthand \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econdition\u003c/span\u003e\u003cspan class=\"p\"\u003e?\u003c/span\u003e\u003cspan class=\"n\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eNearly always used for quickly setting another variable to one of two possibilities, using a conditional outcome. Only used if it\u0026rsquo;s a simple one liner task.\u003c/p\u003e","title":"C# + Revit API: Lesson 5 - `if` Statements"},{"content":" They control logic and flow in our tools. We will have a good understanding of core statements we can use to build Revit Add-ins.\nLogical Operators x == y =\u0026gt; true if x is equal to y x != y =\u0026gt; true if x is not equal to y x \u0026gt; y =\u0026gt; true if x is greater than y x \u0026lt; y =\u0026gt; true if x is less than y x \u0026gt;= y =\u0026gt; true if x greater than or equals to y x \u0026lt;= y =\u0026gt; true if x less than or equals to y\nx || y =\u0026gt; true if x OR y are true x \u0026amp;\u0026amp; y =\u0026gt; true if x AND y are true !(x) =\u0026gt; true if not x (can also use \u0026rsquo;not\u0026rsquo; x) x ^ y =\u0026gt; true if x OR y are true, but not both\nNull Operations / Operands x?.Method() =\u0026gt; If x is null, Method() will NOT run x ??= value =\u0026gt; If x is null, set it to value specified x is null =\u0026gt; True if x is Null, False if it\u0026rsquo;s not Null if (x) =\u0026gt; if x is Null, it yields Null or false\nThese tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-4/","summary":"\u003cblockquote\u003e\n\u003cp\u003eThey control logic and flow in our tools.\nWe will have a good understanding of core statements we can use to build Revit Add-ins.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"logical-operators\"\u003eLogical Operators\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003ex == y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue  if x is equal to y\u003c/em\u003e\n\u003ccode\u003ex != y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is not equal to y\u003c/em\u003e\n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is greater than y\u003c/em\u003e\n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x is less than y\u003c/em\u003e\n\u003ccode\u003ex \u0026gt;= y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x greater than or equals to y\u003c/em\u003e\n\u003ccode\u003ex \u0026lt;= y\u003c/code\u003e =\u0026gt; \u003cem\u003etrue if x less than or equals to y\u003c/em\u003e\u003c/p\u003e","title":"C# + Revit API: Lesson 4 - Logical Operators"},{"content":"Boolean bool true (1) false (0) Integer int Whole number:\n1, 2, 3, etc.\nNumbers come in different formats but by default they are signable (can be negative).\nTypically, they use 32 bits based.\nDouble double Decimal number:\n0.0, 1.5, 6.592, -5.00, etc.\nDoubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.\nCharacters char \u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, etc.\nChars store a single character (which can be a number - it is ASCII based behind the scenes). They use 1 byte (8 bits).\nStrings str \u0026ldquo;string\u0026rdquo;, \u0026ldquo;example\u0026rdquo;, etc.\nStrings are technically an array of characters (a consecutive set of [[chars]] in memory). They are abstracted for us in C#, and you might sometimes see them called a [[char*]] (CharStar).\nNull pointer null Always written as [[null]]\nNulls are a special object that points to the first byte in memory. It represents an absence of data and may commonly be caused through an error or exception.\nNullable Types Most objects you use will be [[Nullable]], in that they can be represented and set to [[null]]. [[Integers]] are an example of a type which cannot be set to [[null]] unless you declare them as [[nullable]] (which makes them a different type). Revit API Classes are generally nullable. Lists or Arrays? [[Arrays]] are important for memory management eventually, but I recommend skipping the use of them initially.\nThe Revit API generally works with [[Lists]].\n[[Lists]] - differ to [[arrays]] in that we can add additional objects to them, whereas [[arrays]] have a fixed size upon creation.\nWe will learn about [[Lists]] later.\nCompiling Generally, [[C#]] code will be faster than languages such as [[Python]] as it is compiled before execution. Compiling refers to the conversion of written code into machine code (1\u0026rsquo;s and 0\u0026rsquo;s). When we build our solution before running it, it is turning our code into a [[Dynamic Linked Library]] ([[DLL]]) which is executed by the application. Languages like [[Python]] instead use [[interpreters]]. Declaring a Variable in C# [[modifier(s)]] type variableName;\n[[public]] [[private]] [[static]] [[internal]] [[virtual]] We will return to access modifiers later, for now we can avoid using them in basic examples.\nWe tell the compiler what [[type]] we need first.\nWe then tell it the [[variableName]] to assign to it.\nAssign a Variable in C# [[type]] [[variableName]] = value;\nWe can assign a value upon creating the variable.\nOr, we can assign it later on\u0026hellip;\ntype variableName; // \u0026lt;= Initialize variableName = value; // \u0026lt;= Assign When we assign a value, you need to give it a valid value for its [[type]]: int myInteger = 5; The assigned value must suit the variable type upon assignment. Type safety in C# will ensure this. Examples below would cause an error: int myInteger = 3.5; // \u0026lt;= Should be a double int myInteger = \u0026#34;5\u0026#34;; // \u0026lt;= Should be a string Creating a List in C# List\u0026lt;int\u0026gt;()myList = new List\u0026lt;int\u0026gt;(); We can also declare a list and store objects to is: List\u0026lt;int\u0026gt;()myList = new List\u0026lt;int\u0026gt;(){1,2,3}; We will come back to the braces later. Making use of var var myList = new List\u0026lt;int\u0026gt;(); If the value being assigned on the right implies a specific type, we can instead use the var keyword to simplify our code. This is generally best practice. However, if the right side is ambiguous, declare the type on the left. This will matter when we learn about class inheritance. var myList = new List\u0026lt;object\u0026gt;(); Object is a special type which allows the storage of many things. It can be a useful but ambiguous return type for functions and classes through which you might need to pass many things in/out of. We will learn in a later lesson about type casting, where the object class can be a useful intermediate type to take advantage of. Inheritance 101 The RevitAPI uses a lot of class inheritance. Metaphorical example:\nDogs and Cats are both Animals Dogs are not Cats Cats are not Dogs But the they both inherit the Animal RevitAPI Example:\nViews and Floors are both Elements\nViews are not Floors\nFloors are not Views\nBut they both inherit the Element\nElements have an ElementID property\nViews and Floors have an ElementID from Element Class\nFloors have a SlabShapeEditor Elements DO NOT Views DO NOT Basic Type Checking object is type variableName This syntax can be used to logically check if an object is or inherits a specific type/class. We can assign a variable to this object as that type in a statement (e.g. if) to locally work with it as that type instead. We now have\u0026hellip; A basic understanding of:\nHow computation works, Basic variable types/classes How to declare variables How to assign variables Inheritance We will be applying these concepts soon.\nThese tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-3/","summary":"\u003ch1 id=\"boolean-bool\"\u003eBoolean \u003ccode\u003ebool\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003etrue (1)\u003c/li\u003e\n\u003cli\u003efalse (0)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"integer-int\"\u003eInteger \u003ccode\u003eint\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWhole number:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e1, 2, 3, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNumbers come in different formats but by default they are signable (can be negative).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTypically, they use 32 bits based.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"double-double\"\u003eDouble \u003ccode\u003edouble\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDecimal number:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e0.0, 1.5, 6.592, -5.00, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDoubles use 64 bits, and are more common than floats (which use half - 32 bits). In Revit you will typically work with int and double.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"characters-char\"\u003eCharacters \u003ccode\u003echar\u003c/code\u003e\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, etc.\u003c/p\u003e","title":"C# + Revit API: Lesson 3 - Fundamental Types of Data in C#"},{"content":"I suggest taking CS50 Course to understand the basics of Programming True \u0026amp; False 0 and 1 Base 2 numbering system 1 0 1 x x x 4 2 1 = 5 In other words: 2 2 2 x x x 2 1 0 4 2 1 = 5 1 0 1 We call these bits Eight bits = 1 byte Memory is addressed into bytes ASCII Tables bring meaning to what various bytes represent: ASCII 48 = 0 (00) 110000 1 * 2^4 = 16 1 * 2^5 = 32 16 + 32 = 48 48 = 0 (in ASCII Table) Pointers = Structs (in C) Pointers are hexadecimal based values that identify an address in computer memory.\nIf you write in C, you need to manage pointers and check memory in and out as you work.\nC# bypasses this using a garbage collector (GC).\nPointers and structs allow us to connect bytes into lists. We can also array objects adjacently.\nIn C#, this is all managed for you.\n📊 Breakdown Struct 1 (First Node): Object: Data (e.g., 10) Null: No previous node — this is the start of the list. Pointer to next: Points to Struct 2 Struct 2 (Middle Node): Object: Data (e.g., 20) Pointer to previous: Points back to Struct 1 Pointer to next: Points forward to Struct 3 Struct 3 (Last Node): Object: Data (e.g., 30) Pointer to previous: Points back to Struct 2 Null: No next node — this is the end of the list. 🔁 Why use this? This doubly linked list structure allows you to:\nMove forward and backward through the list, Insert or remove elements in the middle more easily than with arrays. Code Example: #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; typedef struct Node { int value; struct Node* prev; struct Node* next; } Node; int main() { // Create 3 nodes Node* first = malloc(sizeof(Node)); Node* second = malloc(sizeof(Node)); Node* third = malloc(sizeof(Node)); // Assign values first -\u0026gt;value = 10; second-\u0026gt;value = 20; third -\u0026gt;value = 30; // Connect them first-\u0026gt;prev = NULL; first-\u0026gt;next = second; second-\u0026gt;prev = first; second-\u0026gt;next = third; third-\u0026gt;prev = second; third-\u0026gt;next = NULL; // Print values printf(\u0026#34;Forward: %d -\u0026gt; %d -\u0026gt; %d\\n\u0026#34;, first-\u0026gt;value, second-\u0026gt;value, third-\u0026gt;value); printf(\u0026#34;Backward: %d \u0026lt;- %d \u0026lt;- %d\\n\u0026#34;, third-\u0026gt;value, second-\u0026gt;value, first-\u0026gt;value); // Clean up free(third); free(second); free(first); return 0; } using System; class Node { public int Value; public Node? Prev; public Node? Next; } class Program { static void Main() { // Create 3 nodes var first = new Node { Value = 10 }; var second = new Node { Value = 20 }; var third = new Node { Value = 30 }; // Connect them first.Next = second; second.Prev = first; second.Next = third; third.Prev = second; // Traverse forward Console.WriteLine(\u0026#34;Forward:\u0026#34;); for (var current = first; current != null; current = current.Next) Console.Write(current.Value + \u0026#34; \u0026#34;); Console.WriteLine(\u0026#34;\\nBackward:\u0026#34;); for (var current = third; current != null; current = current.Prev) Console.Write(current.Value + \u0026#34; \u0026#34;); } } 🧠 Insertion and Removal in a Linked List In a linked list (especially a doubly linked list like the one we just looked at), the two most common operations are:\n➕ Insertion Adding a new node between existing nodes.\nFor example, inserting a new value between first and second:\nBefore:\nfirst \u0026lt;-\u0026gt; second After inserting new node (e.g., 15):\nfirst \u0026lt;-\u0026gt; newNode (15) \u0026lt;-\u0026gt; second To do this in code:\nCreate the new node. Update the next of the previous node. Update the prev of the next node. Link the new node’s prev and next. ➖ Removal Deleting a node from the list.\nFor example, removing second:\nBefore:\nfirst \u0026lt;-\u0026gt; second \u0026lt;-\u0026gt; third After removal:\nfirst \u0026lt;-\u0026gt; third To do this in code:\nSet first.next = third. Set third.prev = first. (In C) Free the memory of second. ✅ GOAL: We’ll insert a node with value 15 between nodes first (10) and second (20), and later remove it.\n🧱 C Code 🔧 Insertion in C: // Inserting between first and second Node* newNode = malloc(sizeof(Node)); newNode-\u0026gt;value = 15; // Link new node newNode-\u0026gt;prev = first; newNode-\u0026gt;next = second; // Update existing links first-\u0026gt;next = newNode; second-\u0026gt;prev = newNode; ❌ Removal in C: // Removing the newNode (15) first-\u0026gt;next = second; second-\u0026gt;prev = first; // Free memory free(newNode); 🧱 C# Code 🔧 Insertion in C#: // Inserting between first and second var newNode = new Node { Value = 15 }; // Link new node newNode.Prev = first; newNode.Next = second; // Update existing links first.Next = newNode; second.Prev = newNode; ❌ Removal in C#: // Removing the newNode (15) first.Next = second; second.Prev = first; // In C#, memory is handled automatically // So we don\u0026#39;t call free(); GC will collect it later ✅ Summary Operation C C# Insert Use malloc, fix 4 pointers Use new, fix 4 references Remove Fix 2 pointers, free() memory Fix 2 references, GC does cleanup These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-2/","summary":"\u003ch4 id=\"i-suggest-taking-cs50-course-to-understand-the-basics-of-programming\"\u003eI suggest taking \u003ca href=\"https://pll.harvard.edu/course/cs50-introduction-computer-science\"\u003eCS50 Course\u003c/a\u003e to understand the basics of Programming\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eTrue \u0026amp; False\u003c/li\u003e\n\u003cli\u003e0 and 1\u003c/li\u003e\n\u003cli\u003eBase 2 numbering system\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1 0 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ex x x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e4 2 1 = 5 \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eIn other words:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 2 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ex x x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 1 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e4 2 1 = 5 \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1 0 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWe call these bits \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEight bits = 1 byte\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMemory is addressed into bytes\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"ascii-tables-bring-meaning-to-what-various-bytes-represent\"\u003eASCII Tables bring meaning to what various bytes represent:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eASCII 48 = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(00) 110000\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1 * 2^4 = 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1 * 2^5 = 32\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e16 + 32 = 48\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e48 = 0 (in ASCII Table)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"pointers--structs-in-c\"\u003ePointers = Structs (in C)\u003c/h1\u003e\n\u003cp\u003ePointers are hexadecimal based values that identify an address in computer memory.\u003c/p\u003e","title":"C# + Revit API: Lesson 2 - Bits \u0026 Bytes, ASCII Table, Pointers \u0026 Structs - Programming 101"},{"content":"This post explains one concrete command—line by line—so a beginner can follow without extra abstractions.\nWhat this command does when you click your add-in button:\nTries to create a sheet (using an invalid title block on purpose → shows how error handling works).\nCollects up to 10 existing sheets and formats their numbers/names.\nDisplays the result in a WPF dialog via a ViewModel.\n✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\nThe Command (Full Code) using Autodesk.Revit.Attributes; using Nice3point.Revit.Toolkit.External; using UKON.Views; using UKON.ViewModels; namespace UKON.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); var titleBlockId = ElementId.InvalidElementId; string resultMessage = \u0026#34;\u0026#34;; using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } // Get sheet information to display var allSheets = new FilteredElementCollector(Document). OfClass(typeof(ViewSheet)). ToElements(). ToList(); if (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets: \\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); } } } What Each Part Does (Beginner-Friendly) 1) Imports using Autodesk.Revit.Attributes; // [Transaction(...)] attribute using Nice3point.Revit.Toolkit.External; // ExternalCommand base + Host DI using UKON.Views; // WPF Window (UKONView) using UKON.ViewModels; // ViewModel (UKONViewModel) Revit attributes let you declare transaction behaviour.\nNice3point Toolkit provides a simplified ExternalCommand base (gives you Document) and DI access via Host.GetService\u0026lt;T\u0026gt;().\nViews/ViewModels are your WPF MVVM types.\n2) Class \u0026amp; Attributes [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand StartupCommand runs when the user clicks your button.\n[Transaction(TransactionMode.Manual)] = you start/commit/rollback changes.\nExternalCommand (Nice3point) simplifies the Revit command pattern.\nUsedImplicitly is an analyzer hint (e.g., JetBrains) so tooling doesn’t flag it as “unused.”\n3) Getting the ViewModel var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); Pulls a ViewModel instance from DI so the dialog can display results via data binding. 4) Intentionally Invalid Title Block var titleBlockId = ElementId.InvalidElementId; // invalid on purpose string resultMessage = \u0026#34;\u0026#34;; We force a failure to demonstrate safe error handling.\nresultMessage will collect feedback for the user.\n5) Transaction + Error Handling Around ViewSheet.Create using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } Revit is read-only unless you’re inside a Transaction.\nCreating a sheet with an invalid title block throws ArgumentException → we rollback safely and show the message.\nAny unexpected error also triggers a rollback.\nThis is the core pattern you’ll reuse for any change in Revit: Start → Do work → Commit or RollBack on error.\n6) Collecting Existing Sheets var allSheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .ToElements() .ToList(); Use FilteredElementCollector to find elements in the document.\nHere we collect all sheets.\nThen we format a short list for display:\nif (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets:\\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } We show up to 10 sheets as \u0026ldquo;A101 - Floor Plan\u0026rdquo;.\nIf there are none, we display that clearly.\n7) Show the Result in WPF viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); Set the ViewModel property (MVVM). Open your WPF dialog to show the message. Why the Sheet Creation “Fails” (and How to Make It Succeed) It fails because we passed ElementId.InvalidElementId. To actually create a sheet, find a real title block type first:\nvar titleBlockId = new FilteredElementCollector(Document) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); // throws if none exist Replace the invalid id with this titleBlockId before ViewSheet.Create(\u0026hellip;) and the command will create a sheet (assuming at least one title block type is loaded).\nOptional Cleanups (Beginner-Safe) Safer casting with LINQ: var sheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .Cast\u0026lt;ViewSheet\u0026gt;() .ToList(); StringBuilder for long messages (not required, just tidy for larger outputs).\nKey Takeaways Always use a Transaction to modify the model.\nHandle exceptions and rollback on failure—never leave a transaction open.\nCollectors are how you find elements efficiently.\nMVVM + WPF: set data on the ViewModel; the dialog updates automatically.\nFor creating sheets, you need a valid title block type (OST_TitleBlocks).\nThese tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-1/","summary":"\u003cp\u003eThis post explains \u003cstrong\u003eone concrete command\u003c/strong\u003e—line by line—so a beginner can follow without extra abstractions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat this command does when you click your add-in button:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTries to create a \u003cstrong\u003esheet\u003c/strong\u003e (using an \u003cstrong\u003einvalid\u003c/strong\u003e title block on purpose → shows how error handling works).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCollects up to \u003cstrong\u003e10 existing sheets\u003c/strong\u003e and formats their numbers/names.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDisplays the result in a \u003cstrong\u003eWPF dialog\u003c/strong\u003e via a ViewModel.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\u003c/p\u003e","title":"C# + Revit API: Lesson 1 - A Simple Walkthrough of the Command"},{"content":"Why C#? Scalability Start with: Install Visual Studio 2022 Community Install .NET SDKs (.NET4.8 \u0026amp; .NET8) Install Nice3Point Templates Solution Start a solution / project Create a new project Choose the Revit Addin (Nic3Point) Template Configure your new project Name of the project Location Solution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects) Additional Information Add-in type -\u0026gt; Application User Interface -\u0026gt; None IoC -\u0026gt; Disabled Serilog support -\u0026gt; unchecked Explore Visual Studio Properties \u0026amp; Solution Explorer (Project Browser in Revit) Error \u0026amp; Output CSProj -\u0026gt; Preconfigured up to Revit v.2025 .addin -\u0026gt; Change GUID (The rest we will change later) Application Class: Tells your addin how to begin and how to finish when Revit opens and closes. Class: External Application Method: OnStartup() Will run \u0026ldquo;Create Ribbon()\u0026rdquo; Creates a Panel Adds a PushButton to that Panel With 2 Icons Our Application OnStartup When it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo; And CreateRibbon is a defined function below that: Creates a panel This is possible due to pre-configured Revit API that we are using CreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit. Creates a button Same for the Button AddPushButton Method in Revit API - Creates a button Commands Folder Core Code Currently: Task Dialog - Shows the name of the addin ExternalCommand, but we should use IExternalCommand This is the part that writes the logic for your button Once you click the button, whatever is under Commands Folder connected to the button will be executed. If you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;); Once you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo; Resources: Icons Everything is saved in windows explorer Configurations: Debug and Release Per Revit Version from R20 to R25 References: Under: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025]. DLL Files that you can reference to your project to build something. You could even add an excel package to work with Excel, will do that later. Build and test the first plugin Build the solution by clicking on Run (Play Button) next to Any CPU. Lauches Revit (Version that you pre-configured) Always Load your Addin What happened behind the scenes: VS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit. That became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier. Everything is already set and pathed for you for the ease of starting and launching plugins. Go to New Project Find your new panel in the panel tabs on the top of Revit User Interface. Find your Addin / Plugin Click on it And you will get a message with the name of your Tool. Stop Debug Closes Revit \u0026amp; Debug Mode These tutorials were inspired by the work of Aussie BIM Guru. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\n","permalink":"https://blog.aydrafting.com/posts/post-0/","summary":"\u003ch3 id=\"why-c\"\u003eWhy C#?\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eScalability\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"start-with\"\u003eStart with:\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://visualstudio.microsoft.com/downloads/\"\u003eInstall Visual Studio 2022 Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dotnet.microsoft.com/en-us/download/visual-studio-sdks\"\u003eInstall .NET SDKs (.NET4.8 \u0026amp; .NET8)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Nice3point/RevitTemplates\"\u003eInstall Nice3Point Templates\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eStart a solution / project\n\u003col\u003e\n\u003cli\u003eCreate a new project\u003c/li\u003e\n\u003cli\u003eChoose the Revit Addin (Nic3Point) Template\u003c/li\u003e\n\u003cli\u003eConfigure your new project\n\u003col\u003e\n\u003cli\u003eName of the project\u003c/li\u003e\n\u003cli\u003eLocation\u003c/li\u003e\n\u003cli\u003eSolution Name - same as project name (it\u0026rsquo;s a folder name that holds many projects)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdditional Information\n\u003col\u003e\n\u003cli\u003eAdd-in type -\u0026gt; Application\u003c/li\u003e\n\u003cli\u003eUser Interface -\u0026gt; None\u003c/li\u003e\n\u003cli\u003eIoC -\u0026gt; Disabled\u003c/li\u003e\n\u003cli\u003eSerilog support -\u0026gt; unchecked\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eExplore Visual Studio\n\u003col\u003e\n\u003cli\u003eProperties \u0026amp; Solution Explorer (Project Browser in Revit)\u003c/li\u003e\n\u003cli\u003eError \u0026amp; Output\u003c/li\u003e\n\u003cli\u003eCSProj -\u0026gt; Preconfigured up to Revit v.2025\u003c/li\u003e\n\u003cli\u003e.addin -\u0026gt; Change GUID (The rest we will change later)\u003c/li\u003e\n\u003cli\u003eApplication Class:\n\u003col\u003e\n\u003cli\u003eTells your addin how to begin and how to finish when Revit opens and closes.\u003c/li\u003e\n\u003cli\u003eClass: External Application\u003c/li\u003e\n\u003cli\u003eMethod: OnStartup()\n\u003col\u003e\n\u003cli\u003eWill run \u0026ldquo;Create Ribbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eCreates a \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eAdds a \u003cstrong\u003ePushButton\u003c/strong\u003e to that \u003cstrong\u003ePanel\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eWith 2 \u003cstrong\u003eIcons\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eOur Application\n\u003col\u003e\n\u003cli\u003eOnStartup\u003c/li\u003e\n\u003cli\u003eWhen it begins, it calls a Function \u0026ldquo;CreateRibbon()\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eAnd CreateRibbon is a defined function below that:\n\u003col\u003e\n\u003cli\u003eCreates a panel\n\u003col\u003e\n\u003cli\u003eThis is possible due to pre-configured Revit API that we are using\u003c/li\u003e\n\u003cli\u003eCreatePanel - is a pre-defined method under Revit API that, you guessed it, Creates a Panel in Revit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCreates a button\n\u003col\u003e\n\u003cli\u003eSame for the Button\u003c/li\u003e\n\u003cli\u003eAddPushButton Method in Revit API - Creates a button\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eCommands Folder\n\u003col\u003e\n\u003cli\u003eCore Code\u003c/li\u003e\n\u003cli\u003eCurrently: Task Dialog - Shows the name of the addin\n\u003col\u003e\n\u003cli\u003eExternalCommand, but we should use IExternalCommand\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eThis is the part that writes the logic for your button\u003c/li\u003e\n\u003cli\u003eOnce you click the button, whatever is under Commands Folder connected to the button will be executed.\u003c/li\u003e\n\u003cli\u003eIf you change the TaskDialog.Show(Document.Title, \u0026ldquo;Hello World\u0026rdquo;);\n\u003col\u003e\n\u003cli\u003eOnce you press the button in Revit it would show \u0026ldquo;Hello World\u0026rdquo;\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eResources:\n\u003col\u003e\n\u003cli\u003eIcons\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eEverything is saved in windows explorer\u003c/li\u003e\n\u003cli\u003eConfigurations:\n\u003col\u003e\n\u003cli\u003eDebug and Release\u003c/li\u003e\n\u003cli\u003ePer Revit Version from R20 to R25\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eReferences:\n\u003col\u003e\n\u003cli\u003eUnder: This PC \u0026gt; Windows (C:) \u0026gt; Program Files \u0026gt; Autodesk \u0026gt; Revit [2025].\u003c/li\u003e\n\u003cli\u003eDLL Files that you can reference to your project to build something.\u003c/li\u003e\n\u003cli\u003eYou could even add an excel package to work with Excel, will do that later.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild and test the first plugin\n\u003col\u003e\n\u003cli\u003eBuild the solution by clicking on Run (Play Button) next to Any CPU.\u003c/li\u003e\n\u003cli\u003eLauches Revit (Version that you pre-configured)\u003c/li\u003e\n\u003cli\u003eAlways Load your Addin\u003c/li\u003e\n\u003cli\u003eWhat happened behind the scenes:\n\u003col\u003e\n\u003cli\u003eVS2022 Added the DLL file and the .addin file into the right folder and launched Revit version that you specified with the Plugin loaded into Revit.\u003c/li\u003e\n\u003cli\u003eThat became possible due to preconfigured Visual Studio Nic3Point Template that you ran earlier.\u003c/li\u003e\n\u003cli\u003eEverything is already set and pathed for you for the ease of starting and launching plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eGo to New Project\n\u003col\u003e\n\u003cli\u003eFind your new panel in the panel tabs on the top of Revit User Interface.\u003c/li\u003e\n\u003cli\u003eFind your Addin / Plugin\u003c/li\u003e\n\u003cli\u003eClick on it\u003c/li\u003e\n\u003cli\u003eAnd you will get a message with the name of your Tool.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eStop Debug\n\u003col\u003e\n\u003cli\u003eCloses Revit \u0026amp; Debug Mode\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThese tutorials were inspired by the work of \u003ca href=\"https://www.youtube.com/@AussieBIMGuru\"\u003eAussie BIM Guru\u003c/a\u003e. If you’re looking for a deeper dive into the topics, check out his channel for detailed explanations.\u003c/p\u003e","title":"C# + Revit API: Lesson 0"},{"content":"","permalink":"https://blog.aydrafting.com/posts/untitled/","summary":"","title":""}]