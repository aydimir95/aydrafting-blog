[{"content":"This post explains one concrete command—line by line—so a beginner can follow without extra abstractions.\nWhat this command does when you click your add-in button:\nTries to create a sheet (using an invalid title block on purpose → shows how error handling works).\nCollects up to 10 existing sheets and formats their numbers/names.\nDisplays the result in a WPF dialog via a ViewModel.\n✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\nThe Command (Full Code) using Autodesk.Revit.Attributes; using Nice3point.Revit.Toolkit.External; using UKON.Views; using UKON.ViewModels; namespace UKON.Commands { /// \u0026lt;summary\u0026gt; /// External command entry point /// \u0026lt;/summary\u0026gt; [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand { public override void Execute() { var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); var titleBlockId = ElementId.InvalidElementId; string resultMessage = \u0026#34;\u0026#34;; using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } // Get sheet information to display var allSheets = new FilteredElementCollector(Document). OfClass(typeof(ViewSheet)). ToElements(). ToList(); if (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets: \\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); } } } What Each Part Does (Beginner-Friendly) 1) Imports using Autodesk.Revit.Attributes; // [Transaction(...)] attribute using Nice3point.Revit.Toolkit.External; // ExternalCommand base + Host DI using UKON.Views; // WPF Window (UKONView) using UKON.ViewModels; // ViewModel (UKONViewModel) Revit attributes let you declare transaction behaviour.\nNice3point Toolkit provides a simplified ExternalCommand base (gives you Document) and DI access via Host.GetService\u0026lt;T\u0026gt;().\nViews/ViewModels are your WPF MVVM types.\n2) Class \u0026amp; Attributes [UsedImplicitly] [Transaction(TransactionMode.Manual)] public class StartupCommand : ExternalCommand StartupCommand runs when the user clicks your button.\n[Transaction(TransactionMode.Manual)] = you start/commit/rollback changes.\nExternalCommand (Nice3point) simplifies the Revit command pattern.\nUsedImplicitly is an analyzer hint (e.g., JetBrains) so tooling doesn’t flag it as “unused.”\n3) Getting the ViewModel var viewModel = Host.GetService\u0026lt;UKONViewModel\u0026gt;(); Pulls a ViewModel instance from DI so the dialog can display results via data binding. 4) Intentionally Invalid Title Block var titleBlockId = ElementId.InvalidElementId; // invalid on purpose string resultMessage = \u0026#34;\u0026#34;; We force a failure to demonstrate safe error handling.\nresultMessage will collect feedback for the user.\n5) Transaction + Error Handling Around ViewSheet.Create using (var transaction = new Transaction(Document, \u0026#34;Create Sheet\u0026#34;)) { transaction.Start(); try { var sheet = ViewSheet.Create(Document, titleBlockId); transaction.Commit(); resultMessage = \u0026#34;Sheet created successfully!\u0026#34;; } catch (Autodesk.Revit.Exceptions.ArgumentException ex) { transaction.RollBack(); resultMessage = $\u0026#34;Sheet could not be made: {ex.Message}\u0026#34;; } catch (Exception ex) { transaction.RollBack(); resultMessage = $\u0026#34;Error: {ex.Message}\u0026#34;; } } Revit is read-only unless you’re inside a Transaction.\nCreating a sheet with an invalid title block throws ArgumentException → we rollback safely and show the message.\nAny unexpected error also triggers a rollback.\nThis is the core pattern you’ll reuse for any change in Revit: Start → Do work → Commit or RollBack on error.\n6) Collecting Existing Sheets var allSheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .ToElements() .ToList(); Use FilteredElementCollector to find elements in the document.\nHere we collect all sheets.\nThen we format a short list for display:\nif (allSheets.Count \u0026gt; 0) { var sheetNames = new List\u0026lt;string\u0026gt;(); for (int i = 0; i \u0026lt; Math.Min(10, allSheets.Count); i++) { var sheet = allSheets[i] as ViewSheet; sheetNames.Add($\u0026#34;{sheet.SheetNumber} - {sheet.Name}\u0026#34;); } resultMessage += $\u0026#34;\\n\\nFound {allSheets.Count} sheets:\\n\u0026#34; + string.Join(\u0026#34;\\n\u0026#34;, sheetNames); } else { resultMessage += \u0026#34;\\n\\nNo sheets found in document.\u0026#34;; } We show up to 10 sheets as \u0026ldquo;A101 - Floor Plan\u0026rdquo;.\nIf there are none, we display that clearly.\n7) Show the Result in WPF viewModel.ResultMessage = resultMessage; var view = new UKONView(viewModel); view.ShowDialog(); Set the ViewModel property (MVVM). Open your WPF dialog to show the message. Why the Sheet Creation “Fails” (and How to Make It Succeed) It fails because we passed ElementId.InvalidElementId. To actually create a sheet, find a real title block type first:\nvar titleBlockId = new FilteredElementCollector(Document) .OfCategory(BuiltInCategory.OST_TitleBlocks) .WhereElementIsElementType() .FirstElementId(); // throws if none exist Replace the invalid id with this titleBlockId before ViewSheet.Create(\u0026hellip;) and the command will create a sheet (assuming at least one title block type is loaded).\nOptional Cleanups (Beginner-Safe) Safer casting with LINQ: var sheets = new FilteredElementCollector(Document) .OfClass(typeof(ViewSheet)) .Cast\u0026lt;ViewSheet\u0026gt;() .ToList(); StringBuilder for long messages (not required, just tidy for larger outputs).\nKey Takeaways Always use a Transaction to modify the model.\nHandle exceptions and rollback on failure—never leave a transaction open.\nCollectors are how you find elements efficiently.\nMVVM + WPF: set data on the ViewModel; the dialog updates automatically.\nFor creating sheets, you need a valid title block type (OST_TitleBlocks).\n","permalink":"https://blog.aydrafting.com/posts/post-1/","summary":"\u003cp\u003eThis post explains \u003cstrong\u003eone concrete command\u003c/strong\u003e—line by line—so a beginner can follow without extra abstractions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat this command does when you click your add-in button:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTries to create a \u003cstrong\u003esheet\u003c/strong\u003e (using an \u003cstrong\u003einvalid\u003c/strong\u003e title block on purpose → shows how error handling works).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCollects up to \u003cstrong\u003e10 existing sheets\u003c/strong\u003e and formats their numbers/names.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDisplays the result in a \u003cstrong\u003eWPF dialog\u003c/strong\u003e via a ViewModel.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e✅ This article focuses only on the command. It assumes you’ve already wired a ribbon button (and .addin) that triggers StartupCommand.\u003c/p\u003e","title":"C# + Revit API: Lesson 1 — A Simple Walkthrough of the Command"}]